//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/market/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the market Msg service
///
/// Usage: instantiate `Akash_Market_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Market_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Market_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createBid(
    _ request: Akash_Market_V1beta1_MsgCreateBid,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCreateBid, Akash_Market_V1beta1_MsgCreateBidResponse>

  func closeBid(
    _ request: Akash_Market_V1beta1_MsgCloseBid,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCloseBid, Akash_Market_V1beta1_MsgCloseBidResponse>

  func withdrawLease(
    _ request: Akash_Market_V1beta1_MsgWithdrawLease,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_MsgWithdrawLease, Akash_Market_V1beta1_MsgWithdrawLeaseResponse>

  func createLease(
    _ request: Akash_Market_V1beta1_MsgCreateLease,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCreateLease, Akash_Market_V1beta1_MsgCreateLeaseResponse>

  func closeLease(
    _ request: Akash_Market_V1beta1_MsgCloseLease,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCloseLease, Akash_Market_V1beta1_MsgCloseLeaseResponse>
}

extension Akash_Market_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "akash.market.v1beta1.Msg"
  }

  /// CreateBid defines a method to create a bid given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBid(
    _ request: Akash_Market_V1beta1_MsgCreateBid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCreateBid, Akash_Market_V1beta1_MsgCreateBidResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Msg/CreateBid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBidInterceptors() ?? []
    )
  }

  /// CloseBid defines a method to close a bid given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseBid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeBid(
    _ request: Akash_Market_V1beta1_MsgCloseBid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCloseBid, Akash_Market_V1beta1_MsgCloseBidResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Msg/CloseBid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseBidInterceptors() ?? []
    )
  }

  /// WithdrawLease withdraws accrued funds from the lease payment
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawLease(
    _ request: Akash_Market_V1beta1_MsgWithdrawLease,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_MsgWithdrawLease, Akash_Market_V1beta1_MsgWithdrawLeaseResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Msg/WithdrawLease",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawLeaseInterceptors() ?? []
    )
  }

  /// CreateLease creates a new lease
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createLease(
    _ request: Akash_Market_V1beta1_MsgCreateLease,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCreateLease, Akash_Market_V1beta1_MsgCreateLeaseResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Msg/CreateLease",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateLeaseInterceptors() ?? []
    )
  }

  /// CloseLease defines a method to close an order given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseLease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeLease(
    _ request: Akash_Market_V1beta1_MsgCloseLease,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_MsgCloseLease, Akash_Market_V1beta1_MsgCloseLeaseResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Msg/CloseLease",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseLeaseInterceptors() ?? []
    )
  }
}

internal protocol Akash_Market_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createBid'.
  func makeCreateBidInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_MsgCreateBid, Akash_Market_V1beta1_MsgCreateBidResponse>]

  /// - Returns: Interceptors to use when invoking 'closeBid'.
  func makeCloseBidInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_MsgCloseBid, Akash_Market_V1beta1_MsgCloseBidResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawLease'.
  func makeWithdrawLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_MsgWithdrawLease, Akash_Market_V1beta1_MsgWithdrawLeaseResponse>]

  /// - Returns: Interceptors to use when invoking 'createLease'.
  func makeCreateLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_MsgCreateLease, Akash_Market_V1beta1_MsgCreateLeaseResponse>]

  /// - Returns: Interceptors to use when invoking 'closeLease'.
  func makeCloseLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_MsgCloseLease, Akash_Market_V1beta1_MsgCloseLeaseResponse>]
}

internal final class Akash_Market_V1beta1_MsgClient: Akash_Market_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Market_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.market.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the market Msg service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Market_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Akash_Market_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateBid defines a method to create a bid given proper inputs.
  func createBid(request: Akash_Market_V1beta1_MsgCreateBid, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_MsgCreateBidResponse>

  /// CloseBid defines a method to close a bid given proper inputs.
  func closeBid(request: Akash_Market_V1beta1_MsgCloseBid, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_MsgCloseBidResponse>

  /// WithdrawLease withdraws accrued funds from the lease payment
  func withdrawLease(request: Akash_Market_V1beta1_MsgWithdrawLease, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_MsgWithdrawLeaseResponse>

  /// CreateLease creates a new lease
  func createLease(request: Akash_Market_V1beta1_MsgCreateLease, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_MsgCreateLeaseResponse>

  /// CloseLease defines a method to close an order given proper inputs.
  func closeLease(request: Akash_Market_V1beta1_MsgCloseLease, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_MsgCloseLeaseResponse>
}

extension Akash_Market_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "akash.market.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_MsgCreateBid>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_MsgCreateBidResponse>(),
        interceptors: self.interceptors?.makeCreateBidInterceptors() ?? [],
        userFunction: self.createBid(request:context:)
      )

    case "CloseBid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_MsgCloseBid>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_MsgCloseBidResponse>(),
        interceptors: self.interceptors?.makeCloseBidInterceptors() ?? [],
        userFunction: self.closeBid(request:context:)
      )

    case "WithdrawLease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_MsgWithdrawLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_MsgWithdrawLeaseResponse>(),
        interceptors: self.interceptors?.makeWithdrawLeaseInterceptors() ?? [],
        userFunction: self.withdrawLease(request:context:)
      )

    case "CreateLease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_MsgCreateLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_MsgCreateLeaseResponse>(),
        interceptors: self.interceptors?.makeCreateLeaseInterceptors() ?? [],
        userFunction: self.createLease(request:context:)
      )

    case "CloseLease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_MsgCloseLease>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_MsgCloseLeaseResponse>(),
        interceptors: self.interceptors?.makeCloseLeaseInterceptors() ?? [],
        userFunction: self.closeLease(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Market_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createBid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBidInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_MsgCreateBid, Akash_Market_V1beta1_MsgCreateBidResponse>]

  /// - Returns: Interceptors to use when handling 'closeBid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseBidInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_MsgCloseBid, Akash_Market_V1beta1_MsgCloseBidResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawLease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_MsgWithdrawLease, Akash_Market_V1beta1_MsgWithdrawLeaseResponse>]

  /// - Returns: Interceptors to use when handling 'createLease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_MsgCreateLease, Akash_Market_V1beta1_MsgCreateLeaseResponse>]

  /// - Returns: Interceptors to use when handling 'closeLease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_MsgCloseLease, Akash_Market_V1beta1_MsgCloseLeaseResponse>]
}
