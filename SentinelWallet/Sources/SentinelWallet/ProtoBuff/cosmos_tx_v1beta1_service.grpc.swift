//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/tx/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Service defines a gRPC service for interacting with transactions.
///
/// Usage: instantiate `Cosmos_Tx_V1beta1_ServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Tx_V1beta1_ServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? { get }

  func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>

  func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>

  func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>

  func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>
}

extension Cosmos_Tx_V1beta1_ServiceClientProtocol {
  internal var serviceName: String {
    return "cosmos.tx.v1beta1.Service"
  }

  /// Simulate simulates executing a transaction for estimating gas usage.
  ///
  /// - Parameters:
  ///   - request: Request to send to Simulate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.tx.v1beta1.Service/Simulate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSimulateInterceptors() ?? []
    )
  }

  /// GetTx fetches a tx by hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.tx.v1beta1.Service/GetTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxInterceptors() ?? []
    )
  }

  /// BroadcastTx broadcast transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to BroadcastTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.tx.v1beta1.Service/BroadcastTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? []
    )
  }

  /// GetTxsEvent fetches txs by event.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTxsEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.tx.v1beta1.Service/GetTxsEvent",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'simulate'.
  func makeSimulateInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>]

  /// - Returns: Interceptors to use when invoking 'getTx'.
  func makeGetTxInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>]

  /// - Returns: Interceptors to use when invoking 'broadcastTx'.
  func makeBroadcastTxInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>]

  /// - Returns: Interceptors to use when invoking 'getTxsEvent'.
  func makeGetTxsEventInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>]
}

internal final class Cosmos_Tx_V1beta1_ServiceClient: Cosmos_Tx_V1beta1_ServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.tx.v1beta1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service defines a gRPC service for interacting with transactions.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Tx_V1beta1_ServiceProvider: CallHandlerProvider {
  var interceptors: Cosmos_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol? { get }

  /// Simulate simulates executing a transaction for estimating gas usage.
  func simulate(request: Cosmos_Tx_V1beta1_SimulateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_SimulateResponse>

  /// GetTx fetches a tx by hash.
  func getTx(request: Cosmos_Tx_V1beta1_GetTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_GetTxResponse>

  /// BroadcastTx broadcast transaction.
  func broadcastTx(request: Cosmos_Tx_V1beta1_BroadcastTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_BroadcastTxResponse>

  /// GetTxsEvent fetches txs by event.
  func getTxsEvent(request: Cosmos_Tx_V1beta1_GetTxsEventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_GetTxsEventResponse>
}

extension Cosmos_Tx_V1beta1_ServiceProvider {
  internal var serviceName: Substring { return "cosmos.tx.v1beta1.Service" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Simulate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_SimulateRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_SimulateResponse>(),
        interceptors: self.interceptors?.makeSimulateInterceptors() ?? [],
        userFunction: self.simulate(request:context:)
      )

    case "GetTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetTxRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetTxResponse>(),
        interceptors: self.interceptors?.makeGetTxInterceptors() ?? [],
        userFunction: self.getTx(request:context:)
      )

    case "BroadcastTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_BroadcastTxRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_BroadcastTxResponse>(),
        interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? [],
        userFunction: self.broadcastTx(request:context:)
      )

    case "GetTxsEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetTxsEventRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetTxsEventResponse>(),
        interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? [],
        userFunction: self.getTxsEvent(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'simulate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSimulateInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>]

  /// - Returns: Interceptors to use when handling 'getTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTxInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>]

  /// - Returns: Interceptors to use when handling 'broadcastTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBroadcastTxInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>]

  /// - Returns: Interceptors to use when handling 'getTxsEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTxsEventInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>]
}
