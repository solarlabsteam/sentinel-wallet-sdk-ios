// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: coinswap/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryLiquidityRequest is request type for the Query/Liquidity RPC method
struct Irismod_Coinswap_QueryLiquidityRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryLiquidityResponse is response type for the Query/Liquidity RPC method
struct Irismod_Coinswap_QueryLiquidityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var standard: Cosmos_Base_V1beta1_Coin {
    get {return _standard ?? Cosmos_Base_V1beta1_Coin()}
    set {_standard = newValue}
  }
  /// Returns true if `standard` has been explicitly set.
  var hasStandard: Bool {return self._standard != nil}
  /// Clears the value of `standard`. Subsequent reads from it will return its default value.
  mutating func clearStandard() {self._standard = nil}

  var token: Cosmos_Base_V1beta1_Coin {
    get {return _token ?? Cosmos_Base_V1beta1_Coin()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {self._token = nil}

  var liquidity: Cosmos_Base_V1beta1_Coin {
    get {return _liquidity ?? Cosmos_Base_V1beta1_Coin()}
    set {_liquidity = newValue}
  }
  /// Returns true if `liquidity` has been explicitly set.
  var hasLiquidity: Bool {return self._liquidity != nil}
  /// Clears the value of `liquidity`. Subsequent reads from it will return its default value.
  mutating func clearLiquidity() {self._liquidity = nil}

  var fee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _standard: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _token: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _liquidity: Cosmos_Base_V1beta1_Coin? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.coinswap"

extension Irismod_Coinswap_QueryLiquidityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryLiquidityRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.denom)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_QueryLiquidityRequest, rhs: Irismod_Coinswap_QueryLiquidityRequest) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Coinswap_QueryLiquidityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryLiquidityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "standard"),
    2: .same(proto: "token"),
    3: .same(proto: "liquidity"),
    4: .same(proto: "fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._standard)
      case 2: try decoder.decodeSingularMessageField(value: &self._token)
      case 3: try decoder.decodeSingularMessageField(value: &self._liquidity)
      case 4: try decoder.decodeSingularStringField(value: &self.fee)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._standard {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._liquidity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.fee.isEmpty {
      try visitor.visitSingularStringField(value: self.fee, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_QueryLiquidityResponse, rhs: Irismod_Coinswap_QueryLiquidityResponse) -> Bool {
    if lhs._standard != rhs._standard {return false}
    if lhs._token != rhs._token {return false}
    if lhs._liquidity != rhs._liquidity {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
