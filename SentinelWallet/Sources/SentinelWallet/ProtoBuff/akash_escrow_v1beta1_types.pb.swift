// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: akash/escrow/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AccountID is the account identifier
struct Akash_Escrow_V1beta1_AccountID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scope: String = String()

  var xid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Account stores state for an escrow account
struct Akash_Escrow_V1beta1_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Akash_Escrow_V1beta1_AccountID {
    get {return _id ?? Akash_Escrow_V1beta1_AccountID()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var owner: String = String()

  var state: Akash_Escrow_V1beta1_Account.State = .invalid

  var balance: Cosmos_Base_V1beta1_Coin {
    get {return _balance ?? Cosmos_Base_V1beta1_Coin()}
    set {_balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  var hasBalance: Bool {return self._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  mutating func clearBalance() {self._balance = nil}

  var transferred: Cosmos_Base_V1beta1_Coin {
    get {return _transferred ?? Cosmos_Base_V1beta1_Coin()}
    set {_transferred = newValue}
  }
  /// Returns true if `transferred` has been explicitly set.
  var hasTransferred: Bool {return self._transferred != nil}
  /// Clears the value of `transferred`. Subsequent reads from it will return its default value.
  mutating func clearTransferred() {self._transferred = nil}

  var settledAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// State stores state for an escrow account
  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// AccountStateInvalid is an invalid state
    case invalid // = 0

    /// AccountOpen is the state when an account is open
    case `open` // = 1

    /// AccountClosed is the state when an account is closed
    case closed // = 2

    /// AccountOverdrawn is the state when an account is overdrawn
    case overdrawn // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .invalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .open
      case 2: self = .closed
      case 3: self = .overdrawn
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .open: return 1
      case .closed: return 2
      case .overdrawn: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _id: Akash_Escrow_V1beta1_AccountID? = nil
  fileprivate var _balance: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _transferred: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=4.2)

extension Akash_Escrow_V1beta1_Account.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Akash_Escrow_V1beta1_Account.State] = [
    .invalid,
    .open,
    .closed,
    .overdrawn,
  ]
}

#endif  // swift(>=4.2)

/// Payment stores state for a payment
struct Akash_Escrow_V1beta1_Payment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountID: Akash_Escrow_V1beta1_AccountID {
    get {return _accountID ?? Akash_Escrow_V1beta1_AccountID()}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  mutating func clearAccountID() {self._accountID = nil}

  var paymentID: String = String()

  var owner: String = String()

  var state: Akash_Escrow_V1beta1_Payment.State = .invalid

  var rate: Cosmos_Base_V1beta1_Coin {
    get {return _rate ?? Cosmos_Base_V1beta1_Coin()}
    set {_rate = newValue}
  }
  /// Returns true if `rate` has been explicitly set.
  var hasRate: Bool {return self._rate != nil}
  /// Clears the value of `rate`. Subsequent reads from it will return its default value.
  mutating func clearRate() {self._rate = nil}

  var balance: Cosmos_Base_V1beta1_Coin {
    get {return _balance ?? Cosmos_Base_V1beta1_Coin()}
    set {_balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  var hasBalance: Bool {return self._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  mutating func clearBalance() {self._balance = nil}

  var withdrawn: Cosmos_Base_V1beta1_Coin {
    get {return _withdrawn ?? Cosmos_Base_V1beta1_Coin()}
    set {_withdrawn = newValue}
  }
  /// Returns true if `withdrawn` has been explicitly set.
  var hasWithdrawn: Bool {return self._withdrawn != nil}
  /// Clears the value of `withdrawn`. Subsequent reads from it will return its default value.
  mutating func clearWithdrawn() {self._withdrawn = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Payment State
  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// PaymentStateInvalid is the state when the payment is invalid
    case invalid // = 0

    /// PaymentStateOpen is the state when the payment is open
    case `open` // = 1

    /// PaymentStateClosed is the state when the payment is closed
    case closed // = 2

    /// PaymentStateOverdrawn is the state when the payment is overdrawn
    case overdrawn // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .invalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .open
      case 2: self = .closed
      case 3: self = .overdrawn
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .open: return 1
      case .closed: return 2
      case .overdrawn: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _accountID: Akash_Escrow_V1beta1_AccountID? = nil
  fileprivate var _rate: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _balance: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _withdrawn: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=4.2)

extension Akash_Escrow_V1beta1_Payment.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Akash_Escrow_V1beta1_Payment.State] = [
    .invalid,
    .open,
    .closed,
    .overdrawn,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "akash.escrow.v1beta1"

extension Akash_Escrow_V1beta1_AccountID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "xid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.scope)
      case 2: try decoder.decodeSingularStringField(value: &self.xid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 1)
    }
    if !self.xid.isEmpty {
      try visitor.visitSingularStringField(value: self.xid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Akash_Escrow_V1beta1_AccountID, rhs: Akash_Escrow_V1beta1_AccountID) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.xid != rhs.xid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Akash_Escrow_V1beta1_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "owner"),
    3: .same(proto: "state"),
    4: .same(proto: "balance"),
    5: .same(proto: "transferred"),
    6: .standard(proto: "settled_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._id)
      case 2: try decoder.decodeSingularStringField(value: &self.owner)
      case 3: try decoder.decodeSingularEnumField(value: &self.state)
      case 4: try decoder.decodeSingularMessageField(value: &self._balance)
      case 5: try decoder.decodeSingularMessageField(value: &self._transferred)
      case 6: try decoder.decodeSingularInt64Field(value: &self.settledAt)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 2)
    }
    if self.state != .invalid {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._transferred {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.settledAt != 0 {
      try visitor.visitSingularInt64Field(value: self.settledAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Akash_Escrow_V1beta1_Account, rhs: Akash_Escrow_V1beta1_Account) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.state != rhs.state {return false}
    if lhs._balance != rhs._balance {return false}
    if lhs._transferred != rhs._transferred {return false}
    if lhs.settledAt != rhs.settledAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Akash_Escrow_V1beta1_Account.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "invalid"),
    1: .same(proto: "open"),
    2: .same(proto: "closed"),
    3: .same(proto: "overdrawn"),
  ]
}

extension Akash_Escrow_V1beta1_Payment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Payment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "payment_id"),
    3: .same(proto: "owner"),
    4: .same(proto: "state"),
    5: .same(proto: "rate"),
    6: .same(proto: "balance"),
    7: .same(proto: "withdrawn"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.paymentID)
      case 3: try decoder.decodeSingularStringField(value: &self.owner)
      case 4: try decoder.decodeSingularEnumField(value: &self.state)
      case 5: try decoder.decodeSingularMessageField(value: &self._rate)
      case 6: try decoder.decodeSingularMessageField(value: &self._balance)
      case 7: try decoder.decodeSingularMessageField(value: &self._withdrawn)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._accountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.paymentID.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentID, fieldNumber: 2)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 3)
    }
    if self.state != .invalid {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    if let v = self._rate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._withdrawn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Akash_Escrow_V1beta1_Payment, rhs: Akash_Escrow_V1beta1_Payment) -> Bool {
    if lhs._accountID != rhs._accountID {return false}
    if lhs.paymentID != rhs.paymentID {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.state != rhs.state {return false}
    if lhs._rate != rhs._rate {return false}
    if lhs._balance != rhs._balance {return false}
    if lhs._withdrawn != rhs._withdrawn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Akash_Escrow_V1beta1_Payment.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "invalid"),
    1: .same(proto: "open"),
    2: .same(proto: "closed"),
    3: .same(proto: "overdrawn"),
  ]
}
