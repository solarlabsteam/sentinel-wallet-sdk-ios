// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mint/mint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Minter represents the minting state
struct Irishub_Mint_Minter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// time which the last update was made to the minter
  var lastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdate = newValue}
  }
  /// Returns true if `lastUpdate` has been explicitly set.
  var hasLastUpdate: Bool {return self._lastUpdate != nil}
  /// Clears the value of `lastUpdate`. Subsequent reads from it will return its default value.
  mutating func clearLastUpdate() {self._lastUpdate = nil}

  /// base inflation
  var inflationBase: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastUpdate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Params defines mint module's parameters
struct Irishub_Mint_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// type of coin to mint
  var mintDenom: String = String()

  /// inflation rate
  var inflation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irishub.mint"

extension Irishub_Mint_Minter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Minter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_update"),
    2: .standard(proto: "inflation_base"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lastUpdate)
      case 2: try decoder.decodeSingularStringField(value: &self.inflationBase)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lastUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.inflationBase.isEmpty {
      try visitor.visitSingularStringField(value: self.inflationBase, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irishub_Mint_Minter, rhs: Irishub_Mint_Minter) -> Bool {
    if lhs._lastUpdate != rhs._lastUpdate {return false}
    if lhs.inflationBase != rhs.inflationBase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irishub_Mint_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mint_denom"),
    2: .same(proto: "inflation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mintDenom)
      case 2: try decoder.decodeSingularStringField(value: &self.inflation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mintDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.mintDenom, fieldNumber: 1)
    }
    if !self.inflation.isEmpty {
      try visitor.visitSingularStringField(value: self.inflation, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irishub_Mint_Params, rhs: Irishub_Mint_Params) -> Bool {
    if lhs.mintDenom != rhs.mintDenom {return false}
    if lhs.inflation != rhs.inflation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
