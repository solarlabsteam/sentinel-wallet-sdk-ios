//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: oracle/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query creates service with guardian as rpc
///
/// Usage: instantiate `Irismod_Oracle_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Irismod_Oracle_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Irismod_Oracle_QueryClientInterceptorFactoryProtocol? { get }

  func feed(
    _ request: Irismod_Oracle_QueryFeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Oracle_QueryFeedRequest, Irismod_Oracle_QueryFeedResponse>

  func feeds(
    _ request: Irismod_Oracle_QueryFeedsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Oracle_QueryFeedsRequest, Irismod_Oracle_QueryFeedsResponse>

  func feedValue(
    _ request: Irismod_Oracle_QueryFeedValueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Oracle_QueryFeedValueRequest, Irismod_Oracle_QueryFeedValueResponse>
}

extension Irismod_Oracle_QueryClientProtocol {
  internal var serviceName: String {
    return "irismod.oracle.Query"
  }

  /// Feed queries the feed
  ///
  /// - Parameters:
  ///   - request: Request to send to Feed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feed(
    _ request: Irismod_Oracle_QueryFeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Oracle_QueryFeedRequest, Irismod_Oracle_QueryFeedResponse> {
    return self.makeUnaryCall(
      path: "/irismod.oracle.Query/Feed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeedInterceptors() ?? []
    )
  }

  /// Feeds queries the feed list
  ///
  /// - Parameters:
  ///   - request: Request to send to Feeds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeds(
    _ request: Irismod_Oracle_QueryFeedsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Oracle_QueryFeedsRequest, Irismod_Oracle_QueryFeedsResponse> {
    return self.makeUnaryCall(
      path: "/irismod.oracle.Query/Feeds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeedsInterceptors() ?? []
    )
  }

  /// FeedValue queries the feed value
  ///
  /// - Parameters:
  ///   - request: Request to send to FeedValue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feedValue(
    _ request: Irismod_Oracle_QueryFeedValueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Oracle_QueryFeedValueRequest, Irismod_Oracle_QueryFeedValueResponse> {
    return self.makeUnaryCall(
      path: "/irismod.oracle.Query/FeedValue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeedValueInterceptors() ?? []
    )
  }
}

internal protocol Irismod_Oracle_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'feed'.
  func makeFeedInterceptors() -> [ClientInterceptor<Irismod_Oracle_QueryFeedRequest, Irismod_Oracle_QueryFeedResponse>]

  /// - Returns: Interceptors to use when invoking 'feeds'.
  func makeFeedsInterceptors() -> [ClientInterceptor<Irismod_Oracle_QueryFeedsRequest, Irismod_Oracle_QueryFeedsResponse>]

  /// - Returns: Interceptors to use when invoking 'feedValue'.
  func makeFeedValueInterceptors() -> [ClientInterceptor<Irismod_Oracle_QueryFeedValueRequest, Irismod_Oracle_QueryFeedValueResponse>]
}

internal final class Irismod_Oracle_QueryClient: Irismod_Oracle_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Irismod_Oracle_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the irismod.oracle.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Oracle_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query creates service with guardian as rpc
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Oracle_QueryProvider: CallHandlerProvider {
  var interceptors: Irismod_Oracle_QueryServerInterceptorFactoryProtocol? { get }

  /// Feed queries the feed
  func feed(request: Irismod_Oracle_QueryFeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Oracle_QueryFeedResponse>

  /// Feeds queries the feed list
  func feeds(request: Irismod_Oracle_QueryFeedsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Oracle_QueryFeedsResponse>

  /// FeedValue queries the feed value
  func feedValue(request: Irismod_Oracle_QueryFeedValueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Oracle_QueryFeedValueResponse>
}

extension Irismod_Oracle_QueryProvider {
  internal var serviceName: Substring { return "irismod.oracle.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Feed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Oracle_QueryFeedRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Oracle_QueryFeedResponse>(),
        interceptors: self.interceptors?.makeFeedInterceptors() ?? [],
        userFunction: self.feed(request:context:)
      )

    case "Feeds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Oracle_QueryFeedsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Oracle_QueryFeedsResponse>(),
        interceptors: self.interceptors?.makeFeedsInterceptors() ?? [],
        userFunction: self.feeds(request:context:)
      )

    case "FeedValue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Oracle_QueryFeedValueRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Oracle_QueryFeedValueResponse>(),
        interceptors: self.interceptors?.makeFeedValueInterceptors() ?? [],
        userFunction: self.feedValue(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Irismod_Oracle_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'feed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeedInterceptors() -> [ServerInterceptor<Irismod_Oracle_QueryFeedRequest, Irismod_Oracle_QueryFeedResponse>]

  /// - Returns: Interceptors to use when handling 'feeds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeedsInterceptors() -> [ServerInterceptor<Irismod_Oracle_QueryFeedsRequest, Irismod_Oracle_QueryFeedsResponse>]

  /// - Returns: Interceptors to use when handling 'feedValue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeedValueInterceptors() -> [ServerInterceptor<Irismod_Oracle_QueryFeedValueRequest, Irismod_Oracle_QueryFeedValueResponse>]
}
