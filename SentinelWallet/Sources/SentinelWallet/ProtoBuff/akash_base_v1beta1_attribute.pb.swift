// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: akash/base/v1beta1/attribute.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Attribute represents key value pair
struct Akash_Base_V1beta1_Attribute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SignedBy represents validation accounts that tenant expects signatures for provider attributes
/// AllOf has precedence i.e. if there is at least one entry AnyOf is ignored regardless to how many
/// entries there
/// this behaviour to be discussed
struct Akash_Base_V1beta1_SignedBy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// all_of all keys in this list must have signed attributes
  var allOf: [String] = []

  /// any_of at least of of the keys from the list must have signed attributes
  var anyOf: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PlacementRequirements
struct Akash_Base_V1beta1_PlacementRequirements {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// SignedBy list of keys that tenants expect to have signatures from
  var signedBy: Akash_Base_V1beta1_SignedBy {
    get {return _signedBy ?? Akash_Base_V1beta1_SignedBy()}
    set {_signedBy = newValue}
  }
  /// Returns true if `signedBy` has been explicitly set.
  var hasSignedBy: Bool {return self._signedBy != nil}
  /// Clears the value of `signedBy`. Subsequent reads from it will return its default value.
  mutating func clearSignedBy() {self._signedBy = nil}

  /// Attribute list of attributes tenant expects from the provider
  var attributes: [Akash_Base_V1beta1_Attribute] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _signedBy: Akash_Base_V1beta1_SignedBy? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "akash.base.v1beta1"

extension Akash_Base_V1beta1_Attribute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Attribute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Akash_Base_V1beta1_Attribute, rhs: Akash_Base_V1beta1_Attribute) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Akash_Base_V1beta1_SignedBy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedBy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_of"),
    2: .standard(proto: "any_of"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.allOf)
      case 2: try decoder.decodeRepeatedStringField(value: &self.anyOf)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.allOf.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allOf, fieldNumber: 1)
    }
    if !self.anyOf.isEmpty {
      try visitor.visitRepeatedStringField(value: self.anyOf, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Akash_Base_V1beta1_SignedBy, rhs: Akash_Base_V1beta1_SignedBy) -> Bool {
    if lhs.allOf != rhs.allOf {return false}
    if lhs.anyOf != rhs.anyOf {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Akash_Base_V1beta1_PlacementRequirements: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlacementRequirements"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_by"),
    2: .same(proto: "attributes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._signedBy)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attributes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._signedBy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.attributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Akash_Base_V1beta1_PlacementRequirements, rhs: Akash_Base_V1beta1_PlacementRequirements) -> Bool {
    if lhs._signedBy != rhs._signedBy {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
