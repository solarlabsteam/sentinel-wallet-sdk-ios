// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: random/random.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Random defines the feed standard
struct Irismod_Random_Random {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestTxHash: String = String()

  var height: Int64 = 0

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Request defines the random request standard
struct Irismod_Random_Request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Int64 = 0

  var consumer: String = String()

  var txHash: String = String()

  var oracle: Bool = false

  var serviceFeeCap: [Cosmos_Base_V1beta1_Coin] = []

  var serviceContextID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.random"

extension Irismod_Random_Random: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Random"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_tx_hash"),
    2: .same(proto: "height"),
    3: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestTxHash)
      case 2: try decoder.decodeSingularInt64Field(value: &self.height)
      case 3: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestTxHash.isEmpty {
      try visitor.visitSingularStringField(value: self.requestTxHash, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Random_Random, rhs: Irismod_Random_Random) -> Bool {
    if lhs.requestTxHash != rhs.requestTxHash {return false}
    if lhs.height != rhs.height {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Random_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "consumer"),
    3: .standard(proto: "tx_hash"),
    4: .same(proto: "oracle"),
    5: .standard(proto: "service_fee_cap"),
    6: .standard(proto: "service_context_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.height)
      case 2: try decoder.decodeSingularStringField(value: &self.consumer)
      case 3: try decoder.decodeSingularStringField(value: &self.txHash)
      case 4: try decoder.decodeSingularBoolField(value: &self.oracle)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.serviceFeeCap)
      case 6: try decoder.decodeSingularStringField(value: &self.serviceContextID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 1)
    }
    if !self.consumer.isEmpty {
      try visitor.visitSingularStringField(value: self.consumer, fieldNumber: 2)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 3)
    }
    if self.oracle != false {
      try visitor.visitSingularBoolField(value: self.oracle, fieldNumber: 4)
    }
    if !self.serviceFeeCap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceFeeCap, fieldNumber: 5)
    }
    if !self.serviceContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceContextID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Random_Request, rhs: Irismod_Random_Request) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.consumer != rhs.consumer {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.oracle != rhs.oracle {return false}
    if lhs.serviceFeeCap != rhs.serviceFeeCap {return false}
    if lhs.serviceContextID != rhs.serviceContextID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
