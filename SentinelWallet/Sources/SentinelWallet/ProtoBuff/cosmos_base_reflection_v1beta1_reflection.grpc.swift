//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/base/reflection/v1beta1/reflection.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// ReflectionService defines a service for interface reflection.
///
/// Usage: instantiate `Cosmos_Base_Reflection_V1beta1_ReflectionServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Base_Reflection_V1beta1_ReflectionServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Base_Reflection_V1beta1_ReflectionServiceClientInterceptorFactoryProtocol? { get }

  func listAllInterfaces(
    _ request: Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest, Cosmos_Base_Reflection_V1beta1_ListAllInterfacesResponse>

  func listImplementations(
    _ request: Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest, Cosmos_Base_Reflection_V1beta1_ListImplementationsResponse>
}

extension Cosmos_Base_Reflection_V1beta1_ReflectionServiceClientProtocol {
  internal var serviceName: String {
    return "cosmos.base.reflection.v1beta1.ReflectionService"
  }

  /// ListAllInterfaces lists all the interfaces registered in the interface
  /// registry.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListAllInterfaces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listAllInterfaces(
    _ request: Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest, Cosmos_Base_Reflection_V1beta1_ListAllInterfacesResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.base.reflection.v1beta1.ReflectionService/ListAllInterfaces",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListAllInterfacesInterceptors() ?? []
    )
  }

  /// ListImplementations list all the concrete types that implement a given
  /// interface.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListImplementations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listImplementations(
    _ request: Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest, Cosmos_Base_Reflection_V1beta1_ListImplementationsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.base.reflection.v1beta1.ReflectionService/ListImplementations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListImplementationsInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Base_Reflection_V1beta1_ReflectionServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'listAllInterfaces'.
  func makeListAllInterfacesInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest, Cosmos_Base_Reflection_V1beta1_ListAllInterfacesResponse>]

  /// - Returns: Interceptors to use when invoking 'listImplementations'.
  func makeListImplementationsInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest, Cosmos_Base_Reflection_V1beta1_ListImplementationsResponse>]
}

internal final class Cosmos_Base_Reflection_V1beta1_ReflectionServiceClient: Cosmos_Base_Reflection_V1beta1_ReflectionServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Base_Reflection_V1beta1_ReflectionServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.base.reflection.v1beta1.ReflectionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Base_Reflection_V1beta1_ReflectionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ReflectionService defines a service for interface reflection.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Base_Reflection_V1beta1_ReflectionServiceProvider: CallHandlerProvider {
  var interceptors: Cosmos_Base_Reflection_V1beta1_ReflectionServiceServerInterceptorFactoryProtocol? { get }

  /// ListAllInterfaces lists all the interfaces registered in the interface
  /// registry.
  func listAllInterfaces(request: Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V1beta1_ListAllInterfacesResponse>

  /// ListImplementations list all the concrete types that implement a given
  /// interface.
  func listImplementations(request: Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V1beta1_ListImplementationsResponse>
}

extension Cosmos_Base_Reflection_V1beta1_ReflectionServiceProvider {
  internal var serviceName: Substring { return "cosmos.base.reflection.v1beta1.ReflectionService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListAllInterfaces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V1beta1_ListAllInterfacesResponse>(),
        interceptors: self.interceptors?.makeListAllInterfacesInterceptors() ?? [],
        userFunction: self.listAllInterfaces(request:context:)
      )

    case "ListImplementations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V1beta1_ListImplementationsResponse>(),
        interceptors: self.interceptors?.makeListImplementationsInterceptors() ?? [],
        userFunction: self.listImplementations(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Base_Reflection_V1beta1_ReflectionServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'listAllInterfaces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListAllInterfacesInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V1beta1_ListAllInterfacesRequest, Cosmos_Base_Reflection_V1beta1_ListAllInterfacesResponse>]

  /// - Returns: Interceptors to use when handling 'listImplementations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListImplementationsInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V1beta1_ListImplementationsRequest, Cosmos_Base_Reflection_V1beta1_ListImplementationsResponse>]
}
