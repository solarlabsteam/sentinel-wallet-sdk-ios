// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/gamm/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== MsgCreatePool
struct Osmosis_Gamm_V1beta1_MsgCreatePool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolParams: Osmosis_Gamm_V1beta1_PoolParams {
    get {return _poolParams ?? Osmosis_Gamm_V1beta1_PoolParams()}
    set {_poolParams = newValue}
  }
  /// Returns true if `poolParams` has been explicitly set.
  var hasPoolParams: Bool {return self._poolParams != nil}
  /// Clears the value of `poolParams`. Subsequent reads from it will return its default value.
  mutating func clearPoolParams() {self._poolParams = nil}

  var poolAssets: [Osmosis_Gamm_V1beta1_PoolAsset] = []

  var futurePoolGovernor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _poolParams: Osmosis_Gamm_V1beta1_PoolParams? = nil
}

struct Osmosis_Gamm_V1beta1_MsgCreatePoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgJoinPool
struct Osmosis_Gamm_V1beta1_MsgJoinPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolID: UInt64 = 0

  var shareOutAmount: String = String()

  var tokenInMaxs: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Gamm_V1beta1_MsgJoinPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgExitPool
struct Osmosis_Gamm_V1beta1_MsgExitPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolID: UInt64 = 0

  var shareInAmount: String = String()

  var tokenOutMins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Gamm_V1beta1_MsgExitPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgSwapExactAmountIn
struct Osmosis_Gamm_V1beta1_SwapAmountInRoute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var tokenOutDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var routes: [Osmosis_Gamm_V1beta1_SwapAmountInRoute] = []

  var tokenIn: Cosmos_Base_V1beta1_Coin {
    get {return _tokenIn ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenIn = newValue}
  }
  /// Returns true if `tokenIn` has been explicitly set.
  var hasTokenIn: Bool {return self._tokenIn != nil}
  /// Clears the value of `tokenIn`. Subsequent reads from it will return its default value.
  mutating func clearTokenIn() {self._tokenIn = nil}

  var tokenOutMinAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenIn: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgSwapExactAmountOut
struct Osmosis_Gamm_V1beta1_SwapAmountOutRoute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var tokenInDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var routes: [Osmosis_Gamm_V1beta1_SwapAmountOutRoute] = []

  var tokenInMaxAmount: String = String()

  var tokenOut: Cosmos_Base_V1beta1_Coin {
    get {return _tokenOut ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenOut = newValue}
  }
  /// Returns true if `tokenOut` has been explicitly set.
  var hasTokenOut: Bool {return self._tokenOut != nil}
  /// Clears the value of `tokenOut`. Subsequent reads from it will return its default value.
  mutating func clearTokenOut() {self._tokenOut = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenOut: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgJoinSwapExternAmountIn
struct Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolID: UInt64 = 0

  var tokenIn: Cosmos_Base_V1beta1_Coin {
    get {return _tokenIn ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenIn = newValue}
  }
  /// Returns true if `tokenIn` has been explicitly set.
  var hasTokenIn: Bool {return self._tokenIn != nil}
  /// Clears the value of `tokenIn`. Subsequent reads from it will return its default value.
  mutating func clearTokenIn() {self._tokenIn = nil}

  var shareOutMinAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenIn: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgJoinSwapShareAmountOut
struct Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolID: UInt64 = 0

  var tokenInDenom: String = String()

  var shareOutAmount: String = String()

  var tokenInMaxAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgExitSwapShareAmountIn
struct Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolID: UInt64 = 0

  var tokenOutDenom: String = String()

  var shareInAmount: String = String()

  var tokenOutMinAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgExitSwapExternAmountOut
struct Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolID: UInt64 = 0

  var tokenOut: Cosmos_Base_V1beta1_Coin {
    get {return _tokenOut ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenOut = newValue}
  }
  /// Returns true if `tokenOut` has been explicitly set.
  var hasTokenOut: Bool {return self._tokenOut != nil}
  /// Clears the value of `tokenOut`. Subsequent reads from it will return its default value.
  mutating func clearTokenOut() {self._tokenOut = nil}

  var shareInMaxAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenOut: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.gamm.v1beta1"

extension Osmosis_Gamm_V1beta1_MsgCreatePool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "poolParams"),
    3: .same(proto: "poolAssets"),
    4: .standard(proto: "future_pool_governor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularMessageField(value: &self._poolParams)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.poolAssets)
      case 4: try decoder.decodeSingularStringField(value: &self.futurePoolGovernor)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if let v = self._poolParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.poolAssets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poolAssets, fieldNumber: 3)
    }
    if !self.futurePoolGovernor.isEmpty {
      try visitor.visitSingularStringField(value: self.futurePoolGovernor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgCreatePool, rhs: Osmosis_Gamm_V1beta1_MsgCreatePool) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs._poolParams != rhs._poolParams {return false}
    if lhs.poolAssets != rhs.poolAssets {return false}
    if lhs.futurePoolGovernor != rhs.futurePoolGovernor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgCreatePoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgCreatePoolResponse, rhs: Osmosis_Gamm_V1beta1_MsgCreatePoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgJoinPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJoinPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "poolId"),
    3: .same(proto: "shareOutAmount"),
    4: .same(proto: "tokenInMaxs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 3: try decoder.decodeSingularStringField(value: &self.shareOutAmount)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.tokenInMaxs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.shareOutAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.shareOutAmount, fieldNumber: 3)
    }
    if !self.tokenInMaxs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenInMaxs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgJoinPool, rhs: Osmosis_Gamm_V1beta1_MsgJoinPool) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.shareOutAmount != rhs.shareOutAmount {return false}
    if lhs.tokenInMaxs != rhs.tokenInMaxs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgJoinPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJoinPoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgJoinPoolResponse, rhs: Osmosis_Gamm_V1beta1_MsgJoinPoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgExitPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgExitPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "poolId"),
    3: .same(proto: "shareInAmount"),
    4: .same(proto: "tokenOutMins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 3: try decoder.decodeSingularStringField(value: &self.shareInAmount)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.tokenOutMins)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.shareInAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.shareInAmount, fieldNumber: 3)
    }
    if !self.tokenOutMins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenOutMins, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgExitPool, rhs: Osmosis_Gamm_V1beta1_MsgExitPool) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.shareInAmount != rhs.shareInAmount {return false}
    if lhs.tokenOutMins != rhs.tokenOutMins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgExitPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgExitPoolResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgExitPoolResponse, rhs: Osmosis_Gamm_V1beta1_MsgExitPoolResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_SwapAmountInRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapAmountInRoute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "poolId"),
    2: .same(proto: "tokenOutDenom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 2: try decoder.decodeSingularStringField(value: &self.tokenOutDenom)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.tokenOutDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutDenom, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_SwapAmountInRoute, rhs: Osmosis_Gamm_V1beta1_SwapAmountInRoute) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.tokenOutDenom != rhs.tokenOutDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountIn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "routes"),
    3: .same(proto: "tokenIn"),
    4: .same(proto: "tokenOutMinAmount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.routes)
      case 3: try decoder.decodeSingularMessageField(value: &self._tokenIn)
      case 4: try decoder.decodeSingularStringField(value: &self.tokenOutMinAmount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 2)
    }
    if let v = self._tokenIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.tokenOutMinAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutMinAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn, rhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountIn) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs._tokenIn != rhs._tokenIn {return false}
    if lhs.tokenOutMinAmount != rhs.tokenOutMinAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountInResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse, rhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountInResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_SwapAmountOutRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapAmountOutRoute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "poolId"),
    2: .same(proto: "tokenInDenom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 2: try decoder.decodeSingularStringField(value: &self.tokenInDenom)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.tokenInDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInDenom, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_SwapAmountOutRoute, rhs: Osmosis_Gamm_V1beta1_SwapAmountOutRoute) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.tokenInDenom != rhs.tokenInDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "routes"),
    3: .same(proto: "tokenInMaxAmount"),
    4: .same(proto: "tokenOut"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.routes)
      case 3: try decoder.decodeSingularStringField(value: &self.tokenInMaxAmount)
      case 4: try decoder.decodeSingularMessageField(value: &self._tokenOut)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 2)
    }
    if !self.tokenInMaxAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInMaxAmount, fieldNumber: 3)
    }
    if let v = self._tokenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut, rhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOut) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs.tokenInMaxAmount != rhs.tokenInMaxAmount {return false}
    if lhs._tokenOut != rhs._tokenOut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountOutResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse, rhs: Osmosis_Gamm_V1beta1_MsgSwapExactAmountOutResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJoinSwapExternAmountIn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "poolId"),
    3: .same(proto: "tokenIn"),
    4: .same(proto: "shareOutMinAmount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 3: try decoder.decodeSingularMessageField(value: &self._tokenIn)
      case 4: try decoder.decodeSingularStringField(value: &self.shareOutMinAmount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if let v = self._tokenIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.shareOutMinAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.shareOutMinAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn, rhs: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountIn) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs._tokenIn != rhs._tokenIn {return false}
    if lhs.shareOutMinAmount != rhs.shareOutMinAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJoinSwapExternAmountInResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse, rhs: Osmosis_Gamm_V1beta1_MsgJoinSwapExternAmountInResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJoinSwapShareAmountOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "poolId"),
    3: .same(proto: "tokenInDenom"),
    4: .same(proto: "shareOutAmount"),
    5: .same(proto: "tokenInMaxAmount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 3: try decoder.decodeSingularStringField(value: &self.tokenInDenom)
      case 4: try decoder.decodeSingularStringField(value: &self.shareOutAmount)
      case 5: try decoder.decodeSingularStringField(value: &self.tokenInMaxAmount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.tokenInDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInDenom, fieldNumber: 3)
    }
    if !self.shareOutAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.shareOutAmount, fieldNumber: 4)
    }
    if !self.tokenInMaxAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInMaxAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut, rhs: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOut) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.tokenInDenom != rhs.tokenInDenom {return false}
    if lhs.shareOutAmount != rhs.shareOutAmount {return false}
    if lhs.tokenInMaxAmount != rhs.tokenInMaxAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJoinSwapShareAmountOutResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse, rhs: Osmosis_Gamm_V1beta1_MsgJoinSwapShareAmountOutResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgExitSwapShareAmountIn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "poolId"),
    3: .same(proto: "tokenOutDenom"),
    4: .same(proto: "shareInAmount"),
    5: .same(proto: "tokenOutMinAmount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 3: try decoder.decodeSingularStringField(value: &self.tokenOutDenom)
      case 4: try decoder.decodeSingularStringField(value: &self.shareInAmount)
      case 5: try decoder.decodeSingularStringField(value: &self.tokenOutMinAmount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if !self.tokenOutDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutDenom, fieldNumber: 3)
    }
    if !self.shareInAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.shareInAmount, fieldNumber: 4)
    }
    if !self.tokenOutMinAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutMinAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn, rhs: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountIn) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.tokenOutDenom != rhs.tokenOutDenom {return false}
    if lhs.shareInAmount != rhs.shareInAmount {return false}
    if lhs.tokenOutMinAmount != rhs.tokenOutMinAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgExitSwapShareAmountInResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse, rhs: Osmosis_Gamm_V1beta1_MsgExitSwapShareAmountInResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgExitSwapExternAmountOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "poolId"),
    3: .same(proto: "tokenOut"),
    4: .same(proto: "shareInMaxAmount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.poolID)
      case 3: try decoder.decodeSingularMessageField(value: &self._tokenOut)
      case 4: try decoder.decodeSingularStringField(value: &self.shareInMaxAmount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    if let v = self._tokenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.shareInMaxAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.shareInMaxAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut, rhs: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOut) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs._tokenOut != rhs._tokenOut {return false}
    if lhs.shareInMaxAmount != rhs.shareInMaxAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgExitSwapExternAmountOutResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse, rhs: Osmosis_Gamm_V1beta1_MsgExitSwapExternAmountOutResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
