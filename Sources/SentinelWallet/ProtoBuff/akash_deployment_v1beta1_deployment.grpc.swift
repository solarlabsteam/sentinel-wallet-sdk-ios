//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/deployment/v1beta1/deployment.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the deployment Msg service.
///
/// Usage: instantiate `Akash_Deployment_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Deployment_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Deployment_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createDeployment(
    _ request: Akash_Deployment_V1beta1_MsgCreateDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgCreateDeployment, Akash_Deployment_V1beta1_MsgCreateDeploymentResponse>

  func depositDeployment(
    _ request: Akash_Deployment_V1beta1_MsgDepositDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgDepositDeployment, Akash_Deployment_V1beta1_MsgDepositDeploymentResponse>

  func updateDeployment(
    _ request: Akash_Deployment_V1beta1_MsgUpdateDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgUpdateDeployment, Akash_Deployment_V1beta1_MsgUpdateDeploymentResponse>

  func closeDeployment(
    _ request: Akash_Deployment_V1beta1_MsgCloseDeployment,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgCloseDeployment, Akash_Deployment_V1beta1_MsgCloseDeploymentResponse>

  func closeGroup(
    _ request: Akash_Deployment_V1beta1_MsgCloseGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgCloseGroup, Akash_Deployment_V1beta1_MsgCloseGroupResponse>

  func pauseGroup(
    _ request: Akash_Deployment_V1beta1_MsgPauseGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgPauseGroup, Akash_Deployment_V1beta1_MsgPauseGroupResponse>

  func startGroup(
    _ request: Akash_Deployment_V1beta1_MsgStartGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgStartGroup, Akash_Deployment_V1beta1_MsgStartGroupResponse>
}

extension Akash_Deployment_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "akash.deployment.v1beta1.Msg"
  }

  /// CreateDeployment defines a method to create new deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDeployment(
    _ request: Akash_Deployment_V1beta1_MsgCreateDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgCreateDeployment, Akash_Deployment_V1beta1_MsgCreateDeploymentResponse> {
    return self.makeUnaryCall(
      path: "/akash.deployment.v1beta1.Msg/CreateDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  /// DepositDeployment deposits more funds into the deployment account
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositDeployment(
    _ request: Akash_Deployment_V1beta1_MsgDepositDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgDepositDeployment, Akash_Deployment_V1beta1_MsgDepositDeploymentResponse> {
    return self.makeUnaryCall(
      path: "/akash.deployment.v1beta1.Msg/DepositDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositDeploymentInterceptors() ?? []
    )
  }

  /// UpdateDeployment defines a method to update a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateDeployment(
    _ request: Akash_Deployment_V1beta1_MsgUpdateDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgUpdateDeployment, Akash_Deployment_V1beta1_MsgUpdateDeploymentResponse> {
    return self.makeUnaryCall(
      path: "/akash.deployment.v1beta1.Msg/UpdateDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? []
    )
  }

  /// CloseDeployment defines a method to close a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeDeployment(
    _ request: Akash_Deployment_V1beta1_MsgCloseDeployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgCloseDeployment, Akash_Deployment_V1beta1_MsgCloseDeploymentResponse> {
    return self.makeUnaryCall(
      path: "/akash.deployment.v1beta1.Msg/CloseDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseDeploymentInterceptors() ?? []
    )
  }

  /// CloseGroup defines a method to close a group of a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func closeGroup(
    _ request: Akash_Deployment_V1beta1_MsgCloseGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgCloseGroup, Akash_Deployment_V1beta1_MsgCloseGroupResponse> {
    return self.makeUnaryCall(
      path: "/akash.deployment.v1beta1.Msg/CloseGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseGroupInterceptors() ?? []
    )
  }

  /// PauseGroup defines a method to close a group of a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pauseGroup(
    _ request: Akash_Deployment_V1beta1_MsgPauseGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgPauseGroup, Akash_Deployment_V1beta1_MsgPauseGroupResponse> {
    return self.makeUnaryCall(
      path: "/akash.deployment.v1beta1.Msg/PauseGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseGroupInterceptors() ?? []
    )
  }

  /// StartGroup defines a method to close a group of a deployment given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to StartGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startGroup(
    _ request: Akash_Deployment_V1beta1_MsgStartGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Deployment_V1beta1_MsgStartGroup, Akash_Deployment_V1beta1_MsgStartGroupResponse> {
    return self.makeUnaryCall(
      path: "/akash.deployment.v1beta1.Msg/StartGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartGroupInterceptors() ?? []
    )
  }
}

internal protocol Akash_Deployment_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createDeployment'.
  func makeCreateDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta1_MsgCreateDeployment, Akash_Deployment_V1beta1_MsgCreateDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'depositDeployment'.
  func makeDepositDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta1_MsgDepositDeployment, Akash_Deployment_V1beta1_MsgDepositDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDeployment'.
  func makeUpdateDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta1_MsgUpdateDeployment, Akash_Deployment_V1beta1_MsgUpdateDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'closeDeployment'.
  func makeCloseDeploymentInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta1_MsgCloseDeployment, Akash_Deployment_V1beta1_MsgCloseDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'closeGroup'.
  func makeCloseGroupInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta1_MsgCloseGroup, Akash_Deployment_V1beta1_MsgCloseGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'pauseGroup'.
  func makePauseGroupInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta1_MsgPauseGroup, Akash_Deployment_V1beta1_MsgPauseGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'startGroup'.
  func makeStartGroupInterceptors() -> [ClientInterceptor<Akash_Deployment_V1beta1_MsgStartGroup, Akash_Deployment_V1beta1_MsgStartGroupResponse>]
}

internal final class Akash_Deployment_V1beta1_MsgClient: Akash_Deployment_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Deployment_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.deployment.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Deployment_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the deployment Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Deployment_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Akash_Deployment_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateDeployment defines a method to create new deployment given proper inputs.
  func createDeployment(request: Akash_Deployment_V1beta1_MsgCreateDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta1_MsgCreateDeploymentResponse>

  /// DepositDeployment deposits more funds into the deployment account
  func depositDeployment(request: Akash_Deployment_V1beta1_MsgDepositDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta1_MsgDepositDeploymentResponse>

  /// UpdateDeployment defines a method to update a deployment given proper inputs.
  func updateDeployment(request: Akash_Deployment_V1beta1_MsgUpdateDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta1_MsgUpdateDeploymentResponse>

  /// CloseDeployment defines a method to close a deployment given proper inputs.
  func closeDeployment(request: Akash_Deployment_V1beta1_MsgCloseDeployment, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta1_MsgCloseDeploymentResponse>

  /// CloseGroup defines a method to close a group of a deployment given proper inputs.
  func closeGroup(request: Akash_Deployment_V1beta1_MsgCloseGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta1_MsgCloseGroupResponse>

  /// PauseGroup defines a method to close a group of a deployment given proper inputs.
  func pauseGroup(request: Akash_Deployment_V1beta1_MsgPauseGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta1_MsgPauseGroupResponse>

  /// StartGroup defines a method to close a group of a deployment given proper inputs.
  func startGroup(request: Akash_Deployment_V1beta1_MsgStartGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Deployment_V1beta1_MsgStartGroupResponse>
}

extension Akash_Deployment_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "akash.deployment.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta1_MsgCreateDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta1_MsgCreateDeploymentResponse>(),
        interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? [],
        userFunction: self.createDeployment(request:context:)
      )

    case "DepositDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta1_MsgDepositDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta1_MsgDepositDeploymentResponse>(),
        interceptors: self.interceptors?.makeDepositDeploymentInterceptors() ?? [],
        userFunction: self.depositDeployment(request:context:)
      )

    case "UpdateDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta1_MsgUpdateDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta1_MsgUpdateDeploymentResponse>(),
        interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? [],
        userFunction: self.updateDeployment(request:context:)
      )

    case "CloseDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta1_MsgCloseDeployment>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta1_MsgCloseDeploymentResponse>(),
        interceptors: self.interceptors?.makeCloseDeploymentInterceptors() ?? [],
        userFunction: self.closeDeployment(request:context:)
      )

    case "CloseGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta1_MsgCloseGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta1_MsgCloseGroupResponse>(),
        interceptors: self.interceptors?.makeCloseGroupInterceptors() ?? [],
        userFunction: self.closeGroup(request:context:)
      )

    case "PauseGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta1_MsgPauseGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta1_MsgPauseGroupResponse>(),
        interceptors: self.interceptors?.makePauseGroupInterceptors() ?? [],
        userFunction: self.pauseGroup(request:context:)
      )

    case "StartGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Deployment_V1beta1_MsgStartGroup>(),
        responseSerializer: ProtobufSerializer<Akash_Deployment_V1beta1_MsgStartGroupResponse>(),
        interceptors: self.interceptors?.makeStartGroupInterceptors() ?? [],
        userFunction: self.startGroup(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Deployment_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta1_MsgCreateDeployment, Akash_Deployment_V1beta1_MsgCreateDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'depositDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta1_MsgDepositDeployment, Akash_Deployment_V1beta1_MsgDepositDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'updateDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta1_MsgUpdateDeployment, Akash_Deployment_V1beta1_MsgUpdateDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'closeDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseDeploymentInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta1_MsgCloseDeployment, Akash_Deployment_V1beta1_MsgCloseDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'closeGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseGroupInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta1_MsgCloseGroup, Akash_Deployment_V1beta1_MsgCloseGroupResponse>]

  /// - Returns: Interceptors to use when handling 'pauseGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseGroupInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta1_MsgPauseGroup, Akash_Deployment_V1beta1_MsgPauseGroupResponse>]

  /// - Returns: Interceptors to use when handling 'startGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartGroupInterceptors() -> [ServerInterceptor<Akash_Deployment_V1beta1_MsgStartGroup, Akash_Deployment_V1beta1_MsgStartGroupResponse>]
}
