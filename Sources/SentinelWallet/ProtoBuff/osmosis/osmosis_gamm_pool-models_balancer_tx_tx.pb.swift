// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/gamm/pool-models/balancer/tx/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== MsgCreatePool
struct Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolParams: Osmosis_Gamm_V1beta1_PoolParams {
    get {return _poolParams ?? Osmosis_Gamm_V1beta1_PoolParams()}
    set {_poolParams = newValue}
  }
  /// Returns true if `poolParams` has been explicitly set.
  var hasPoolParams: Bool {return self._poolParams != nil}
  /// Clears the value of `poolParams`. Subsequent reads from it will return its default value.
  mutating func clearPoolParams() {self._poolParams = nil}

  var poolAssets: [Osmosis_Gamm_V1beta1_PoolAsset] = []

  var futurePoolGovernor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _poolParams: Osmosis_Gamm_V1beta1_PoolParams? = nil
}

/// Returns the poolID
struct Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgMigrateSharesToFullRangeConcentratedPosition
struct Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  /// shares_to_migrate indicates number of shares to migrate.
  var sharesToMigrate: Cosmos_Base_V1beta1_Coin {
    get {return _sharesToMigrate ?? Cosmos_Base_V1beta1_Coin()}
    set {_sharesToMigrate = newValue}
  }
  /// Returns true if `sharesToMigrate` has been explicitly set.
  var hasSharesToMigrate: Bool {return self._sharesToMigrate != nil}
  /// Clears the value of `sharesToMigrate`. Subsequent reads from it will return its default value.
  mutating func clearSharesToMigrate() {self._sharesToMigrate = nil}

  /// token_out_mins indicates minimum token to exit Balancer pool with.
  var tokenOutMins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sharesToMigrate: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount0: String = String()

  var amount1: String = String()

  var liquidityCreated: String = String()

  var joinTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _joinTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_joinTime = newValue}
  }
  /// Returns true if `joinTime` has been explicitly set.
  var hasJoinTime: Bool {return self._joinTime != nil}
  /// Clears the value of `joinTime`. Subsequent reads from it will return its default value.
  mutating func clearJoinTime() {self._joinTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _joinTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPool: @unchecked Sendable {}
extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPoolResponse: @unchecked Sendable {}
extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPosition: @unchecked Sendable {}
extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPositionResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.gamm.poolmodels.balancer.v1beta1"

extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateBalancerPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "pool_params"),
    3: .standard(proto: "pool_assets"),
    4: .standard(proto: "future_pool_governor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._poolParams) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.poolAssets) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.futurePoolGovernor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    try { if let v = self._poolParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.poolAssets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.poolAssets, fieldNumber: 3)
    }
    if !self.futurePoolGovernor.isEmpty {
      try visitor.visitSingularStringField(value: self.futurePoolGovernor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPool, rhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPool) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs._poolParams != rhs._poolParams {return false}
    if lhs.poolAssets != rhs.poolAssets {return false}
    if lhs.futurePoolGovernor != rhs.futurePoolGovernor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateBalancerPoolResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPoolResponse, rhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgCreateBalancerPoolResponse) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMigrateSharesToFullRangeConcentratedPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "shares_to_migrate"),
    3: .standard(proto: "token_out_mins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._sharesToMigrate) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tokenOutMins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    try { if let v = self._sharesToMigrate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.tokenOutMins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenOutMins, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPosition, rhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPosition) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs._sharesToMigrate != rhs._sharesToMigrate {return false}
    if lhs.tokenOutMins != rhs.tokenOutMins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgMigrateSharesToFullRangeConcentratedPositionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount0"),
    2: .same(proto: "amount1"),
    3: .standard(proto: "liquidity_created"),
    4: .standard(proto: "join_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.amount0) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount1) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.liquidityCreated) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._joinTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.amount0.isEmpty {
      try visitor.visitSingularStringField(value: self.amount0, fieldNumber: 1)
    }
    if !self.amount1.isEmpty {
      try visitor.visitSingularStringField(value: self.amount1, fieldNumber: 2)
    }
    if !self.liquidityCreated.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidityCreated, fieldNumber: 3)
    }
    try { if let v = self._joinTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPositionResponse, rhs: Osmosis_Gamm_Poolmodels_Balancer_V1beta1_MsgMigrateSharesToFullRangeConcentratedPositionResponse) -> Bool {
    if lhs.amount0 != rhs.amount0 {return false}
    if lhs.amount1 != rhs.amount1 {return false}
    if lhs.liquidityCreated != rhs.liquidityCreated {return false}
    if lhs._joinTime != rhs._joinTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
