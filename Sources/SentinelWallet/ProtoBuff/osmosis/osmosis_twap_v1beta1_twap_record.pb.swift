// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/twap/v1beta1/twap_record.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A TWAP record should be indexed in state by pool_id, (asset pair), timestamp
/// The asset pair assets should be lexicographically sorted.
/// Technically (pool_id, asset_0_denom, asset_1_denom, height) do not need to
/// appear in the struct however we view this as the wrong performance tradeoff
/// given SDK today. Would rather we optimize for readability and correctness,
/// than an optimal state storage format. The system bottleneck is elsewhere for
/// now.
struct Osmosis_Twap_V1beta1_TwapRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  /// Lexicographically smaller denom of the pair
  var asset0Denom: String = String()

  /// Lexicographically larger denom of the pair
  var asset1Denom: String = String()

  /// height this record corresponds to, for debugging purposes
  var height: Int64 = 0

  /// This field should only exist until we have a global registry in the state
  /// machine, mapping prior block heights within {TIME RANGE} to times.
  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  /// We store the last spot prices in the struct, so that we can interpolate
  /// accumulator values for times between when accumulator records are stored.
  var p0LastSpotPrice: String = String()

  var p1LastSpotPrice: String = String()

  var p0ArithmeticTwapAccumulator: String = String()

  var p1ArithmeticTwapAccumulator: String = String()

  var geometricTwapAccumulator: String = String()

  /// This field contains the time in which the last spot price error occured.
  /// It is used to alert the caller if they are getting a potentially erroneous
  /// TWAP, due to an unforeseen underlying error.
  var lastErrorTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastErrorTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastErrorTime = newValue}
  }
  /// Returns true if `lastErrorTime` has been explicitly set.
  var hasLastErrorTime: Bool {return self._lastErrorTime != nil}
  /// Clears the value of `lastErrorTime`. Subsequent reads from it will return its default value.
  mutating func clearLastErrorTime() {self._lastErrorTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastErrorTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Twap_V1beta1_TwapRecord: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.twap.v1beta1"

extension Osmosis_Twap_V1beta1_TwapRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TwapRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "asset0_denom"),
    3: .standard(proto: "asset1_denom"),
    4: .same(proto: "height"),
    5: .same(proto: "time"),
    6: .standard(proto: "p0_last_spot_price"),
    7: .standard(proto: "p1_last_spot_price"),
    8: .standard(proto: "p0_arithmetic_twap_accumulator"),
    9: .standard(proto: "p1_arithmetic_twap_accumulator"),
    10: .standard(proto: "geometric_twap_accumulator"),
    11: .standard(proto: "last_error_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.asset0Denom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.asset1Denom) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.p0LastSpotPrice) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.p1LastSpotPrice) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.p0ArithmeticTwapAccumulator) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.p1ArithmeticTwapAccumulator) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.geometricTwapAccumulator) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._lastErrorTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.asset0Denom.isEmpty {
      try visitor.visitSingularStringField(value: self.asset0Denom, fieldNumber: 2)
    }
    if !self.asset1Denom.isEmpty {
      try visitor.visitSingularStringField(value: self.asset1Denom, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 4)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.p0LastSpotPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.p0LastSpotPrice, fieldNumber: 6)
    }
    if !self.p1LastSpotPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.p1LastSpotPrice, fieldNumber: 7)
    }
    if !self.p0ArithmeticTwapAccumulator.isEmpty {
      try visitor.visitSingularStringField(value: self.p0ArithmeticTwapAccumulator, fieldNumber: 8)
    }
    if !self.p1ArithmeticTwapAccumulator.isEmpty {
      try visitor.visitSingularStringField(value: self.p1ArithmeticTwapAccumulator, fieldNumber: 9)
    }
    if !self.geometricTwapAccumulator.isEmpty {
      try visitor.visitSingularStringField(value: self.geometricTwapAccumulator, fieldNumber: 10)
    }
    try { if let v = self._lastErrorTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Twap_V1beta1_TwapRecord, rhs: Osmosis_Twap_V1beta1_TwapRecord) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.asset0Denom != rhs.asset0Denom {return false}
    if lhs.asset1Denom != rhs.asset1Denom {return false}
    if lhs.height != rhs.height {return false}
    if lhs._time != rhs._time {return false}
    if lhs.p0LastSpotPrice != rhs.p0LastSpotPrice {return false}
    if lhs.p1LastSpotPrice != rhs.p1LastSpotPrice {return false}
    if lhs.p0ArithmeticTwapAccumulator != rhs.p0ArithmeticTwapAccumulator {return false}
    if lhs.p1ArithmeticTwapAccumulator != rhs.p1ArithmeticTwapAccumulator {return false}
    if lhs.geometricTwapAccumulator != rhs.geometricTwapAccumulator {return false}
    if lhs._lastErrorTime != rhs._lastErrorTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
