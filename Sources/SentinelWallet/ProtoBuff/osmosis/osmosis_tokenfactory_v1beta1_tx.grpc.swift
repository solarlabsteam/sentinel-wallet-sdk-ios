//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/tokenfactory/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the tokefactory module's gRPC message service.
///
/// Usage: instantiate `Osmosis_Tokenfactory_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Tokenfactory_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createDenom(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func mint(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse>

  func burn(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>

  func changeAdmin(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func setDenomMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>

  func setBeforeSendHook(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook, Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse>

  func forceTransfer(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgForceTransfer,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer, Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse>
}

extension Osmosis_Tokenfactory_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "osmosis.tokenfactory.v1beta1.Msg"
  }

  /// Unary call to CreateDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDenom(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  /// Unary call to Mint
  ///
  /// - Parameters:
  ///   - request: Request to send to Mint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mint(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  /// Unary call to Burn
  ///
  /// - Parameters:
  ///   - request: Request to send to Burn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burn(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  /// Unary call to ChangeAdmin
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func changeAdmin(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  /// Unary call to SetDenomMetadata
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDenomMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  /// Unary call to SetBeforeSendHook
  ///
  /// - Parameters:
  ///   - request: Request to send to SetBeforeSendHook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setBeforeSendHook(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook, Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setBeforeSendHook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetBeforeSendHookInterceptors() ?? []
    )
  }

  /// Unary call to ForceTransfer
  ///
  /// - Parameters:
  ///   - request: Request to send to ForceTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func forceTransfer(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgForceTransfer,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer, Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.forceTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeForceTransferInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Osmosis_Tokenfactory_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Tokenfactory_V1beta1_MsgNIOClient")
internal final class Osmosis_Tokenfactory_V1beta1_MsgClient: Osmosis_Tokenfactory_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.tokenfactory.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Tokenfactory_V1beta1_MsgNIOClient: Osmosis_Tokenfactory_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.tokenfactory.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the tokefactory module's gRPC message service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateDenomCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func makeMintCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse>

  func makeBurnCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>

  func makeChangeAdminCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func makeSetDenomMetadataCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>

  func makeSetBeforeSendHookCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook, Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse>

  func makeForceTransferCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgForceTransfer,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer, Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateDenomCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  internal func makeMintCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func makeBurnCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func makeChangeAdminCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  internal func makeSetDenomMetadataCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  internal func makeSetBeforeSendHookCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook, Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setBeforeSendHook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetBeforeSendHookInterceptors() ?? []
    )
  }

  internal func makeForceTransferCall(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgForceTransfer,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer, Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.forceTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeForceTransferInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  internal func createDenom(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? []
    )
  }

  internal func mint(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func burn(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgBurnResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func changeAdmin(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? []
    )
  }

  internal func setDenomMetadata(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? []
    )
  }

  internal func setBeforeSendHook(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setBeforeSendHook.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetBeforeSendHookInterceptors() ?? []
    )
  }

  internal func forceTransfer(
    _ request: Osmosis_Tokenfactory_V1beta1_MsgForceTransfer,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.forceTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeForceTransferInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Tokenfactory_V1beta1_MsgAsyncClient: Osmosis_Tokenfactory_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Tokenfactory_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createDenom'.
  func makeCreateDenomInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'mint'.
  func makeMintInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse>]

  /// - Returns: Interceptors to use when invoking 'burn'.
  func makeBurnInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>]

  /// - Returns: Interceptors to use when invoking 'changeAdmin'.
  func makeChangeAdminInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'setDenomMetadata'.
  func makeSetDenomMetadataInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'setBeforeSendHook'.
  func makeSetBeforeSendHookInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook, Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse>]

  /// - Returns: Interceptors to use when invoking 'forceTransfer'.
  func makeForceTransferInterceptors() -> [ClientInterceptor<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer, Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse>]
}

internal enum Osmosis_Tokenfactory_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.tokenfactory.v1beta1.Msg",
    methods: [
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.createDenom,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.mint,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.burn,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.changeAdmin,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setDenomMetadata,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.setBeforeSendHook,
      Osmosis_Tokenfactory_V1beta1_MsgClientMetadata.Methods.forceTransfer,
    ]
  )

  internal enum Methods {
    internal static let createDenom = GRPCMethodDescriptor(
      name: "CreateDenom",
      path: "/osmosis.tokenfactory.v1beta1.Msg/CreateDenom",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/osmosis.tokenfactory.v1beta1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/osmosis.tokenfactory.v1beta1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let changeAdmin = GRPCMethodDescriptor(
      name: "ChangeAdmin",
      path: "/osmosis.tokenfactory.v1beta1.Msg/ChangeAdmin",
      type: GRPCCallType.unary
    )

    internal static let setDenomMetadata = GRPCMethodDescriptor(
      name: "SetDenomMetadata",
      path: "/osmosis.tokenfactory.v1beta1.Msg/SetDenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let setBeforeSendHook = GRPCMethodDescriptor(
      name: "SetBeforeSendHook",
      path: "/osmosis.tokenfactory.v1beta1.Msg/SetBeforeSendHook",
      type: GRPCCallType.unary
    )

    internal static let forceTransfer = GRPCMethodDescriptor(
      name: "ForceTransfer",
      path: "/osmosis.tokenfactory.v1beta1.Msg/ForceTransfer",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the tokefactory module's gRPC message service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Tokenfactory_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Osmosis_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  func createDenom(request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>

  func mint(request: Osmosis_Tokenfactory_V1beta1_MsgMint, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Tokenfactory_V1beta1_MsgMintResponse>

  func burn(request: Osmosis_Tokenfactory_V1beta1_MsgBurn, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>

  func changeAdmin(request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>

  func setDenomMetadata(request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>

  func setBeforeSendHook(request: Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse>

  func forceTransfer(request: Osmosis_Tokenfactory_V1beta1_MsgForceTransfer, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse>
}

extension Osmosis_Tokenfactory_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>(),
        interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? [],
        userFunction: self.createDenom(request:context:)
      )

    case "Mint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgMint>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        userFunction: self.mint(request:context:)
      )

    case "Burn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        userFunction: self.burn(request:context:)
      )

    case "ChangeAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>(),
        interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? [],
        userFunction: self.changeAdmin(request:context:)
      )

    case "SetDenomMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? [],
        userFunction: self.setDenomMetadata(request:context:)
      )

    case "SetBeforeSendHook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse>(),
        interceptors: self.interceptors?.makeSetBeforeSendHookInterceptors() ?? [],
        userFunction: self.setBeforeSendHook(request:context:)
      )

    case "ForceTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse>(),
        interceptors: self.interceptors?.makeForceTransferInterceptors() ?? [],
        userFunction: self.forceTransfer(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the tokefactory module's gRPC message service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Tokenfactory_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createDenom(
    request: Osmosis_Tokenfactory_V1beta1_MsgCreateDenom,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse

  @Sendable func mint(
    request: Osmosis_Tokenfactory_V1beta1_MsgMint,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgMintResponse

  @Sendable func burn(
    request: Osmosis_Tokenfactory_V1beta1_MsgBurn,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgBurnResponse

  @Sendable func changeAdmin(
    request: Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse

  @Sendable func setDenomMetadata(
    request: Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse

  @Sendable func setBeforeSendHook(
    request: Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse

  @Sendable func forceTransfer(
    request: Osmosis_Tokenfactory_V1beta1_MsgForceTransfer,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Tokenfactory_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>(),
        interceptors: self.interceptors?.makeCreateDenomInterceptors() ?? [],
        wrapping: self.createDenom(request:context:)
      )

    case "Mint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgMint>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        wrapping: self.mint(request:context:)
      )

    case "Burn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        wrapping: self.burn(request:context:)
      )

    case "ChangeAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>(),
        interceptors: self.interceptors?.makeChangeAdminInterceptors() ?? [],
        wrapping: self.changeAdmin(request:context:)
      )

    case "SetDenomMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeSetDenomMetadataInterceptors() ?? [],
        wrapping: self.setDenomMetadata(request:context:)
      )

    case "SetBeforeSendHook":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse>(),
        interceptors: self.interceptors?.makeSetBeforeSendHookInterceptors() ?? [],
        wrapping: self.setBeforeSendHook(request:context:)
      )

    case "ForceTransfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer>(),
        responseSerializer: ProtobufSerializer<Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse>(),
        interceptors: self.interceptors?.makeForceTransferInterceptors() ?? [],
        wrapping: self.forceTransfer(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Tokenfactory_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDenomInterceptors() -> [ServerInterceptor<Osmosis_Tokenfactory_V1beta1_MsgCreateDenom, Osmosis_Tokenfactory_V1beta1_MsgCreateDenomResponse>]

  /// - Returns: Interceptors to use when handling 'mint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintInterceptors() -> [ServerInterceptor<Osmosis_Tokenfactory_V1beta1_MsgMint, Osmosis_Tokenfactory_V1beta1_MsgMintResponse>]

  /// - Returns: Interceptors to use when handling 'burn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnInterceptors() -> [ServerInterceptor<Osmosis_Tokenfactory_V1beta1_MsgBurn, Osmosis_Tokenfactory_V1beta1_MsgBurnResponse>]

  /// - Returns: Interceptors to use when handling 'changeAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChangeAdminInterceptors() -> [ServerInterceptor<Osmosis_Tokenfactory_V1beta1_MsgChangeAdmin, Osmosis_Tokenfactory_V1beta1_MsgChangeAdminResponse>]

  /// - Returns: Interceptors to use when handling 'setDenomMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetDenomMetadataInterceptors() -> [ServerInterceptor<Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadata, Osmosis_Tokenfactory_V1beta1_MsgSetDenomMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'setBeforeSendHook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetBeforeSendHookInterceptors() -> [ServerInterceptor<Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHook, Osmosis_Tokenfactory_V1beta1_MsgSetBeforeSendHookResponse>]

  /// - Returns: Interceptors to use when handling 'forceTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeForceTransferInterceptors() -> [ServerInterceptor<Osmosis_Tokenfactory_V1beta1_MsgForceTransfer, Osmosis_Tokenfactory_V1beta1_MsgForceTransferResponse>]
}

internal enum Osmosis_Tokenfactory_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.tokenfactory.v1beta1.Msg",
    methods: [
      Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.Methods.createDenom,
      Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.Methods.mint,
      Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.Methods.burn,
      Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.Methods.changeAdmin,
      Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.Methods.setDenomMetadata,
      Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.Methods.setBeforeSendHook,
      Osmosis_Tokenfactory_V1beta1_MsgServerMetadata.Methods.forceTransfer,
    ]
  )

  internal enum Methods {
    internal static let createDenom = GRPCMethodDescriptor(
      name: "CreateDenom",
      path: "/osmosis.tokenfactory.v1beta1.Msg/CreateDenom",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/osmosis.tokenfactory.v1beta1.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/osmosis.tokenfactory.v1beta1.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let changeAdmin = GRPCMethodDescriptor(
      name: "ChangeAdmin",
      path: "/osmosis.tokenfactory.v1beta1.Msg/ChangeAdmin",
      type: GRPCCallType.unary
    )

    internal static let setDenomMetadata = GRPCMethodDescriptor(
      name: "SetDenomMetadata",
      path: "/osmosis.tokenfactory.v1beta1.Msg/SetDenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let setBeforeSendHook = GRPCMethodDescriptor(
      name: "SetBeforeSendHook",
      path: "/osmosis.tokenfactory.v1beta1.Msg/SetBeforeSendHook",
      type: GRPCCallType.unary
    )

    internal static let forceTransfer = GRPCMethodDescriptor(
      name: "ForceTransfer",
      path: "/osmosis.tokenfactory.v1beta1.Msg/ForceTransfer",
      type: GRPCCallType.unary
    )
  }
}
