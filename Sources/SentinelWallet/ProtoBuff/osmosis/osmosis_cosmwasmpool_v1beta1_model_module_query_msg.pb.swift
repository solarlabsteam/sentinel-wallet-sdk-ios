// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/cosmwasmpool/v1beta1/model/module_query_msg.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== CalcOutAmtGivenIn
struct Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// token_in is the token to be sent to the pool.
  var tokenIn: Cosmos_Base_V1beta1_Coin {
    get {return _tokenIn ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenIn = newValue}
  }
  /// Returns true if `tokenIn` has been explicitly set.
  var hasTokenIn: Bool {return self._tokenIn != nil}
  /// Clears the value of `tokenIn`. Subsequent reads from it will return its default value.
  mutating func clearTokenIn() {self._tokenIn = nil}

  /// token_out_denom is the token denom to be received from the pool.
  var tokenOutDenom: String = String()

  /// swap_fee is the swap fee for this swap estimate.
  var swapFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenIn: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// calc_out_amt_given_in is the structure containing all the request
  /// information for this query.
  var calcOutAmtGivenIn: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn {
    get {return _calcOutAmtGivenIn ?? Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn()}
    set {_calcOutAmtGivenIn = newValue}
  }
  /// Returns true if `calcOutAmtGivenIn` has been explicitly set.
  var hasCalcOutAmtGivenIn: Bool {return self._calcOutAmtGivenIn != nil}
  /// Clears the value of `calcOutAmtGivenIn`. Subsequent reads from it will return its default value.
  mutating func clearCalcOutAmtGivenIn() {self._calcOutAmtGivenIn = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _calcOutAmtGivenIn: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// token_out is the token out computed from this swap estimate call.
  var tokenOut: Cosmos_Base_V1beta1_Coin {
    get {return _tokenOut ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenOut = newValue}
  }
  /// Returns true if `tokenOut` has been explicitly set.
  var hasTokenOut: Bool {return self._tokenOut != nil}
  /// Clears the value of `tokenOut`. Subsequent reads from it will return its default value.
  mutating func clearTokenOut() {self._tokenOut = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenOut: Cosmos_Base_V1beta1_Coin? = nil
}

/// ===================== CalcInAmtGivenOut
struct Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// token_out is the token out to be receoved from the pool.
  var tokenOut: Cosmos_Base_V1beta1_Coin {
    get {return _tokenOut ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenOut = newValue}
  }
  /// Returns true if `tokenOut` has been explicitly set.
  var hasTokenOut: Bool {return self._tokenOut != nil}
  /// Clears the value of `tokenOut`. Subsequent reads from it will return its default value.
  mutating func clearTokenOut() {self._tokenOut = nil}

  /// token_in_denom is the token denom to be sentt to the pool.
  var tokenInDenom: String = String()

  /// swap_fee is the swap fee for this swap estimate.
  var swapFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenOut: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// calc_in_amt_given_out is the structure containing all the request
  /// information for this query.
  var calcInAmtGivenOut: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut {
    get {return _calcInAmtGivenOut ?? Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut()}
    set {_calcInAmtGivenOut = newValue}
  }
  /// Returns true if `calcInAmtGivenOut` has been explicitly set.
  var hasCalcInAmtGivenOut: Bool {return self._calcInAmtGivenOut != nil}
  /// Clears the value of `calcInAmtGivenOut`. Subsequent reads from it will return its default value.
  mutating func clearCalcInAmtGivenOut() {self._calcInAmtGivenOut = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _calcInAmtGivenOut: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// token_in is the token in computed from this swap estimate call.
  var tokenIn: Cosmos_Base_V1beta1_Coin {
    get {return _tokenIn ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenIn = newValue}
  }
  /// Returns true if `tokenIn` has been explicitly set.
  var hasTokenIn: Bool {return self._tokenIn != nil}
  /// Clears the value of `tokenIn`. Subsequent reads from it will return its default value.
  mutating func clearTokenIn() {self._tokenIn = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenIn: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInRequest: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInResponse: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutRequest: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.cosmwasmpool.v1beta1"

extension Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalcOutAmtGivenIn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_in"),
    2: .standard(proto: "token_out_denom"),
    3: .standard(proto: "swap_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenIn) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tokenOutDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.swapFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.tokenOutDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutDenom, fieldNumber: 2)
    }
    if !self.swapFee.isEmpty {
      try visitor.visitSingularStringField(value: self.swapFee, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn, rhs: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenIn) -> Bool {
    if lhs._tokenIn != rhs._tokenIn {return false}
    if lhs.tokenOutDenom != rhs.tokenOutDenom {return false}
    if lhs.swapFee != rhs.swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalcOutAmtGivenInRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "calc_out_amt_given_in"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._calcOutAmtGivenIn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._calcOutAmtGivenIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInRequest, rhs: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInRequest) -> Bool {
    if lhs._calcOutAmtGivenIn != rhs._calcOutAmtGivenIn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalcOutAmtGivenInResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_out"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenOut) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_CalcOutAmtGivenInResponse) -> Bool {
    if lhs._tokenOut != rhs._tokenOut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalcInAmtGivenOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_out"),
    2: .standard(proto: "token_in_denom"),
    3: .standard(proto: "swap_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenOut) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tokenInDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.swapFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.tokenInDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInDenom, fieldNumber: 2)
    }
    if !self.swapFee.isEmpty {
      try visitor.visitSingularStringField(value: self.swapFee, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut, rhs: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOut) -> Bool {
    if lhs._tokenOut != rhs._tokenOut {return false}
    if lhs.tokenInDenom != rhs.tokenInDenom {return false}
    if lhs.swapFee != rhs.swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalcInAmtGivenOutRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "calc_in_amt_given_out"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._calcInAmtGivenOut) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._calcInAmtGivenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutRequest, rhs: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutRequest) -> Bool {
    if lhs._calcInAmtGivenOut != rhs._calcInAmtGivenOut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalcInAmtGivenOutResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_in"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenIn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_CalcInAmtGivenOutResponse) -> Bool {
    if lhs._tokenIn != rhs._tokenIn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
