//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/poolmanager/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Poolmanager_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Poolmanager_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Osmosis_Poolmanager_V1beta1_ParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_ParamsRequest, Osmosis_Poolmanager_V1beta1_ParamsResponse>

  func estimateSwapExactAmountIn(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>

  func estimateSinglePoolSwapExactAmountIn(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>

  func estimateSwapExactAmountOut(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>

  func estimateSinglePoolSwapExactAmountOut(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>

  func numPools(
    _ request: Osmosis_Poolmanager_V1beta1_NumPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_NumPoolsRequest, Osmosis_Poolmanager_V1beta1_NumPoolsResponse>

  func pool(
    _ request: Osmosis_Poolmanager_V1beta1_PoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_PoolRequest, Osmosis_Poolmanager_V1beta1_PoolResponse>

  func allPools(
    _ request: Osmosis_Poolmanager_V1beta1_AllPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_AllPoolsRequest, Osmosis_Poolmanager_V1beta1_AllPoolsResponse>

  func spotPrice(
    _ request: Osmosis_Poolmanager_V1beta1_SpotPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_SpotPriceRequest, Osmosis_Poolmanager_V1beta1_SpotPriceResponse>

  func totalPoolLiquidity(
    _ request: Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest, Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse>
}

extension Osmosis_Poolmanager_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.poolmanager.v1beta1.Query"
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Poolmanager_V1beta1_ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_ParamsRequest, Osmosis_Poolmanager_V1beta1_ParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Estimates swap amount out given in.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSwapExactAmountIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateSwapExactAmountIn(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? []
    )
  }

  /// Unary call to EstimateSinglePoolSwapExactAmountIn
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSinglePoolSwapExactAmountIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateSinglePoolSwapExactAmountIn(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountInInterceptors() ?? []
    )
  }

  /// Estimates swap amount in given out.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSwapExactAmountOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateSwapExactAmountOut(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? []
    )
  }

  /// Unary call to EstimateSinglePoolSwapExactAmountOut
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSinglePoolSwapExactAmountOut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateSinglePoolSwapExactAmountOut(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountOutInterceptors() ?? []
    )
  }

  /// Returns the total number of pools existing in Osmosis.
  ///
  /// - Parameters:
  ///   - request: Request to send to NumPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func numPools(
    _ request: Osmosis_Poolmanager_V1beta1_NumPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_NumPoolsRequest, Osmosis_Poolmanager_V1beta1_NumPoolsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.numPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? []
    )
  }

  /// Pool returns the Pool specified by the pool id
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pool(
    _ request: Osmosis_Poolmanager_V1beta1_PoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_PoolRequest, Osmosis_Poolmanager_V1beta1_PoolResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// AllPools returns all pools on the Osmosis chain sorted by IDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allPools(
    _ request: Osmosis_Poolmanager_V1beta1_AllPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_AllPoolsRequest, Osmosis_Poolmanager_V1beta1_AllPoolsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.allPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllPoolsInterceptors() ?? []
    )
  }

  /// SpotPrice defines a gRPC query handler that returns the spot price given
  /// a base denomination and a quote denomination.
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotPrice(
    _ request: Osmosis_Poolmanager_V1beta1_SpotPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_SpotPriceRequest, Osmosis_Poolmanager_V1beta1_SpotPriceResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.spotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? []
    )
  }

  /// Unary call to TotalPoolLiquidity
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalPoolLiquidity.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalPoolLiquidity(
    _ request: Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest, Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Osmosis_Poolmanager_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Poolmanager_V1beta1_QueryNIOClient")
internal final class Osmosis_Poolmanager_V1beta1_QueryClient: Osmosis_Poolmanager_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.poolmanager.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Poolmanager_V1beta1_QueryNIOClient: Osmosis_Poolmanager_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.poolmanager.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Poolmanager_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Osmosis_Poolmanager_V1beta1_ParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_ParamsRequest, Osmosis_Poolmanager_V1beta1_ParamsResponse>

  func makeEstimateSwapExactAmountInCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>

  func makeEstimateSinglePoolSwapExactAmountInCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>

  func makeEstimateSwapExactAmountOutCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>

  func makeEstimateSinglePoolSwapExactAmountOutCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>

  func makeNumPoolsCall(
    _ request: Osmosis_Poolmanager_V1beta1_NumPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_NumPoolsRequest, Osmosis_Poolmanager_V1beta1_NumPoolsResponse>

  func makePoolCall(
    _ request: Osmosis_Poolmanager_V1beta1_PoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_PoolRequest, Osmosis_Poolmanager_V1beta1_PoolResponse>

  func makeAllPoolsCall(
    _ request: Osmosis_Poolmanager_V1beta1_AllPoolsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_AllPoolsRequest, Osmosis_Poolmanager_V1beta1_AllPoolsResponse>

  func makeSpotPriceCall(
    _ request: Osmosis_Poolmanager_V1beta1_SpotPriceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_SpotPriceRequest, Osmosis_Poolmanager_V1beta1_SpotPriceResponse>

  func makeTotalPoolLiquidityCall(
    _ request: Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest, Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Poolmanager_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Poolmanager_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Osmosis_Poolmanager_V1beta1_ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_ParamsRequest, Osmosis_Poolmanager_V1beta1_ParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeEstimateSwapExactAmountInCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? []
    )
  }

  internal func makeEstimateSinglePoolSwapExactAmountInCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountInInterceptors() ?? []
    )
  }

  internal func makeEstimateSwapExactAmountOutCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? []
    )
  }

  internal func makeEstimateSinglePoolSwapExactAmountOutCall(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountOutInterceptors() ?? []
    )
  }

  internal func makeNumPoolsCall(
    _ request: Osmosis_Poolmanager_V1beta1_NumPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_NumPoolsRequest, Osmosis_Poolmanager_V1beta1_NumPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.numPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? []
    )
  }

  internal func makePoolCall(
    _ request: Osmosis_Poolmanager_V1beta1_PoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_PoolRequest, Osmosis_Poolmanager_V1beta1_PoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func makeAllPoolsCall(
    _ request: Osmosis_Poolmanager_V1beta1_AllPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_AllPoolsRequest, Osmosis_Poolmanager_V1beta1_AllPoolsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.allPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllPoolsInterceptors() ?? []
    )
  }

  internal func makeSpotPriceCall(
    _ request: Osmosis_Poolmanager_V1beta1_SpotPriceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_SpotPriceRequest, Osmosis_Poolmanager_V1beta1_SpotPriceResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.spotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? []
    )
  }

  internal func makeTotalPoolLiquidityCall(
    _ request: Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest, Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Poolmanager_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Osmosis_Poolmanager_V1beta1_ParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_ParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func estimateSwapExactAmountIn(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? []
    )
  }

  internal func estimateSinglePoolSwapExactAmountIn(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountIn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountInInterceptors() ?? []
    )
  }

  internal func estimateSwapExactAmountOut(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? []
    )
  }

  internal func estimateSinglePoolSwapExactAmountOut(
    _ request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountOut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountOutInterceptors() ?? []
    )
  }

  internal func numPools(
    _ request: Osmosis_Poolmanager_V1beta1_NumPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_NumPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.numPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? []
    )
  }

  internal func pool(
    _ request: Osmosis_Poolmanager_V1beta1_PoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_PoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func allPools(
    _ request: Osmosis_Poolmanager_V1beta1_AllPoolsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_AllPoolsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.allPools.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllPoolsInterceptors() ?? []
    )
  }

  internal func spotPrice(
    _ request: Osmosis_Poolmanager_V1beta1_SpotPriceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_SpotPriceResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.spotPrice.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? []
    )
  }

  internal func totalPoolLiquidity(
    _ request: Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Poolmanager_V1beta1_QueryAsyncClient: Osmosis_Poolmanager_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Poolmanager_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_ParamsRequest, Osmosis_Poolmanager_V1beta1_ParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSwapExactAmountIn'.
  func makeEstimateSwapExactAmountInInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSinglePoolSwapExactAmountIn'.
  func makeEstimateSinglePoolSwapExactAmountInInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSwapExactAmountOut'.
  func makeEstimateSwapExactAmountOutInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSinglePoolSwapExactAmountOut'.
  func makeEstimateSinglePoolSwapExactAmountOutInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>]

  /// - Returns: Interceptors to use when invoking 'numPools'.
  func makeNumPoolsInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_NumPoolsRequest, Osmosis_Poolmanager_V1beta1_NumPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_PoolRequest, Osmosis_Poolmanager_V1beta1_PoolResponse>]

  /// - Returns: Interceptors to use when invoking 'allPools'.
  func makeAllPoolsInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_AllPoolsRequest, Osmosis_Poolmanager_V1beta1_AllPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'spotPrice'.
  func makeSpotPriceInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_SpotPriceRequest, Osmosis_Poolmanager_V1beta1_SpotPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'totalPoolLiquidity'.
  func makeTotalPoolLiquidityInterceptors() -> [ClientInterceptor<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest, Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse>]
}

internal enum Osmosis_Poolmanager_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.poolmanager.v1beta1.Query",
    methods: [
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.params,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountIn,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountIn,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSwapExactAmountOut,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.estimateSinglePoolSwapExactAmountOut,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.numPools,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.pool,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.allPools,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.spotPrice,
      Osmosis_Poolmanager_V1beta1_QueryClientMetadata.Methods.totalPoolLiquidity,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.poolmanager.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let estimateSwapExactAmountIn = GRPCMethodDescriptor(
      name: "EstimateSwapExactAmountIn",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountIn",
      type: GRPCCallType.unary
    )

    internal static let estimateSinglePoolSwapExactAmountIn = GRPCMethodDescriptor(
      name: "EstimateSinglePoolSwapExactAmountIn",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountIn",
      type: GRPCCallType.unary
    )

    internal static let estimateSwapExactAmountOut = GRPCMethodDescriptor(
      name: "EstimateSwapExactAmountOut",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountOut",
      type: GRPCCallType.unary
    )

    internal static let estimateSinglePoolSwapExactAmountOut = GRPCMethodDescriptor(
      name: "EstimateSinglePoolSwapExactAmountOut",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountOut",
      type: GRPCCallType.unary
    )

    internal static let numPools = GRPCMethodDescriptor(
      name: "NumPools",
      path: "/osmosis.poolmanager.v1beta1.Query/NumPools",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/osmosis.poolmanager.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let allPools = GRPCMethodDescriptor(
      name: "AllPools",
      path: "/osmosis.poolmanager.v1beta1.Query/AllPools",
      type: GRPCCallType.unary
    )

    internal static let spotPrice = GRPCMethodDescriptor(
      name: "SpotPrice",
      path: "/osmosis.poolmanager.v1beta1.Query/SpotPrice",
      type: GRPCCallType.unary
    )

    internal static let totalPoolLiquidity = GRPCMethodDescriptor(
      name: "TotalPoolLiquidity",
      path: "/osmosis.poolmanager.v1beta1.Query/TotalPoolLiquidity",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Poolmanager_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Poolmanager_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  func params(request: Osmosis_Poolmanager_V1beta1_ParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_ParamsResponse>

  /// Estimates swap amount out given in.
  func estimateSwapExactAmountIn(request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>

  func estimateSinglePoolSwapExactAmountIn(request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>

  /// Estimates swap amount in given out.
  func estimateSwapExactAmountOut(request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>

  func estimateSinglePoolSwapExactAmountOut(request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>

  /// Returns the total number of pools existing in Osmosis.
  func numPools(request: Osmosis_Poolmanager_V1beta1_NumPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_NumPoolsResponse>

  /// Pool returns the Pool specified by the pool id
  func pool(request: Osmosis_Poolmanager_V1beta1_PoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_PoolResponse>

  /// AllPools returns all pools on the Osmosis chain sorted by IDs.
  func allPools(request: Osmosis_Poolmanager_V1beta1_AllPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_AllPoolsResponse>

  /// SpotPrice defines a gRPC query handler that returns the spot price given
  /// a base denomination and a quote denomination.
  func spotPrice(request: Osmosis_Poolmanager_V1beta1_SpotPriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_SpotPriceResponse>

  func totalPoolLiquidity(request: Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse>
}

extension Osmosis_Poolmanager_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Osmosis_Poolmanager_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_ParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "EstimateSwapExactAmountIn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>(),
        interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? [],
        userFunction: self.estimateSwapExactAmountIn(request:context:)
      )

    case "EstimateSinglePoolSwapExactAmountIn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>(),
        interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountInInterceptors() ?? [],
        userFunction: self.estimateSinglePoolSwapExactAmountIn(request:context:)
      )

    case "EstimateSwapExactAmountOut":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>(),
        interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? [],
        userFunction: self.estimateSwapExactAmountOut(request:context:)
      )

    case "EstimateSinglePoolSwapExactAmountOut":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>(),
        interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountOutInterceptors() ?? [],
        userFunction: self.estimateSinglePoolSwapExactAmountOut(request:context:)
      )

    case "NumPools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_NumPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_NumPoolsResponse>(),
        interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? [],
        userFunction: self.numPools(request:context:)
      )

    case "Pool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_PoolRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_PoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        userFunction: self.pool(request:context:)
      )

    case "AllPools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_AllPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_AllPoolsResponse>(),
        interceptors: self.interceptors?.makeAllPoolsInterceptors() ?? [],
        userFunction: self.allPools(request:context:)
      )

    case "SpotPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_SpotPriceRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_SpotPriceResponse>(),
        interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? [],
        userFunction: self.spotPrice(request:context:)
      )

    case "TotalPoolLiquidity":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse>(),
        interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? [],
        userFunction: self.totalPoolLiquidity(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Poolmanager_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Poolmanager_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  @Sendable func params(
    request: Osmosis_Poolmanager_V1beta1_ParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_ParamsResponse

  /// Estimates swap amount out given in.
  @Sendable func estimateSwapExactAmountIn(
    request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse

  @Sendable func estimateSinglePoolSwapExactAmountIn(
    request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse

  /// Estimates swap amount in given out.
  @Sendable func estimateSwapExactAmountOut(
    request: Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse

  @Sendable func estimateSinglePoolSwapExactAmountOut(
    request: Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse

  /// Returns the total number of pools existing in Osmosis.
  @Sendable func numPools(
    request: Osmosis_Poolmanager_V1beta1_NumPoolsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_NumPoolsResponse

  /// Pool returns the Pool specified by the pool id
  @Sendable func pool(
    request: Osmosis_Poolmanager_V1beta1_PoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_PoolResponse

  /// AllPools returns all pools on the Osmosis chain sorted by IDs.
  @Sendable func allPools(
    request: Osmosis_Poolmanager_V1beta1_AllPoolsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_AllPoolsResponse

  /// SpotPrice defines a gRPC query handler that returns the spot price given
  /// a base denomination and a quote denomination.
  @Sendable func spotPrice(
    request: Osmosis_Poolmanager_V1beta1_SpotPriceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_SpotPriceResponse

  @Sendable func totalPoolLiquidity(
    request: Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Poolmanager_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Poolmanager_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Poolmanager_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Poolmanager_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_ParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "EstimateSwapExactAmountIn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>(),
        interceptors: self.interceptors?.makeEstimateSwapExactAmountInInterceptors() ?? [],
        wrapping: self.estimateSwapExactAmountIn(request:context:)
      )

    case "EstimateSinglePoolSwapExactAmountIn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>(),
        interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountInInterceptors() ?? [],
        wrapping: self.estimateSinglePoolSwapExactAmountIn(request:context:)
      )

    case "EstimateSwapExactAmountOut":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>(),
        interceptors: self.interceptors?.makeEstimateSwapExactAmountOutInterceptors() ?? [],
        wrapping: self.estimateSwapExactAmountOut(request:context:)
      )

    case "EstimateSinglePoolSwapExactAmountOut":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>(),
        interceptors: self.interceptors?.makeEstimateSinglePoolSwapExactAmountOutInterceptors() ?? [],
        wrapping: self.estimateSinglePoolSwapExactAmountOut(request:context:)
      )

    case "NumPools":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_NumPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_NumPoolsResponse>(),
        interceptors: self.interceptors?.makeNumPoolsInterceptors() ?? [],
        wrapping: self.numPools(request:context:)
      )

    case "Pool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_PoolRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_PoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        wrapping: self.pool(request:context:)
      )

    case "AllPools":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_AllPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_AllPoolsResponse>(),
        interceptors: self.interceptors?.makeAllPoolsInterceptors() ?? [],
        wrapping: self.allPools(request:context:)
      )

    case "SpotPrice":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_SpotPriceRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_SpotPriceResponse>(),
        interceptors: self.interceptors?.makeSpotPriceInterceptors() ?? [],
        wrapping: self.spotPrice(request:context:)
      )

    case "TotalPoolLiquidity":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse>(),
        interceptors: self.interceptors?.makeTotalPoolLiquidityInterceptors() ?? [],
        wrapping: self.totalPoolLiquidity(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Poolmanager_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_ParamsRequest, Osmosis_Poolmanager_V1beta1_ParamsResponse>]

  /// - Returns: Interceptors to use when handling 'estimateSwapExactAmountIn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateSwapExactAmountInInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>]

  /// - Returns: Interceptors to use when handling 'estimateSinglePoolSwapExactAmountIn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateSinglePoolSwapExactAmountInInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountInRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountInResponse>]

  /// - Returns: Interceptors to use when handling 'estimateSwapExactAmountOut'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateSwapExactAmountOutInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>]

  /// - Returns: Interceptors to use when handling 'estimateSinglePoolSwapExactAmountOut'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateSinglePoolSwapExactAmountOutInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_EstimateSinglePoolSwapExactAmountOutRequest, Osmosis_Poolmanager_V1beta1_EstimateSwapExactAmountOutResponse>]

  /// - Returns: Interceptors to use when handling 'numPools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNumPoolsInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_NumPoolsRequest, Osmosis_Poolmanager_V1beta1_NumPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'pool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_PoolRequest, Osmosis_Poolmanager_V1beta1_PoolResponse>]

  /// - Returns: Interceptors to use when handling 'allPools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllPoolsInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_AllPoolsRequest, Osmosis_Poolmanager_V1beta1_AllPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'spotPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotPriceInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_SpotPriceRequest, Osmosis_Poolmanager_V1beta1_SpotPriceResponse>]

  /// - Returns: Interceptors to use when handling 'totalPoolLiquidity'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalPoolLiquidityInterceptors() -> [ServerInterceptor<Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityRequest, Osmosis_Poolmanager_V1beta1_TotalPoolLiquidityResponse>]
}

internal enum Osmosis_Poolmanager_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.poolmanager.v1beta1.Query",
    methods: [
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.params,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.estimateSwapExactAmountIn,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.estimateSinglePoolSwapExactAmountIn,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.estimateSwapExactAmountOut,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.estimateSinglePoolSwapExactAmountOut,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.numPools,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.pool,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.allPools,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.spotPrice,
      Osmosis_Poolmanager_V1beta1_QueryServerMetadata.Methods.totalPoolLiquidity,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.poolmanager.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let estimateSwapExactAmountIn = GRPCMethodDescriptor(
      name: "EstimateSwapExactAmountIn",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountIn",
      type: GRPCCallType.unary
    )

    internal static let estimateSinglePoolSwapExactAmountIn = GRPCMethodDescriptor(
      name: "EstimateSinglePoolSwapExactAmountIn",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountIn",
      type: GRPCCallType.unary
    )

    internal static let estimateSwapExactAmountOut = GRPCMethodDescriptor(
      name: "EstimateSwapExactAmountOut",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountOut",
      type: GRPCCallType.unary
    )

    internal static let estimateSinglePoolSwapExactAmountOut = GRPCMethodDescriptor(
      name: "EstimateSinglePoolSwapExactAmountOut",
      path: "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountOut",
      type: GRPCCallType.unary
    )

    internal static let numPools = GRPCMethodDescriptor(
      name: "NumPools",
      path: "/osmosis.poolmanager.v1beta1.Query/NumPools",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/osmosis.poolmanager.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let allPools = GRPCMethodDescriptor(
      name: "AllPools",
      path: "/osmosis.poolmanager.v1beta1.Query/AllPools",
      type: GRPCCallType.unary
    )

    internal static let spotPrice = GRPCMethodDescriptor(
      name: "SpotPrice",
      path: "/osmosis.poolmanager.v1beta1.Query/SpotPrice",
      type: GRPCCallType.unary
    )

    internal static let totalPoolLiquidity = GRPCMethodDescriptor(
      name: "TotalPoolLiquidity",
      path: "/osmosis.poolmanager.v1beta1.Query/TotalPoolLiquidity",
      type: GRPCCallType.unary
    )
  }
}
