// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/poolmanager/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== MsgSwapExactAmountIn
struct Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var routes: [Osmosis_Poolmanager_V1beta1_SwapAmountInRoute] = []

  var tokenIn: Cosmos_Base_V1beta1_Coin {
    get {return _tokenIn ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenIn = newValue}
  }
  /// Returns true if `tokenIn` has been explicitly set.
  var hasTokenIn: Bool {return self._tokenIn != nil}
  /// Clears the value of `tokenIn`. Subsequent reads from it will return its default value.
  mutating func clearTokenIn() {self._tokenIn = nil}

  var tokenOutMinAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenIn: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountInResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokenOutAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgSplitRouteSwapExactAmountIn
struct Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var routes: [Osmosis_Poolmanager_V1beta1_SwapAmountInSplitRoute] = []

  var tokenInDenom: String = String()

  var tokenOutMinAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountInResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokenOutAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgSwapExactAmountOut
struct Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var routes: [Osmosis_Poolmanager_V1beta1_SwapAmountOutRoute] = []

  var tokenInMaxAmount: String = String()

  var tokenOut: Cosmos_Base_V1beta1_Coin {
    get {return _tokenOut ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenOut = newValue}
  }
  /// Returns true if `tokenOut` has been explicitly set.
  var hasTokenOut: Bool {return self._tokenOut != nil}
  /// Clears the value of `tokenOut`. Subsequent reads from it will return its default value.
  mutating func clearTokenOut() {self._tokenOut = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenOut: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokenInAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgSplitRouteSwapExactAmountOut
struct Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var routes: [Osmosis_Poolmanager_V1beta1_SwapAmountOutSplitRoute] = []

  var tokenOutDenom: String = String()

  var tokenInMaxAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokenInAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountIn: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountInResponse: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountIn: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountInResponse: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOut: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOutResponse: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOut: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOutResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.poolmanager.v1beta1"

extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountIn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "routes"),
    3: .standard(proto: "token_in"),
    4: .standard(proto: "token_out_min_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.routes) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tokenIn) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenOutMinAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 2)
    }
    try { if let v = self._tokenIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.tokenOutMinAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutMinAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountIn, rhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountIn) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs._tokenIn != rhs._tokenIn {return false}
    if lhs.tokenOutMinAmount != rhs.tokenOutMinAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountInResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountInResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_out_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenOutAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenOutAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutAmount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountInResponse, rhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountInResponse) -> Bool {
    if lhs.tokenOutAmount != rhs.tokenOutAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSplitRouteSwapExactAmountIn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "routes"),
    3: .standard(proto: "token_in_denom"),
    4: .standard(proto: "token_out_min_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.routes) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenInDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenOutMinAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 2)
    }
    if !self.tokenInDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInDenom, fieldNumber: 3)
    }
    if !self.tokenOutMinAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutMinAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountIn, rhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountIn) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs.tokenInDenom != rhs.tokenInDenom {return false}
    if lhs.tokenOutMinAmount != rhs.tokenOutMinAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountInResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSplitRouteSwapExactAmountInResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_out_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenOutAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenOutAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutAmount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountInResponse, rhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountInResponse) -> Bool {
    if lhs.tokenOutAmount != rhs.tokenOutAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "routes"),
    3: .standard(proto: "token_in_max_amount"),
    4: .standard(proto: "token_out"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.routes) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenInMaxAmount) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._tokenOut) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 2)
    }
    if !self.tokenInMaxAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInMaxAmount, fieldNumber: 3)
    }
    try { if let v = self._tokenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOut, rhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOut) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs.tokenInMaxAmount != rhs.tokenInMaxAmount {return false}
    if lhs._tokenOut != rhs._tokenOut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactAmountOutResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_in_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenInAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenInAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInAmount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOutResponse, rhs: Osmosis_Poolmanager_V1beta1_MsgSwapExactAmountOutResponse) -> Bool {
    if lhs.tokenInAmount != rhs.tokenInAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSplitRouteSwapExactAmountOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "routes"),
    3: .standard(proto: "token_out_denom"),
    4: .standard(proto: "token_in_max_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.routes) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenOutDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenInMaxAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.routes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.routes, fieldNumber: 2)
    }
    if !self.tokenOutDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutDenom, fieldNumber: 3)
    }
    if !self.tokenInMaxAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInMaxAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOut, rhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOut) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.routes != rhs.routes {return false}
    if lhs.tokenOutDenom != rhs.tokenOutDenom {return false}
    if lhs.tokenInMaxAmount != rhs.tokenInMaxAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSplitRouteSwapExactAmountOutResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_in_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenInAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenInAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInAmount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOutResponse, rhs: Osmosis_Poolmanager_V1beta1_MsgSplitRouteSwapExactAmountOutResponse) -> Bool {
    if lhs.tokenInAmount != rhs.tokenInAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
