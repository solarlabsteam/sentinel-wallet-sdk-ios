// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/poolmanager/v1beta1/module_route.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// PoolType is an enumeration of all supported pool types.
enum Osmosis_Poolmanager_V1beta1_PoolType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Balancer is the standard xy=k curve. Its pool model is defined in x/gamm.
  case balancer // = 0

  /// Stableswap is the Solidly cfmm stable swap curve. Its pool model is defined
  /// in x/gamm.
  case stableswap // = 1

  /// Concentrated is the pool model specific to concentrated liquidity. It is
  /// defined in x/concentrated-liquidity.
  case concentrated // = 2

  /// CosmWasm is the pool model specific to CosmWasm. It is defined in
  /// x/cosmwasmpool.
  case cosmWasm // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .balancer
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .balancer
    case 1: self = .stableswap
    case 2: self = .concentrated
    case 3: self = .cosmWasm
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .balancer: return 0
    case .stableswap: return 1
    case .concentrated: return 2
    case .cosmWasm: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Osmosis_Poolmanager_V1beta1_PoolType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Osmosis_Poolmanager_V1beta1_PoolType] = [
    .balancer,
    .stableswap,
    .concentrated,
    .cosmWasm,
  ]
}

#endif  // swift(>=4.2)

/// ModuleRouter defines a route encapsulating pool type.
/// It is used as the value of a mapping from pool id to the pool type,
/// allowing the pool manager to know which module to route swaps to given the
/// pool id.
struct Osmosis_Poolmanager_V1beta1_ModuleRoute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_type specifies the type of the pool
  var poolType: Osmosis_Poolmanager_V1beta1_PoolType = .balancer

  var poolID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Poolmanager_V1beta1_PoolType: @unchecked Sendable {}
extension Osmosis_Poolmanager_V1beta1_ModuleRoute: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.poolmanager.v1beta1"

extension Osmosis_Poolmanager_V1beta1_PoolType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Balancer"),
    1: .same(proto: "Stableswap"),
    2: .same(proto: "Concentrated"),
    3: .same(proto: "CosmWasm"),
  ]
}

extension Osmosis_Poolmanager_V1beta1_ModuleRoute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleRoute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_type"),
    2: .standard(proto: "pool_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.poolType) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolType != .balancer {
      try visitor.visitSingularEnumField(value: self.poolType, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Poolmanager_V1beta1_ModuleRoute, rhs: Osmosis_Poolmanager_V1beta1_ModuleRoute) -> Bool {
    if lhs.poolType != rhs.poolType {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
