//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/superfluid/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Osmosis_Superfluid_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Superfluid_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>

  func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>

  func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>

  func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>

  func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>

  func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>

  func totalDelegationByValidatorForDenom(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest, Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse>

  func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>

  func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>

  func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>

  func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>

  func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>

  func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>

  func totalDelegationByDelegator(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>

  func unpoolWhitelist(
    _ request: Osmosis_Superfluid_QueryUnpoolWhitelistRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_QueryUnpoolWhitelistRequest, Osmosis_Superfluid_QueryUnpoolWhitelistResponse>
}

extension Osmosis_Superfluid_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.superfluid.Query"
  }

  /// Params returns the total set of superfluid parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Returns superfluid asset type, whether if it's a native asset or an lp
  /// share.
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? []
    )
  }

  /// Returns all registered superfluid assets.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllAssets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? []
    )
  }

  /// Returns the osmo equivalent multiplier used in the most recent epoch.
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetMultiplier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? []
    )
  }

  /// Returns all superfluid intermediary accounts.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllIntermediaryAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? []
    )
  }

  /// Returns intermediary account connected to a superfluid staked lock by id
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectedIntermediaryAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? []
    )
  }

  /// Returns the amount of delegations of specific denom for all validators
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalDelegationByValidatorForDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalDelegationByValidatorForDenom(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest, Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByValidatorForDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByValidatorForDenomInterceptors() ?? []
    )
  }

  /// Returns the total amount of osmo superfluidly staked.
  /// Response is denominated in uosmo.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalSuperfluidDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? []
    )
  }

  /// Returns the coins superfluid delegated for the delegator, validator, denom
  /// triplet
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationAmount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? []
    )
  }

  /// Returns all the delegated superfluid poistions for a specific delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationsByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? []
    )
  }

  /// Returns all the undelegating superfluid poistions for a specific delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidUndelegationsByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? []
    )
  }

  /// Returns all the superfluid positions of a specific denom delegated to one
  /// validator
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationsByValidatorDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? []
    )
  }

  /// Returns the amount of a specific denom delegated to a specific validator
  /// This is labeled an estimate, because the way it calculates the amount can
  /// lead rounding errors from the true delegated amount
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSuperfluidDelegatedAmountByValidatorDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? []
    )
  }

  /// Returns the specified delegations for a specific delegator
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalDelegationByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalDelegationByDelegator(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? []
    )
  }

  /// Returns a list of whitelisted pool ids to unpool.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnpoolWhitelist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unpoolWhitelist(
    _ request: Osmosis_Superfluid_QueryUnpoolWhitelistRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_QueryUnpoolWhitelistRequest, Osmosis_Superfluid_QueryUnpoolWhitelistResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.unpoolWhitelist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnpoolWhitelistInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Osmosis_Superfluid_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Superfluid_QueryNIOClient")
internal final class Osmosis_Superfluid_QueryClient: Osmosis_Superfluid_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.superfluid.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Superfluid_QueryNIOClient: Osmosis_Superfluid_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.superfluid.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Superfluid_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>

  func makeAssetTypeCall(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>

  func makeAllAssetsCall(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>

  func makeAssetMultiplierCall(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>

  func makeAllIntermediaryAccountsCall(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>

  func makeConnectedIntermediaryAccountCall(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>

  func makeTotalDelegationByValidatorForDenomCall(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest, Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse>

  func makeTotalSuperfluidDelegationsCall(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>

  func makeSuperfluidDelegationAmountCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>

  func makeSuperfluidDelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>

  func makeSuperfluidUndelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>

  func makeSuperfluidDelegationsByValidatorDenomCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>

  func makeEstimateSuperfluidDelegatedAmountByValidatorDenomCall(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>

  func makeTotalDelegationByDelegatorCall(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>

  func makeUnpoolWhitelistCall(
    _ request: Osmosis_Superfluid_QueryUnpoolWhitelistRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryUnpoolWhitelistRequest, Osmosis_Superfluid_QueryUnpoolWhitelistResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Superfluid_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeAssetTypeCall(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? []
    )
  }

  internal func makeAllAssetsCall(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? []
    )
  }

  internal func makeAssetMultiplierCall(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? []
    )
  }

  internal func makeAllIntermediaryAccountsCall(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? []
    )
  }

  internal func makeConnectedIntermediaryAccountCall(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? []
    )
  }

  internal func makeTotalDelegationByValidatorForDenomCall(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest, Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByValidatorForDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByValidatorForDenomInterceptors() ?? []
    )
  }

  internal func makeTotalSuperfluidDelegationsCall(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? []
    )
  }

  internal func makeSuperfluidDelegationAmountCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? []
    )
  }

  internal func makeSuperfluidDelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? []
    )
  }

  internal func makeSuperfluidUndelegationsByDelegatorCall(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? []
    )
  }

  internal func makeSuperfluidDelegationsByValidatorDenomCall(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? []
    )
  }

  internal func makeEstimateSuperfluidDelegatedAmountByValidatorDenomCall(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? []
    )
  }

  internal func makeTotalDelegationByDelegatorCall(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? []
    )
  }

  internal func makeUnpoolWhitelistCall(
    _ request: Osmosis_Superfluid_QueryUnpoolWhitelistRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_QueryUnpoolWhitelistRequest, Osmosis_Superfluid_QueryUnpoolWhitelistResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.unpoolWhitelist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnpoolWhitelistInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_QueryAsyncClientProtocol {
  internal func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AssetTypeResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? []
    )
  }

  internal func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AllAssetsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? []
    )
  }

  internal func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AssetMultiplierResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? []
    )
  }

  internal func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_AllIntermediaryAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? []
    )
  }

  internal func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_ConnectedIntermediaryAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? []
    )
  }

  internal func totalDelegationByValidatorForDenom(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByValidatorForDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByValidatorForDenomInterceptors() ?? []
    )
  }

  internal func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_TotalSuperfluidDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? []
    )
  }

  internal func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationAmountResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? []
    )
  }

  internal func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? []
    )
  }

  internal func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? []
    )
  }

  internal func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? []
    )
  }

  internal func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? []
    )
  }

  internal func totalDelegationByDelegator(
    _ request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? []
    )
  }

  internal func unpoolWhitelist(
    _ request: Osmosis_Superfluid_QueryUnpoolWhitelistRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_QueryUnpoolWhitelistResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_QueryClientMetadata.Methods.unpoolWhitelist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnpoolWhitelistInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Superfluid_QueryAsyncClient: Osmosis_Superfluid_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'assetType'.
  func makeAssetTypeInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>]

  /// - Returns: Interceptors to use when invoking 'allAssets'.
  func makeAllAssetsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>]

  /// - Returns: Interceptors to use when invoking 'assetMultiplier'.
  func makeAssetMultiplierInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>]

  /// - Returns: Interceptors to use when invoking 'allIntermediaryAccounts'.
  func makeAllIntermediaryAccountsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'connectedIntermediaryAccount'.
  func makeConnectedIntermediaryAccountInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'totalDelegationByValidatorForDenom'.
  func makeTotalDelegationByValidatorForDenomInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest, Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'totalSuperfluidDelegations'.
  func makeTotalSuperfluidDelegationsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationAmount'.
  func makeSuperfluidDelegationAmountInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationsByDelegator'.
  func makeSuperfluidDelegationsByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidUndelegationsByDelegator'.
  func makeSuperfluidUndelegationsByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationsByValidatorDenom'.
  func makeSuperfluidDelegationsByValidatorDenomInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSuperfluidDelegatedAmountByValidatorDenom'.
  func makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'totalDelegationByDelegator'.
  func makeTotalDelegationByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'unpoolWhitelist'.
  func makeUnpoolWhitelistInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_QueryUnpoolWhitelistRequest, Osmosis_Superfluid_QueryUnpoolWhitelistResponse>]
}

internal enum Osmosis_Superfluid_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.superfluid.Query",
    methods: [
      Osmosis_Superfluid_QueryClientMetadata.Methods.params,
      Osmosis_Superfluid_QueryClientMetadata.Methods.assetType,
      Osmosis_Superfluid_QueryClientMetadata.Methods.allAssets,
      Osmosis_Superfluid_QueryClientMetadata.Methods.assetMultiplier,
      Osmosis_Superfluid_QueryClientMetadata.Methods.allIntermediaryAccounts,
      Osmosis_Superfluid_QueryClientMetadata.Methods.connectedIntermediaryAccount,
      Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByValidatorForDenom,
      Osmosis_Superfluid_QueryClientMetadata.Methods.totalSuperfluidDelegations,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationAmount,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByDelegator,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidUndelegationsByDelegator,
      Osmosis_Superfluid_QueryClientMetadata.Methods.superfluidDelegationsByValidatorDenom,
      Osmosis_Superfluid_QueryClientMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom,
      Osmosis_Superfluid_QueryClientMetadata.Methods.totalDelegationByDelegator,
      Osmosis_Superfluid_QueryClientMetadata.Methods.unpoolWhitelist,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.superfluid.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let assetType = GRPCMethodDescriptor(
      name: "AssetType",
      path: "/osmosis.superfluid.Query/AssetType",
      type: GRPCCallType.unary
    )

    internal static let allAssets = GRPCMethodDescriptor(
      name: "AllAssets",
      path: "/osmosis.superfluid.Query/AllAssets",
      type: GRPCCallType.unary
    )

    internal static let assetMultiplier = GRPCMethodDescriptor(
      name: "AssetMultiplier",
      path: "/osmosis.superfluid.Query/AssetMultiplier",
      type: GRPCCallType.unary
    )

    internal static let allIntermediaryAccounts = GRPCMethodDescriptor(
      name: "AllIntermediaryAccounts",
      path: "/osmosis.superfluid.Query/AllIntermediaryAccounts",
      type: GRPCCallType.unary
    )

    internal static let connectedIntermediaryAccount = GRPCMethodDescriptor(
      name: "ConnectedIntermediaryAccount",
      path: "/osmosis.superfluid.Query/ConnectedIntermediaryAccount",
      type: GRPCCallType.unary
    )

    internal static let totalDelegationByValidatorForDenom = GRPCMethodDescriptor(
      name: "TotalDelegationByValidatorForDenom",
      path: "/osmosis.superfluid.Query/TotalDelegationByValidatorForDenom",
      type: GRPCCallType.unary
    )

    internal static let totalSuperfluidDelegations = GRPCMethodDescriptor(
      name: "TotalSuperfluidDelegations",
      path: "/osmosis.superfluid.Query/TotalSuperfluidDelegations",
      type: GRPCCallType.unary
    )

    internal static let superfluidDelegationAmount = GRPCMethodDescriptor(
      name: "SuperfluidDelegationAmount",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationAmount",
      type: GRPCCallType.unary
    )

    internal static let superfluidDelegationsByDelegator = GRPCMethodDescriptor(
      name: "SuperfluidDelegationsByDelegator",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByDelegator",
      type: GRPCCallType.unary
    )

    internal static let superfluidUndelegationsByDelegator = GRPCMethodDescriptor(
      name: "SuperfluidUndelegationsByDelegator",
      path: "/osmosis.superfluid.Query/SuperfluidUndelegationsByDelegator",
      type: GRPCCallType.unary
    )

    internal static let superfluidDelegationsByValidatorDenom = GRPCMethodDescriptor(
      name: "SuperfluidDelegationsByValidatorDenom",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByValidatorDenom",
      type: GRPCCallType.unary
    )

    internal static let estimateSuperfluidDelegatedAmountByValidatorDenom = GRPCMethodDescriptor(
      name: "EstimateSuperfluidDelegatedAmountByValidatorDenom",
      path: "/osmosis.superfluid.Query/EstimateSuperfluidDelegatedAmountByValidatorDenom",
      type: GRPCCallType.unary
    )

    internal static let totalDelegationByDelegator = GRPCMethodDescriptor(
      name: "TotalDelegationByDelegator",
      path: "/osmosis.superfluid.Query/TotalDelegationByDelegator",
      type: GRPCCallType.unary
    )

    internal static let unpoolWhitelist = GRPCMethodDescriptor(
      name: "UnpoolWhitelist",
      path: "/osmosis.superfluid.Query/UnpoolWhitelist",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Superfluid_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Superfluid_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns the total set of superfluid parameters.
  func params(request: Osmosis_Superfluid_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_QueryParamsResponse>

  /// Returns superfluid asset type, whether if it's a native asset or an lp
  /// share.
  func assetType(request: Osmosis_Superfluid_AssetTypeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AssetTypeResponse>

  /// Returns all registered superfluid assets.
  func allAssets(request: Osmosis_Superfluid_AllAssetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AllAssetsResponse>

  /// Returns the osmo equivalent multiplier used in the most recent epoch.
  func assetMultiplier(request: Osmosis_Superfluid_AssetMultiplierRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AssetMultiplierResponse>

  /// Returns all superfluid intermediary accounts.
  func allIntermediaryAccounts(request: Osmosis_Superfluid_AllIntermediaryAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AllIntermediaryAccountsResponse>

  /// Returns intermediary account connected to a superfluid staked lock by id
  func connectedIntermediaryAccount(request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>

  /// Returns the amount of delegations of specific denom for all validators
  func totalDelegationByValidatorForDenom(request: Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse>

  /// Returns the total amount of osmo superfluidly staked.
  /// Response is denominated in uosmo.
  func totalSuperfluidDelegations(request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>

  /// Returns the coins superfluid delegated for the delegator, validator, denom
  /// triplet
  func superfluidDelegationAmount(request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidDelegationAmountResponse>

  /// Returns all the delegated superfluid poistions for a specific delegator.
  func superfluidDelegationsByDelegator(request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>

  /// Returns all the undelegating superfluid poistions for a specific delegator.
  func superfluidUndelegationsByDelegator(request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>

  /// Returns all the superfluid positions of a specific denom delegated to one
  /// validator
  func superfluidDelegationsByValidatorDenom(request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>

  /// Returns the amount of a specific denom delegated to a specific validator
  /// This is labeled an estimate, because the way it calculates the amount can
  /// lead rounding errors from the true delegated amount
  func estimateSuperfluidDelegatedAmountByValidatorDenom(request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>

  /// Returns the specified delegations for a specific delegator
  func totalDelegationByDelegator(request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>

  /// Returns a list of whitelisted pool ids to unpool.
  func unpoolWhitelist(request: Osmosis_Superfluid_QueryUnpoolWhitelistRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_QueryUnpoolWhitelistResponse>
}

extension Osmosis_Superfluid_QueryProvider {
  internal var serviceName: Substring {
    return Osmosis_Superfluid_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "AssetType":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AssetTypeRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AssetTypeResponse>(),
        interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? [],
        userFunction: self.assetType(request:context:)
      )

    case "AllAssets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AllAssetsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AllAssetsResponse>(),
        interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? [],
        userFunction: self.allAssets(request:context:)
      )

    case "AssetMultiplier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AssetMultiplierRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AssetMultiplierResponse>(),
        interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? [],
        userFunction: self.assetMultiplier(request:context:)
      )

    case "AllIntermediaryAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AllIntermediaryAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AllIntermediaryAccountsResponse>(),
        interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? [],
        userFunction: self.allIntermediaryAccounts(request:context:)
      )

    case "ConnectedIntermediaryAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>(),
        interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? [],
        userFunction: self.connectedIntermediaryAccount(request:context:)
      )

    case "TotalDelegationByValidatorForDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse>(),
        interceptors: self.interceptors?.makeTotalDelegationByValidatorForDenomInterceptors() ?? [],
        userFunction: self.totalDelegationByValidatorForDenom(request:context:)
      )

    case "TotalSuperfluidDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>(),
        interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? [],
        userFunction: self.totalSuperfluidDelegations(request:context:)
      )

    case "SuperfluidDelegationAmount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationAmountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationAmountResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? [],
        userFunction: self.superfluidDelegationAmount(request:context:)
      )

    case "SuperfluidDelegationsByDelegator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? [],
        userFunction: self.superfluidDelegationsByDelegator(request:context:)
      )

    case "SuperfluidUndelegationsByDelegator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? [],
        userFunction: self.superfluidUndelegationsByDelegator(request:context:)
      )

    case "SuperfluidDelegationsByValidatorDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? [],
        userFunction: self.superfluidDelegationsByValidatorDenom(request:context:)
      )

    case "EstimateSuperfluidDelegatedAmountByValidatorDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>(),
        interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? [],
        userFunction: self.estimateSuperfluidDelegatedAmountByValidatorDenom(request:context:)
      )

    case "TotalDelegationByDelegator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>(),
        interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? [],
        userFunction: self.totalDelegationByDelegator(request:context:)
      )

    case "UnpoolWhitelist":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryUnpoolWhitelistRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryUnpoolWhitelistResponse>(),
        interceptors: self.interceptors?.makeUnpoolWhitelistInterceptors() ?? [],
        userFunction: self.unpoolWhitelist(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Superfluid_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Superfluid_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns the total set of superfluid parameters.
  @Sendable func params(
    request: Osmosis_Superfluid_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_QueryParamsResponse

  /// Returns superfluid asset type, whether if it's a native asset or an lp
  /// share.
  @Sendable func assetType(
    request: Osmosis_Superfluid_AssetTypeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_AssetTypeResponse

  /// Returns all registered superfluid assets.
  @Sendable func allAssets(
    request: Osmosis_Superfluid_AllAssetsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_AllAssetsResponse

  /// Returns the osmo equivalent multiplier used in the most recent epoch.
  @Sendable func assetMultiplier(
    request: Osmosis_Superfluid_AssetMultiplierRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_AssetMultiplierResponse

  /// Returns all superfluid intermediary accounts.
  @Sendable func allIntermediaryAccounts(
    request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_AllIntermediaryAccountsResponse

  /// Returns intermediary account connected to a superfluid staked lock by id
  @Sendable func connectedIntermediaryAccount(
    request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_ConnectedIntermediaryAccountResponse

  /// Returns the amount of delegations of specific denom for all validators
  @Sendable func totalDelegationByValidatorForDenom(
    request: Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse

  /// Returns the total amount of osmo superfluidly staked.
  /// Response is denominated in uosmo.
  @Sendable func totalSuperfluidDelegations(
    request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_TotalSuperfluidDelegationsResponse

  /// Returns the coins superfluid delegated for the delegator, validator, denom
  /// triplet
  @Sendable func superfluidDelegationAmount(
    request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationAmountResponse

  /// Returns all the delegated superfluid poistions for a specific delegator.
  @Sendable func superfluidDelegationsByDelegator(
    request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse

  /// Returns all the undelegating superfluid poistions for a specific delegator.
  @Sendable func superfluidUndelegationsByDelegator(
    request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse

  /// Returns all the superfluid positions of a specific denom delegated to one
  /// validator
  @Sendable func superfluidDelegationsByValidatorDenom(
    request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse

  /// Returns the amount of a specific denom delegated to a specific validator
  /// This is labeled an estimate, because the way it calculates the amount can
  /// lead rounding errors from the true delegated amount
  @Sendable func estimateSuperfluidDelegatedAmountByValidatorDenom(
    request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse

  /// Returns the specified delegations for a specific delegator
  @Sendable func totalDelegationByDelegator(
    request: Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse

  /// Returns a list of whitelisted pool ids to unpool.
  @Sendable func unpoolWhitelist(
    request: Osmosis_Superfluid_QueryUnpoolWhitelistRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_QueryUnpoolWhitelistResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Superfluid_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Superfluid_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Superfluid_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "AssetType":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AssetTypeRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AssetTypeResponse>(),
        interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? [],
        wrapping: self.assetType(request:context:)
      )

    case "AllAssets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AllAssetsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AllAssetsResponse>(),
        interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? [],
        wrapping: self.allAssets(request:context:)
      )

    case "AssetMultiplier":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AssetMultiplierRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AssetMultiplierResponse>(),
        interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? [],
        wrapping: self.assetMultiplier(request:context:)
      )

    case "AllIntermediaryAccounts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AllIntermediaryAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AllIntermediaryAccountsResponse>(),
        interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? [],
        wrapping: self.allIntermediaryAccounts(request:context:)
      )

    case "ConnectedIntermediaryAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>(),
        interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? [],
        wrapping: self.connectedIntermediaryAccount(request:context:)
      )

    case "TotalDelegationByValidatorForDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse>(),
        interceptors: self.interceptors?.makeTotalDelegationByValidatorForDenomInterceptors() ?? [],
        wrapping: self.totalDelegationByValidatorForDenom(request:context:)
      )

    case "TotalSuperfluidDelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>(),
        interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? [],
        wrapping: self.totalSuperfluidDelegations(request:context:)
      )

    case "SuperfluidDelegationAmount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationAmountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationAmountResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? [],
        wrapping: self.superfluidDelegationAmount(request:context:)
      )

    case "SuperfluidDelegationsByDelegator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? [],
        wrapping: self.superfluidDelegationsByDelegator(request:context:)
      )

    case "SuperfluidUndelegationsByDelegator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? [],
        wrapping: self.superfluidUndelegationsByDelegator(request:context:)
      )

    case "SuperfluidDelegationsByValidatorDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? [],
        wrapping: self.superfluidDelegationsByValidatorDenom(request:context:)
      )

    case "EstimateSuperfluidDelegatedAmountByValidatorDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>(),
        interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? [],
        wrapping: self.estimateSuperfluidDelegatedAmountByValidatorDenom(request:context:)
      )

    case "TotalDelegationByDelegator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>(),
        interceptors: self.interceptors?.makeTotalDelegationByDelegatorInterceptors() ?? [],
        wrapping: self.totalDelegationByDelegator(request:context:)
      )

    case "UnpoolWhitelist":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryUnpoolWhitelistRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryUnpoolWhitelistResponse>(),
        interceptors: self.interceptors?.makeUnpoolWhitelistInterceptors() ?? [],
        wrapping: self.unpoolWhitelist(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Superfluid_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'assetType'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetTypeInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>]

  /// - Returns: Interceptors to use when handling 'allAssets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllAssetsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>]

  /// - Returns: Interceptors to use when handling 'assetMultiplier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetMultiplierInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>]

  /// - Returns: Interceptors to use when handling 'allIntermediaryAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllIntermediaryAccountsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'connectedIntermediaryAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectedIntermediaryAccountInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>]

  /// - Returns: Interceptors to use when handling 'totalDelegationByValidatorForDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalDelegationByValidatorForDenomInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomRequest, Osmosis_Superfluid_QueryTotalDelegationByValidatorForDenomResponse>]

  /// - Returns: Interceptors to use when handling 'totalSuperfluidDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalSuperfluidDelegationsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidDelegationAmount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidDelegationAmountInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidDelegationsByDelegator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidDelegationsByDelegatorInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidUndelegationsByDelegator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidUndelegationsByDelegatorInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidDelegationsByValidatorDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidDelegationsByValidatorDenomInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when handling 'estimateSuperfluidDelegatedAmountByValidatorDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when handling 'totalDelegationByDelegator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalDelegationByDelegatorInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_QueryTotalDelegationByDelegatorRequest, Osmosis_Superfluid_QueryTotalDelegationByDelegatorResponse>]

  /// - Returns: Interceptors to use when handling 'unpoolWhitelist'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnpoolWhitelistInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_QueryUnpoolWhitelistRequest, Osmosis_Superfluid_QueryUnpoolWhitelistResponse>]
}

internal enum Osmosis_Superfluid_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.superfluid.Query",
    methods: [
      Osmosis_Superfluid_QueryServerMetadata.Methods.params,
      Osmosis_Superfluid_QueryServerMetadata.Methods.assetType,
      Osmosis_Superfluid_QueryServerMetadata.Methods.allAssets,
      Osmosis_Superfluid_QueryServerMetadata.Methods.assetMultiplier,
      Osmosis_Superfluid_QueryServerMetadata.Methods.allIntermediaryAccounts,
      Osmosis_Superfluid_QueryServerMetadata.Methods.connectedIntermediaryAccount,
      Osmosis_Superfluid_QueryServerMetadata.Methods.totalDelegationByValidatorForDenom,
      Osmosis_Superfluid_QueryServerMetadata.Methods.totalSuperfluidDelegations,
      Osmosis_Superfluid_QueryServerMetadata.Methods.superfluidDelegationAmount,
      Osmosis_Superfluid_QueryServerMetadata.Methods.superfluidDelegationsByDelegator,
      Osmosis_Superfluid_QueryServerMetadata.Methods.superfluidUndelegationsByDelegator,
      Osmosis_Superfluid_QueryServerMetadata.Methods.superfluidDelegationsByValidatorDenom,
      Osmosis_Superfluid_QueryServerMetadata.Methods.estimateSuperfluidDelegatedAmountByValidatorDenom,
      Osmosis_Superfluid_QueryServerMetadata.Methods.totalDelegationByDelegator,
      Osmosis_Superfluid_QueryServerMetadata.Methods.unpoolWhitelist,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.superfluid.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let assetType = GRPCMethodDescriptor(
      name: "AssetType",
      path: "/osmosis.superfluid.Query/AssetType",
      type: GRPCCallType.unary
    )

    internal static let allAssets = GRPCMethodDescriptor(
      name: "AllAssets",
      path: "/osmosis.superfluid.Query/AllAssets",
      type: GRPCCallType.unary
    )

    internal static let assetMultiplier = GRPCMethodDescriptor(
      name: "AssetMultiplier",
      path: "/osmosis.superfluid.Query/AssetMultiplier",
      type: GRPCCallType.unary
    )

    internal static let allIntermediaryAccounts = GRPCMethodDescriptor(
      name: "AllIntermediaryAccounts",
      path: "/osmosis.superfluid.Query/AllIntermediaryAccounts",
      type: GRPCCallType.unary
    )

    internal static let connectedIntermediaryAccount = GRPCMethodDescriptor(
      name: "ConnectedIntermediaryAccount",
      path: "/osmosis.superfluid.Query/ConnectedIntermediaryAccount",
      type: GRPCCallType.unary
    )

    internal static let totalDelegationByValidatorForDenom = GRPCMethodDescriptor(
      name: "TotalDelegationByValidatorForDenom",
      path: "/osmosis.superfluid.Query/TotalDelegationByValidatorForDenom",
      type: GRPCCallType.unary
    )

    internal static let totalSuperfluidDelegations = GRPCMethodDescriptor(
      name: "TotalSuperfluidDelegations",
      path: "/osmosis.superfluid.Query/TotalSuperfluidDelegations",
      type: GRPCCallType.unary
    )

    internal static let superfluidDelegationAmount = GRPCMethodDescriptor(
      name: "SuperfluidDelegationAmount",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationAmount",
      type: GRPCCallType.unary
    )

    internal static let superfluidDelegationsByDelegator = GRPCMethodDescriptor(
      name: "SuperfluidDelegationsByDelegator",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByDelegator",
      type: GRPCCallType.unary
    )

    internal static let superfluidUndelegationsByDelegator = GRPCMethodDescriptor(
      name: "SuperfluidUndelegationsByDelegator",
      path: "/osmosis.superfluid.Query/SuperfluidUndelegationsByDelegator",
      type: GRPCCallType.unary
    )

    internal static let superfluidDelegationsByValidatorDenom = GRPCMethodDescriptor(
      name: "SuperfluidDelegationsByValidatorDenom",
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByValidatorDenom",
      type: GRPCCallType.unary
    )

    internal static let estimateSuperfluidDelegatedAmountByValidatorDenom = GRPCMethodDescriptor(
      name: "EstimateSuperfluidDelegatedAmountByValidatorDenom",
      path: "/osmosis.superfluid.Query/EstimateSuperfluidDelegatedAmountByValidatorDenom",
      type: GRPCCallType.unary
    )

    internal static let totalDelegationByDelegator = GRPCMethodDescriptor(
      name: "TotalDelegationByDelegator",
      path: "/osmosis.superfluid.Query/TotalDelegationByDelegator",
      type: GRPCCallType.unary
    )

    internal static let unpoolWhitelist = GRPCMethodDescriptor(
      name: "UnpoolWhitelist",
      path: "/osmosis.superfluid.Query/UnpoolWhitelist",
      type: GRPCCallType.unary
    )
  }
}
