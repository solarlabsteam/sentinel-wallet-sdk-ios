// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/cosmwasmpool/v1beta1/model/module_sudo_msg.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== SwapExactAmountIn
struct Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  /// token_in is the token to be sent to the pool.
  var tokenIn: Cosmos_Base_V1beta1_Coin {
    get {return _tokenIn ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenIn = newValue}
  }
  /// Returns true if `tokenIn` has been explicitly set.
  var hasTokenIn: Bool {return self._tokenIn != nil}
  /// Clears the value of `tokenIn`. Subsequent reads from it will return its default value.
  mutating func clearTokenIn() {self._tokenIn = nil}

  /// token_out_denom is the token denom to be received from the pool.
  var tokenOutDenom: String = String()

  /// token_out_min_amount is the minimum amount of token_out to be received from
  /// the pool.
  var tokenOutMinAmount: String = String()

  /// swap_fee is the swap fee for this swap estimate.
  var swapFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenIn: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// swap_exact_amount_in is the structure containing all the request
  /// information for this message.
  var swapExactAmountIn: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn {
    get {return _swapExactAmountIn ?? Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn()}
    set {_swapExactAmountIn = newValue}
  }
  /// Returns true if `swapExactAmountIn` has been explicitly set.
  var hasSwapExactAmountIn: Bool {return self._swapExactAmountIn != nil}
  /// Clears the value of `swapExactAmountIn`. Subsequent reads from it will return its default value.
  mutating func clearSwapExactAmountIn() {self._swapExactAmountIn = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _swapExactAmountIn: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsgResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// token_out_amount is the token out computed from this swap estimate call.
  var tokenOutAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== SwapExactAmountOut
struct Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  /// token_out is the token to be sent out of the pool.
  var tokenOut: Cosmos_Base_V1beta1_Coin {
    get {return _tokenOut ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenOut = newValue}
  }
  /// Returns true if `tokenOut` has been explicitly set.
  var hasTokenOut: Bool {return self._tokenOut != nil}
  /// Clears the value of `tokenOut`. Subsequent reads from it will return its default value.
  mutating func clearTokenOut() {self._tokenOut = nil}

  /// token_in_denom is the token denom to be sent too the pool.
  var tokenInDenom: String = String()

  /// token_in_max_amount is the maximum amount of token_in to be sent to the
  /// pool.
  var tokenInMaxAmount: String = String()

  /// swap_fee is the swap fee for this swap estimate.
  var swapFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenOut: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// swap_exact_amount_out is the structure containing all the request
  /// information for this message.
  var swapExactAmountOut: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut {
    get {return _swapExactAmountOut ?? Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut()}
    set {_swapExactAmountOut = newValue}
  }
  /// Returns true if `swapExactAmountOut` has been explicitly set.
  var hasSwapExactAmountOut: Bool {return self._swapExactAmountOut != nil}
  /// Clears the value of `swapExactAmountOut`. Subsequent reads from it will return its default value.
  mutating func clearSwapExactAmountOut() {self._swapExactAmountOut = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _swapExactAmountOut: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsgResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// token_in_amount is the token in computed from this swap estimate call.
  var tokenInAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsg: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsgResponse: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsg: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsgResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.cosmwasmpool.v1beta1"

extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapExactAmountIn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "token_in"),
    3: .standard(proto: "token_out_denom"),
    4: .standard(proto: "token_out_min_amount"),
    5: .standard(proto: "swap_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._tokenIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenOutDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenOutMinAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.swapFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    try { if let v = self._tokenIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.tokenOutDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutDenom, fieldNumber: 3)
    }
    if !self.tokenOutMinAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutMinAmount, fieldNumber: 4)
    }
    if !self.swapFee.isEmpty {
      try visitor.visitSingularStringField(value: self.swapFee, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn, rhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountIn) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs._tokenIn != rhs._tokenIn {return false}
    if lhs.tokenOutDenom != rhs.tokenOutDenom {return false}
    if lhs.tokenOutMinAmount != rhs.tokenOutMinAmount {return false}
    if lhs.swapFee != rhs.swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapExactAmountInSudoMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "swap_exact_amount_in"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._swapExactAmountIn) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._swapExactAmountIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsg, rhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsg) -> Bool {
    if lhs._swapExactAmountIn != rhs._swapExactAmountIn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsgResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapExactAmountInSudoMsgResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_out_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenOutAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenOutAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOutAmount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsgResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountInSudoMsgResponse) -> Bool {
    if lhs.tokenOutAmount != rhs.tokenOutAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapExactAmountOut"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "token_out"),
    3: .standard(proto: "token_in_denom"),
    4: .standard(proto: "token_in_max_amount"),
    5: .standard(proto: "swap_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._tokenOut) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenInDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenInMaxAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.swapFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    try { if let v = self._tokenOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.tokenInDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInDenom, fieldNumber: 3)
    }
    if !self.tokenInMaxAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInMaxAmount, fieldNumber: 4)
    }
    if !self.swapFee.isEmpty {
      try visitor.visitSingularStringField(value: self.swapFee, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut, rhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOut) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs._tokenOut != rhs._tokenOut {return false}
    if lhs.tokenInDenom != rhs.tokenInDenom {return false}
    if lhs.tokenInMaxAmount != rhs.tokenInMaxAmount {return false}
    if lhs.swapFee != rhs.swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapExactAmountOutSudoMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "swap_exact_amount_out"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._swapExactAmountOut) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._swapExactAmountOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsg, rhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsg) -> Bool {
    if lhs._swapExactAmountOut != rhs._swapExactAmountOut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsgResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapExactAmountOutSudoMsgResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_in_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenInAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenInAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenInAmount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsgResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_SwapExactAmountOutSudoMsgResponse) -> Bool {
    if lhs.tokenInAmount != rhs.tokenInAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
