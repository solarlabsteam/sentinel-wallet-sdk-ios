// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/concentrated-liquidity/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== MsgCreatePosition
struct Osmosis_Concentratedliquidity_V1beta1_MsgCreatePosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var poolID: UInt64 = 0

  var sender: String = String()

  var lowerTick: Int64 = 0

  var upperTick: Int64 = 0

  /// tokens_provided is the amount of tokens provided for the position.
  /// It must at a minimum be of length 1 (for a single sided position)
  /// and at a maximum be of length 2 (for a position that straddles the current
  /// tick).
  var tokensProvided: [Cosmos_Base_V1beta1_Coin] = []

  var tokenMinAmount0: String = String()

  var tokenMinAmount1: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Concentratedliquidity_V1beta1_MsgCreatePositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionID: UInt64 = 0

  var amount0: String = String()

  var amount1: String = String()

  var joinTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _joinTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_joinTime = newValue}
  }
  /// Returns true if `joinTime` has been explicitly set.
  var hasJoinTime: Bool {return self._joinTime != nil}
  /// Clears the value of `joinTime`. Subsequent reads from it will return its default value.
  mutating func clearJoinTime() {self._joinTime = nil}

  var liquidityCreated: String = String()

  /// the lower and upper tick are in the response because there are
  /// instances in which multiple ticks represent the same price, so
  /// we may move their provided tick to the canonical tick that represents
  /// the same price.
  var lowerTick: Int64 = 0

  var upperTick: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _joinTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ===================== MsgAddToPosition
struct Osmosis_Concentratedliquidity_V1beta1_MsgAddToPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionID: UInt64 = 0

  var sender: String = String()

  /// amount0 represents the amount of token0 willing to put in.
  var amount0: String = String()

  /// amount1 represents the amount of token1 willing to put in.
  var amount1: String = String()

  /// token_min_amount0 represents the minimum amount of token0 desired from the
  /// new position being created. Note that this field indicates the min amount0
  /// corresponding to the total liquidity of the position, not just the
  /// liquidity that is being added.
  var tokenMinAmount0: String = String()

  /// token_min_amount1 represents the minimum amount of token1 desired from the
  /// new position being created. Note that this field indicates the min amount1
  /// corresponding to the total liquidity of the position, not just the
  /// liquidity that is being added.
  var tokenMinAmount1: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Concentratedliquidity_V1beta1_MsgAddToPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionID: UInt64 = 0

  var amount0: String = String()

  var amount1: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgWithdrawPosition
struct Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionID: UInt64 = 0

  var sender: String = String()

  var liquidityAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount0: String = String()

  var amount1: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgCollectSpreadRewards
struct Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionIds: [UInt64] = []

  var sender: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewardsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collectedSpreadRewards: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgCollectIncentives
struct Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentives {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionIds: [UInt64] = []

  var sender: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentivesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collectedIncentives: [Cosmos_Base_V1beta1_Coin] = []

  var forfeitedIncentives: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== MsgFungifyChargedPositions
struct Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionIds: [UInt64] = []

  var sender: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var newPositionID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Concentratedliquidity_V1beta1_MsgCreatePosition: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgCreatePositionResponse: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgAddToPosition: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgAddToPositionResponse: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPosition: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPositionResponse: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewards: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewardsResponse: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentives: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentivesResponse: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositions: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositionsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.concentratedliquidity.v1beta1"

extension Osmosis_Concentratedliquidity_V1beta1_MsgCreatePosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .same(proto: "sender"),
    3: .standard(proto: "lower_tick"),
    4: .standard(proto: "upper_tick"),
    5: .standard(proto: "tokens_provided"),
    6: .standard(proto: "token_min_amount0"),
    7: .standard(proto: "token_min_amount1"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.lowerTick) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.upperTick) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.tokensProvided) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.tokenMinAmount0) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.tokenMinAmount1) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if self.lowerTick != 0 {
      try visitor.visitSingularInt64Field(value: self.lowerTick, fieldNumber: 3)
    }
    if self.upperTick != 0 {
      try visitor.visitSingularInt64Field(value: self.upperTick, fieldNumber: 4)
    }
    if !self.tokensProvided.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokensProvided, fieldNumber: 5)
    }
    if !self.tokenMinAmount0.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenMinAmount0, fieldNumber: 6)
    }
    if !self.tokenMinAmount1.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenMinAmount1, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgCreatePosition, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgCreatePosition) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.lowerTick != rhs.lowerTick {return false}
    if lhs.upperTick != rhs.upperTick {return false}
    if lhs.tokensProvided != rhs.tokensProvided {return false}
    if lhs.tokenMinAmount0 != rhs.tokenMinAmount0 {return false}
    if lhs.tokenMinAmount1 != rhs.tokenMinAmount1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgCreatePositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePositionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_id"),
    2: .same(proto: "amount0"),
    3: .same(proto: "amount1"),
    4: .standard(proto: "join_time"),
    5: .standard(proto: "liquidity_created"),
    6: .standard(proto: "lower_tick"),
    7: .standard(proto: "upper_tick"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount0) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount1) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._joinTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.liquidityCreated) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lowerTick) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.upperTick) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 1)
    }
    if !self.amount0.isEmpty {
      try visitor.visitSingularStringField(value: self.amount0, fieldNumber: 2)
    }
    if !self.amount1.isEmpty {
      try visitor.visitSingularStringField(value: self.amount1, fieldNumber: 3)
    }
    try { if let v = self._joinTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.liquidityCreated.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidityCreated, fieldNumber: 5)
    }
    if self.lowerTick != 0 {
      try visitor.visitSingularInt64Field(value: self.lowerTick, fieldNumber: 6)
    }
    if self.upperTick != 0 {
      try visitor.visitSingularInt64Field(value: self.upperTick, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgCreatePositionResponse, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgCreatePositionResponse) -> Bool {
    if lhs.positionID != rhs.positionID {return false}
    if lhs.amount0 != rhs.amount0 {return false}
    if lhs.amount1 != rhs.amount1 {return false}
    if lhs._joinTime != rhs._joinTime {return false}
    if lhs.liquidityCreated != rhs.liquidityCreated {return false}
    if lhs.lowerTick != rhs.lowerTick {return false}
    if lhs.upperTick != rhs.upperTick {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgAddToPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddToPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_id"),
    2: .same(proto: "sender"),
    3: .same(proto: "amount0"),
    4: .same(proto: "amount1"),
    5: .standard(proto: "token_min_amount0"),
    6: .standard(proto: "token_min_amount1"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount0) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.amount1) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.tokenMinAmount0) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.tokenMinAmount1) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if !self.amount0.isEmpty {
      try visitor.visitSingularStringField(value: self.amount0, fieldNumber: 3)
    }
    if !self.amount1.isEmpty {
      try visitor.visitSingularStringField(value: self.amount1, fieldNumber: 4)
    }
    if !self.tokenMinAmount0.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenMinAmount0, fieldNumber: 5)
    }
    if !self.tokenMinAmount1.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenMinAmount1, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgAddToPosition, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgAddToPosition) -> Bool {
    if lhs.positionID != rhs.positionID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.amount0 != rhs.amount0 {return false}
    if lhs.amount1 != rhs.amount1 {return false}
    if lhs.tokenMinAmount0 != rhs.tokenMinAmount0 {return false}
    if lhs.tokenMinAmount1 != rhs.tokenMinAmount1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgAddToPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddToPositionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_id"),
    2: .same(proto: "amount0"),
    3: .same(proto: "amount1"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount0) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount1) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 1)
    }
    if !self.amount0.isEmpty {
      try visitor.visitSingularStringField(value: self.amount0, fieldNumber: 2)
    }
    if !self.amount1.isEmpty {
      try visitor.visitSingularStringField(value: self.amount1, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgAddToPositionResponse, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgAddToPositionResponse) -> Bool {
    if lhs.positionID != rhs.positionID {return false}
    if lhs.amount0 != rhs.amount0 {return false}
    if lhs.amount1 != rhs.amount1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_id"),
    2: .same(proto: "sender"),
    3: .standard(proto: "liquidity_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.liquidityAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if !self.liquidityAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidityAmount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPosition, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPosition) -> Bool {
    if lhs.positionID != rhs.positionID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.liquidityAmount != rhs.liquidityAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawPositionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount0"),
    2: .same(proto: "amount1"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.amount0) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount1) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount0.isEmpty {
      try visitor.visitSingularStringField(value: self.amount0, fieldNumber: 1)
    }
    if !self.amount1.isEmpty {
      try visitor.visitSingularStringField(value: self.amount1, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPositionResponse, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgWithdrawPositionResponse) -> Bool {
    if lhs.amount0 != rhs.amount0 {return false}
    if lhs.amount1 != rhs.amount1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCollectSpreadRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_ids"),
    2: .same(proto: "sender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.positionIds) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.positionIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.positionIds, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewards, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewards) -> Bool {
    if lhs.positionIds != rhs.positionIds {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewardsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCollectSpreadRewardsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collected_spread_rewards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.collectedSpreadRewards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collectedSpreadRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collectedSpreadRewards, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewardsResponse, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectSpreadRewardsResponse) -> Bool {
    if lhs.collectedSpreadRewards != rhs.collectedSpreadRewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentives: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCollectIncentives"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_ids"),
    2: .same(proto: "sender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.positionIds) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.positionIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.positionIds, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentives, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentives) -> Bool {
    if lhs.positionIds != rhs.positionIds {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentivesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCollectIncentivesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collected_incentives"),
    2: .standard(proto: "forfeited_incentives"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.collectedIncentives) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.forfeitedIncentives) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collectedIncentives.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collectedIncentives, fieldNumber: 1)
    }
    if !self.forfeitedIncentives.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.forfeitedIncentives, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentivesResponse, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgCollectIncentivesResponse) -> Bool {
    if lhs.collectedIncentives != rhs.collectedIncentives {return false}
    if lhs.forfeitedIncentives != rhs.forfeitedIncentives {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFungifyChargedPositions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_ids"),
    2: .same(proto: "sender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.positionIds) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.positionIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.positionIds, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositions, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositions) -> Bool {
    if lhs.positionIds != rhs.positionIds {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFungifyChargedPositionsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_position_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.newPositionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.newPositionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.newPositionID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositionsResponse, rhs: Osmosis_Concentratedliquidity_V1beta1_MsgFungifyChargedPositionsResponse) -> Bool {
    if lhs.newPositionID != rhs.newPositionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
