// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/concentrated-liquidity/position.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Position contains position's id, address, pool id, lower tick, upper tick
/// join time, and liquidity.
struct Osmosis_Concentratedliquidity_V1beta1_Position {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionID: UInt64 = 0

  var address: String = String()

  var poolID: UInt64 = 0

  var lowerTick: Int64 = 0

  var upperTick: Int64 = 0

  var joinTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _joinTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_joinTime = newValue}
  }
  /// Returns true if `joinTime` has been explicitly set.
  var hasJoinTime: Bool {return self._joinTime != nil}
  /// Clears the value of `joinTime`. Subsequent reads from it will return its default value.
  mutating func clearJoinTime() {self._joinTime = nil}

  var liquidity: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _joinTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// FullPositionBreakdown returns:
/// - the position itself
/// - the amount the position translates in terms of asset0 and asset1
/// - the amount of claimable fees
/// - the amount of claimable incentives
/// - the amount of incentives that would be forfeited if the position was closed
/// now
struct Osmosis_Concentratedliquidity_V1beta1_FullPositionBreakdown {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: Osmosis_Concentratedliquidity_V1beta1_Position {
    get {return _position ?? Osmosis_Concentratedliquidity_V1beta1_Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var asset0: Cosmos_Base_V1beta1_Coin {
    get {return _asset0 ?? Cosmos_Base_V1beta1_Coin()}
    set {_asset0 = newValue}
  }
  /// Returns true if `asset0` has been explicitly set.
  var hasAsset0: Bool {return self._asset0 != nil}
  /// Clears the value of `asset0`. Subsequent reads from it will return its default value.
  mutating func clearAsset0() {self._asset0 = nil}

  var asset1: Cosmos_Base_V1beta1_Coin {
    get {return _asset1 ?? Cosmos_Base_V1beta1_Coin()}
    set {_asset1 = newValue}
  }
  /// Returns true if `asset1` has been explicitly set.
  var hasAsset1: Bool {return self._asset1 != nil}
  /// Clears the value of `asset1`. Subsequent reads from it will return its default value.
  mutating func clearAsset1() {self._asset1 = nil}

  var claimableFees: [Cosmos_Base_V1beta1_Coin] = []

  var claimableIncentives: [Cosmos_Base_V1beta1_Coin] = []

  var forfeitedIncentives: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: Osmosis_Concentratedliquidity_V1beta1_Position? = nil
  fileprivate var _asset0: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _asset1: Cosmos_Base_V1beta1_Coin? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Concentratedliquidity_V1beta1_Position: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_FullPositionBreakdown: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.concentratedliquidity.v1beta1"

extension Osmosis_Concentratedliquidity_V1beta1_Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_id"),
    2: .same(proto: "address"),
    3: .standard(proto: "pool_id"),
    4: .standard(proto: "lower_tick"),
    5: .standard(proto: "upper_tick"),
    6: .standard(proto: "join_time"),
    7: .same(proto: "liquidity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.lowerTick) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.upperTick) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._joinTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.liquidity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 3)
    }
    if self.lowerTick != 0 {
      try visitor.visitSingularInt64Field(value: self.lowerTick, fieldNumber: 4)
    }
    if self.upperTick != 0 {
      try visitor.visitSingularInt64Field(value: self.upperTick, fieldNumber: 5)
    }
    try { if let v = self._joinTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.liquidity.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidity, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_Position, rhs: Osmosis_Concentratedliquidity_V1beta1_Position) -> Bool {
    if lhs.positionID != rhs.positionID {return false}
    if lhs.address != rhs.address {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.lowerTick != rhs.lowerTick {return false}
    if lhs.upperTick != rhs.upperTick {return false}
    if lhs._joinTime != rhs._joinTime {return false}
    if lhs.liquidity != rhs.liquidity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_FullPositionBreakdown: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FullPositionBreakdown"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "asset0"),
    3: .same(proto: "asset1"),
    4: .standard(proto: "claimable_fees"),
    5: .standard(proto: "claimable_incentives"),
    6: .standard(proto: "forfeited_incentives"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._asset0) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._asset1) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.claimableFees) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.claimableIncentives) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.forfeitedIncentives) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._asset0 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._asset1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.claimableFees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimableFees, fieldNumber: 4)
    }
    if !self.claimableIncentives.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimableIncentives, fieldNumber: 5)
    }
    if !self.forfeitedIncentives.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.forfeitedIncentives, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_FullPositionBreakdown, rhs: Osmosis_Concentratedliquidity_V1beta1_FullPositionBreakdown) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._asset0 != rhs._asset0 {return false}
    if lhs._asset1 != rhs._asset1 {return false}
    if lhs.claimableFees != rhs.claimableFees {return false}
    if lhs.claimableIncentives != rhs.claimableIncentives {return false}
    if lhs.forfeitedIncentives != rhs.forfeitedIncentives {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
