// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/valset-pref/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateValidatorSetPreference is a list that holds validator-set.
struct Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator is the user who is trying to create a validator-set.
  var delegator: String = String()

  /// list of {valAddr, weight} to delegate to
  var preferences: [Osmosis_Valsetpref_V1beta1_ValidatorPreference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreferenceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDelegateToValidatorSet allows users to delegate to an existing
/// validator-set
struct Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator is the user who is trying to delegate.
  var delegator: String = String()

  /// the amount of tokens the user is trying to delegate.
  /// For ex: delegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC
  /// -> 0.2} our staking logic would attempt to delegate 5osmo to A , 3osmo to
  /// B, 2osmo to C.
  var coin: Cosmos_Base_V1beta1_Coin {
    get {return _coin ?? Cosmos_Base_V1beta1_Coin()}
    set {_coin = newValue}
  }
  /// Returns true if `coin` has been explicitly set.
  var hasCoin: Bool {return self._coin != nil}
  /// Clears the value of `coin`. Subsequent reads from it will return its default value.
  mutating func clearCoin() {self._coin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _coin: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator is the user who is trying to undelegate.
  var delegator: String = String()

  /// the amount the user wants to undelegate
  /// For ex: Undelegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3,
  /// ValC
  /// -> 0.2} our undelegate logic would attempt to undelegate 5osmo from A ,
  /// 3osmo from B, 2osmo from C
  var coin: Cosmos_Base_V1beta1_Coin {
    get {return _coin ?? Cosmos_Base_V1beta1_Coin()}
    set {_coin = newValue}
  }
  /// Returns true if `coin` has been explicitly set.
  var hasCoin: Bool {return self._coin != nil}
  /// Clears the value of `coin`. Subsequent reads from it will return its default value.
  mutating func clearCoin() {self._coin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _coin: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator is the user who is trying to create a validator-set.
  var delegator: String = String()

  /// list of {valAddr, weight} to delegate to
  var preferences: [Osmosis_Valsetpref_V1beta1_ValidatorPreference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdrawDelegationRewards allows user to claim staking rewards from the
/// validator set.
struct Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator is the user who is trying to claim staking rewards.
  var delegator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewardsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDelegateBondedTokens breaks bonded lockup (by ID) of osmo, of
/// length <= 2 weeks and takes all that osmo and delegates according to
/// delegator's current validator set preference.
struct Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokens {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator is the user who is trying to force unbond osmo and delegate.
  var delegator: String = String()

  /// lockup id of osmo in the pool
  var lockID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokensResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreference: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreferenceResponse: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSet: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSetResponse: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSet: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSetResponse: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSet: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSetResponse: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewards: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewardsResponse: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokens: @unchecked Sendable {}
extension Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokensResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.valsetpref.v1beta1"

extension Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetValidatorSetPreference"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegator"),
    2: .same(proto: "preferences"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegator) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.preferences) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegator.isEmpty {
      try visitor.visitSingularStringField(value: self.delegator, fieldNumber: 1)
    }
    if !self.preferences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.preferences, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreference, rhs: Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreference) -> Bool {
    if lhs.delegator != rhs.delegator {return false}
    if lhs.preferences != rhs.preferences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreferenceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetValidatorSetPreferenceResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreferenceResponse, rhs: Osmosis_Valsetpref_V1beta1_MsgSetValidatorSetPreferenceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegateToValidatorSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegator"),
    2: .same(proto: "coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegator) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._coin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegator.isEmpty {
      try visitor.visitSingularStringField(value: self.delegator, fieldNumber: 1)
    }
    try { if let v = self._coin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSet, rhs: Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSet) -> Bool {
    if lhs.delegator != rhs.delegator {return false}
    if lhs._coin != rhs._coin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegateToValidatorSetResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSetResponse, rhs: Osmosis_Valsetpref_V1beta1_MsgDelegateToValidatorSetResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUndelegateFromValidatorSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegator"),
    3: .same(proto: "coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegator) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._coin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegator.isEmpty {
      try visitor.visitSingularStringField(value: self.delegator, fieldNumber: 1)
    }
    try { if let v = self._coin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSet, rhs: Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSet) -> Bool {
    if lhs.delegator != rhs.delegator {return false}
    if lhs._coin != rhs._coin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUndelegateFromValidatorSetResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSetResponse, rhs: Osmosis_Valsetpref_V1beta1_MsgUndelegateFromValidatorSetResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRedelegateValidatorSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegator"),
    2: .same(proto: "preferences"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegator) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.preferences) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegator.isEmpty {
      try visitor.visitSingularStringField(value: self.delegator, fieldNumber: 1)
    }
    if !self.preferences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.preferences, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSet, rhs: Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSet) -> Bool {
    if lhs.delegator != rhs.delegator {return false}
    if lhs.preferences != rhs.preferences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRedelegateValidatorSetResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSetResponse, rhs: Osmosis_Valsetpref_V1beta1_MsgRedelegateValidatorSetResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawDelegationRewards"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegator.isEmpty {
      try visitor.visitSingularStringField(value: self.delegator, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewards, rhs: Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewards) -> Bool {
    if lhs.delegator != rhs.delegator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewardsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawDelegationRewardsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewardsResponse, rhs: Osmosis_Valsetpref_V1beta1_MsgWithdrawDelegationRewardsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokens: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegateBondedTokens"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegator"),
    2: .same(proto: "lockID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegator) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegator.isEmpty {
      try visitor.visitSingularStringField(value: self.delegator, fieldNumber: 1)
    }
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokens, rhs: Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokens) -> Bool {
    if lhs.delegator != rhs.delegator {return false}
    if lhs.lockID != rhs.lockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegateBondedTokensResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokensResponse, rhs: Osmosis_Valsetpref_V1beta1_MsgDelegateBondedTokensResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
