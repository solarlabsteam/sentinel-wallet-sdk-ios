// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/incentives/gauge.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Osmosis_Incentives_Gauge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unique ID of a Gauge
  var id: UInt64 = 0

  /// flag to show if it's perpetual or multi-epoch
  var isPerpetual: Bool = false

  /// distribution incentives by third party
  /// Rewards are distributed to lockups that are are returned by at least one of
  /// these queries
  var distributeTo: Osmosis_Lockup_QueryCondition {
    get {return _distributeTo ?? Osmosis_Lockup_QueryCondition()}
    set {_distributeTo = newValue}
  }
  /// Returns true if `distributeTo` has been explicitly set.
  var hasDistributeTo: Bool {return self._distributeTo != nil}
  /// Clears the value of `distributeTo`. Subsequent reads from it will return its default value.
  mutating func clearDistributeTo() {self._distributeTo = nil}

  /// can distribute multiple coins
  var coins: [Cosmos_Base_V1beta1_Coin] = []

  /// distribution start time
  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  /// number of epochs distribution will be done
  var numEpochsPaidOver: UInt64 = 0

  /// number of epochs distributed already
  var filledEpochs: UInt64 = 0

  /// already distributed coins
  var distributedCoins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _distributeTo: Osmosis_Lockup_QueryCondition? = nil
  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Osmosis_Incentives_LockableDurationsInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lockableDurations: [SwiftProtobuf.Google_Protobuf_Duration] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.incentives"

extension Osmosis_Incentives_Gauge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Gauge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "is_perpetual"),
    3: .standard(proto: "distribute_to"),
    4: .same(proto: "coins"),
    5: .standard(proto: "start_time"),
    6: .standard(proto: "num_epochs_paid_over"),
    7: .standard(proto: "filled_epochs"),
    8: .standard(proto: "distributed_coins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.isPerpetual)
      case 3: try decoder.decodeSingularMessageField(value: &self._distributeTo)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.coins)
      case 5: try decoder.decodeSingularMessageField(value: &self._startTime)
      case 6: try decoder.decodeSingularUInt64Field(value: &self.numEpochsPaidOver)
      case 7: try decoder.decodeSingularUInt64Field(value: &self.filledEpochs)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.distributedCoins)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.isPerpetual != false {
      try visitor.visitSingularBoolField(value: self.isPerpetual, fieldNumber: 2)
    }
    if let v = self._distributeTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 4)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.numEpochsPaidOver != 0 {
      try visitor.visitSingularUInt64Field(value: self.numEpochsPaidOver, fieldNumber: 6)
    }
    if self.filledEpochs != 0 {
      try visitor.visitSingularUInt64Field(value: self.filledEpochs, fieldNumber: 7)
    }
    if !self.distributedCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.distributedCoins, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Incentives_Gauge, rhs: Osmosis_Incentives_Gauge) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.isPerpetual != rhs.isPerpetual {return false}
    if lhs._distributeTo != rhs._distributeTo {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.numEpochsPaidOver != rhs.numEpochsPaidOver {return false}
    if lhs.filledEpochs != rhs.filledEpochs {return false}
    if lhs.distributedCoins != rhs.distributedCoins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Incentives_LockableDurationsInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LockableDurationsInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lockable_durations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.lockableDurations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lockableDurations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lockableDurations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Incentives_LockableDurationsInfo, rhs: Osmosis_Incentives_LockableDurationsInfo) -> Bool {
    if lhs.lockableDurations != rhs.lockableDurations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
