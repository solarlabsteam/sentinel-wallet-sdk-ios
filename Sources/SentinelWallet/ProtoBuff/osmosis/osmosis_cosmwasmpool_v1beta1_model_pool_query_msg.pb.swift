// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/cosmwasmpool/v1beta1/model/pool_query_msg.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ===================== GetSwapFeeQueryMsg
struct Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// get_swap_fee is the query strcuture to get swap fee.
  var getSwapFee: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct {
    get {return _getSwapFee ?? Osmosis_Cosmwasmpool_V1beta1_EmptyStruct()}
    set {_getSwapFee = newValue}
  }
  /// Returns true if `getSwapFee` has been explicitly set.
  var hasGetSwapFee: Bool {return self._getSwapFee != nil}
  /// Clears the value of `getSwapFee`. Subsequent reads from it will return its default value.
  mutating func clearGetSwapFee() {self._getSwapFee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _getSwapFee: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsgResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// swap_fee is the swap fee for this swap estimate.
  var swapFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== SpotPriceQueryMsg
struct Osmosis_Cosmwasmpool_V1beta1_SpotPrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// quote_asset_denom is the quote asset of the spot query.
  var quoteAssetDenom: String = String()

  /// base_asset_denom is the base asset of the spot query.
  var baseAssetDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// spot_price is the structure containing request field of the spot price
  /// query message.
  var spotPrice: Osmosis_Cosmwasmpool_V1beta1_SpotPrice {
    get {return _spotPrice ?? Osmosis_Cosmwasmpool_V1beta1_SpotPrice()}
    set {_spotPrice = newValue}
  }
  /// Returns true if `spotPrice` has been explicitly set.
  var hasSpotPrice: Bool {return self._spotPrice != nil}
  /// Clears the value of `spotPrice`. Subsequent reads from it will return its default value.
  mutating func clearSpotPrice() {self._spotPrice = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spotPrice: Osmosis_Cosmwasmpool_V1beta1_SpotPrice? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsgResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// spot_price is the spot price returned.
  var spotPrice: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== GetTotalPoolLiquidityQueryMsg
struct Osmosis_Cosmwasmpool_V1beta1_EmptyStruct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// get_total_pool_liquidity is the structure containing request field of the
  /// total pool liquidity query message.
  var getTotalPoolLiquidity: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct {
    get {return _getTotalPoolLiquidity ?? Osmosis_Cosmwasmpool_V1beta1_EmptyStruct()}
    set {_getTotalPoolLiquidity = newValue}
  }
  /// Returns true if `getTotalPoolLiquidity` has been explicitly set.
  var hasGetTotalPoolLiquidity: Bool {return self._getTotalPoolLiquidity != nil}
  /// Clears the value of `getTotalPoolLiquidity`. Subsequent reads from it will return its default value.
  mutating func clearGetTotalPoolLiquidity() {self._getTotalPoolLiquidity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _getTotalPoolLiquidity: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsgResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///  total_pool_liquidity is the total liquidity in the pool denominated in
  ///  coins.
  var totalPoolLiquidity: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ===================== GetTotalSharesQueryMsg
struct Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// get_total_shares is the structure containing request field of the
  /// total shares query message.
  var getTotalShares: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct {
    get {return _getTotalShares ?? Osmosis_Cosmwasmpool_V1beta1_EmptyStruct()}
    set {_getTotalShares = newValue}
  }
  /// Returns true if `getTotalShares` has been explicitly set.
  var hasGetTotalShares: Bool {return self._getTotalShares != nil}
  /// Clears the value of `getTotalShares`. Subsequent reads from it will return its default value.
  mutating func clearGetTotalShares() {self._getTotalShares = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _getTotalShares: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct? = nil
}

struct Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsgResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// total_shares is the amount of shares returned.
  var totalShares: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsg: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsgResponse: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SpotPrice: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsg: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsgResponse: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_EmptyStruct: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsg: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsgResponse: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsg: @unchecked Sendable {}
extension Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsgResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.cosmwasmpool.v1beta1"

extension Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSwapFeeQueryMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "get_swap_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._getSwapFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._getSwapFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsg, rhs: Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsg) -> Bool {
    if lhs._getSwapFee != rhs._getSwapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsgResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSwapFeeQueryMsgResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "swap_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularStringField(value: &self.swapFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.swapFee.isEmpty {
      try visitor.visitSingularStringField(value: self.swapFee, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsgResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_GetSwapFeeQueryMsgResponse) -> Bool {
    if lhs.swapFee != rhs.swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SpotPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpotPrice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quote_asset_denom"),
    2: .standard(proto: "base_asset_denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.quoteAssetDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.baseAssetDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.quoteAssetDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.quoteAssetDenom, fieldNumber: 1)
    }
    if !self.baseAssetDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseAssetDenom, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SpotPrice, rhs: Osmosis_Cosmwasmpool_V1beta1_SpotPrice) -> Bool {
    if lhs.quoteAssetDenom != rhs.quoteAssetDenom {return false}
    if lhs.baseAssetDenom != rhs.baseAssetDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpotPriceQueryMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spot_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spotPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._spotPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsg, rhs: Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsg) -> Bool {
    if lhs._spotPrice != rhs._spotPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsgResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpotPriceQueryMsgResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "spot_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.spotPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spotPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.spotPrice, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsgResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_SpotPriceQueryMsgResponse) -> Bool {
    if lhs.spotPrice != rhs.spotPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_EmptyStruct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EmptyStruct"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct, rhs: Osmosis_Cosmwasmpool_V1beta1_EmptyStruct) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTotalPoolLiquidityQueryMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "get_total_pool_liquidity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._getTotalPoolLiquidity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._getTotalPoolLiquidity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsg, rhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsg) -> Bool {
    if lhs._getTotalPoolLiquidity != rhs._getTotalPoolLiquidity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsgResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTotalPoolLiquidityQueryMsgResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_pool_liquidity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.totalPoolLiquidity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.totalPoolLiquidity.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalPoolLiquidity, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsgResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalPoolLiquidityQueryMsgResponse) -> Bool {
    if lhs.totalPoolLiquidity != rhs.totalPoolLiquidity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTotalSharesQueryMsg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "get_total_shares"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._getTotalShares) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._getTotalShares {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsg, rhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsg) -> Bool {
    if lhs._getTotalShares != rhs._getTotalShares {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsgResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTotalSharesQueryMsgResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_shares"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.totalShares) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.totalShares.isEmpty {
      try visitor.visitSingularStringField(value: self.totalShares, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsgResponse, rhs: Osmosis_Cosmwasmpool_V1beta1_GetTotalSharesQueryMsgResponse) -> Bool {
    if lhs.totalShares != rhs.totalShares {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
