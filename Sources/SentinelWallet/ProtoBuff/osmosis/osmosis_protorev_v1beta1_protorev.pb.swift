// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/protorev/v1beta1/protorev.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TokenPairArbRoutes tracks all of the hot routes for a given pair of tokens
struct Osmosis_Protorev_V1beta1_TokenPairArbRoutes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Stores all of the possible hot paths for a given pair of tokens
  var arbRoutes: [Osmosis_Protorev_V1beta1_Route] = []

  /// Token denomination of the first asset
  var tokenIn: String = String()

  /// Token denomination of the second asset
  var tokenOut: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Route is a hot route for a given pair of tokens
struct Osmosis_Protorev_V1beta1_Route {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The pool IDs that are travered in the directed cyclic graph (traversed left
  /// -> right)
  var trades: [Osmosis_Protorev_V1beta1_Trade] = []

  /// The step size that will be used to find the optimal swap amount in the
  /// binary search
  var stepSize: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Trade is a single trade in a route
struct Osmosis_Protorev_V1beta1_Trade {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The pool id of the pool that is traded on
  var pool: UInt64 = 0

  /// The denom of the token that is traded
  var tokenIn: String = String()

  /// The denom of the token that is received
  var tokenOut: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// RouteStatistics contains the number of trades the module has executed after a
/// swap on a given route and the profits from the trades
struct Osmosis_Protorev_V1beta1_RouteStatistics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// profits is the total profit from all trades on this route
  var profits: [Cosmos_Base_V1beta1_Coin] = []

  /// number_of_trades is the number of trades the module has executed using this
  /// route
  var numberOfTrades: String = String()

  /// route is the route that was used (pool ids along the arbitrage route)
  var route: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PoolWeights contains the weights of all of the different pool types. This
/// distinction is made and necessary because the execution time ranges
/// significantly between the different pool types. Each weight roughly
/// corresponds to the amount of time (in ms) it takes to execute a swap on that
/// pool type.
struct Osmosis_Protorev_V1beta1_PoolWeights {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The weight of a stableswap pool
  var stableWeight: UInt64 = 0

  /// The weight of a balancer pool
  var balancerWeight: UInt64 = 0

  /// The weight of a concentrated pool
  var concentratedWeight: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BaseDenom represents a single base denom that the module uses for its
/// arbitrage trades. It contains the denom name alongside the step size of the
/// binary search that is used to find the optimal swap amount
struct Osmosis_Protorev_V1beta1_BaseDenom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The denom i.e. name of the base denom (ex. uosmo)
  var denom: String = String()

  /// The step size of the binary search that is used to find the optimal swap
  /// amount
  var stepSize: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Protorev_V1beta1_TokenPairArbRoutes: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_Route: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_Trade: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_RouteStatistics: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_PoolWeights: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_BaseDenom: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.protorev.v1beta1"

extension Osmosis_Protorev_V1beta1_TokenPairArbRoutes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TokenPairArbRoutes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "arb_routes"),
    2: .standard(proto: "token_in"),
    3: .standard(proto: "token_out"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.arbRoutes) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tokenIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenOut) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.arbRoutes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.arbRoutes, fieldNumber: 1)
    }
    if !self.tokenIn.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenIn, fieldNumber: 2)
    }
    if !self.tokenOut.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOut, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_TokenPairArbRoutes, rhs: Osmosis_Protorev_V1beta1_TokenPairArbRoutes) -> Bool {
    if lhs.arbRoutes != rhs.arbRoutes {return false}
    if lhs.tokenIn != rhs.tokenIn {return false}
    if lhs.tokenOut != rhs.tokenOut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_Route: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Route"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trades"),
    2: .standard(proto: "step_size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.trades) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stepSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trades.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trades, fieldNumber: 1)
    }
    if !self.stepSize.isEmpty {
      try visitor.visitSingularStringField(value: self.stepSize, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_Route, rhs: Osmosis_Protorev_V1beta1_Route) -> Bool {
    if lhs.trades != rhs.trades {return false}
    if lhs.stepSize != rhs.stepSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_Trade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Trade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pool"),
    2: .standard(proto: "token_in"),
    3: .standard(proto: "token_out"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.pool) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tokenIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenOut) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pool != 0 {
      try visitor.visitSingularUInt64Field(value: self.pool, fieldNumber: 1)
    }
    if !self.tokenIn.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenIn, fieldNumber: 2)
    }
    if !self.tokenOut.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenOut, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_Trade, rhs: Osmosis_Protorev_V1beta1_Trade) -> Bool {
    if lhs.pool != rhs.pool {return false}
    if lhs.tokenIn != rhs.tokenIn {return false}
    if lhs.tokenOut != rhs.tokenOut {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_RouteStatistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RouteStatistics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profits"),
    2: .standard(proto: "number_of_trades"),
    3: .same(proto: "route"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.profits) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.numberOfTrades) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.route) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profits, fieldNumber: 1)
    }
    if !self.numberOfTrades.isEmpty {
      try visitor.visitSingularStringField(value: self.numberOfTrades, fieldNumber: 2)
    }
    if !self.route.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.route, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_RouteStatistics, rhs: Osmosis_Protorev_V1beta1_RouteStatistics) -> Bool {
    if lhs.profits != rhs.profits {return false}
    if lhs.numberOfTrades != rhs.numberOfTrades {return false}
    if lhs.route != rhs.route {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_PoolWeights: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolWeights"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stable_weight"),
    2: .standard(proto: "balancer_weight"),
    3: .standard(proto: "concentrated_weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.stableWeight) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.balancerWeight) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.concentratedWeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.stableWeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.stableWeight, fieldNumber: 1)
    }
    if self.balancerWeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.balancerWeight, fieldNumber: 2)
    }
    if self.concentratedWeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.concentratedWeight, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_PoolWeights, rhs: Osmosis_Protorev_V1beta1_PoolWeights) -> Bool {
    if lhs.stableWeight != rhs.stableWeight {return false}
    if lhs.balancerWeight != rhs.balancerWeight {return false}
    if lhs.concentratedWeight != rhs.concentratedWeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_BaseDenom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseDenom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "step_size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stepSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.stepSize.isEmpty {
      try visitor.visitSingularStringField(value: self.stepSize, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_BaseDenom, rhs: Osmosis_Protorev_V1beta1_BaseDenom) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.stepSize != rhs.stepSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
