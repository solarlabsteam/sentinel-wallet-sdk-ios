// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/superfluid/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Osmosis_Superfluid_MsgSuperfluidDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var lockID: UInt64 = 0

  var valAddr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgSuperfluidDelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgSuperfluidUndelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var lockID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgSuperfluidUndelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgSuperfluidUnbondLock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var lockID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var lockID: UInt64 = 0

  /// Amount of unlocking coin.
  var coin: Cosmos_Base_V1beta1_Coin {
    get {return _coin ?? Cosmos_Base_V1beta1_Coin()}
    set {_coin = newValue}
  }
  /// Returns true if `coin` has been explicitly set.
  var hasCoin: Bool {return self._coin != nil}
  /// Clears the value of `coin`. Subsequent reads from it will return its default value.
  mutating func clearCoin() {self._coin = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _coin: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// lock id of the new lock created for the remaining amount.
  /// returns the original lockid if the unlocked amount is equal to the
  /// original lock's amount.
  var lockID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgLockAndSuperfluidDelegate locks coins with the unbonding period duration,
/// and then does a superfluid lock from the newly created lockup, to the
/// specified validator addr.
struct Osmosis_Superfluid_MsgLockAndSuperfluidDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var coins: [Cosmos_Base_V1beta1_Coin] = []

  var valAddr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreateFullRangePositionAndSuperfluidDelegate creates a full range position
/// in a concentrated liquidity pool, then superfluid delegates.
struct Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var coins: [Cosmos_Base_V1beta1_Coin] = []

  var valAddr: String = String()

  var poolID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lockID: UInt64 = 0

  var positionID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUnPoolWhitelistedPool Unpools every lock the sender has, that is
/// associated with pool pool_id. If pool_id is not approved for unpooling by
/// governance, this is a no-op. Unpooling takes the locked gamm shares, and runs
/// "ExitPool" on it, to get the constituent tokens. e.g. z gamm/pool/1 tokens
/// ExitPools into constituent tokens x uatom, y uosmo. Then it creates a new
/// lock for every constituent token, with the duration associated with the lock.
/// If the lock was unbonding, the new lockup durations should be the time left
/// until unbond completion.
struct Osmosis_Superfluid_MsgUnPoolWhitelistedPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var poolID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var exitedLockIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// =====================
/// MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition
struct Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var lockID: UInt64 = 0

  var sharesToMigrate: Cosmos_Base_V1beta1_Coin {
    get {return _sharesToMigrate ?? Cosmos_Base_V1beta1_Coin()}
    set {_sharesToMigrate = newValue}
  }
  /// Returns true if `sharesToMigrate` has been explicitly set.
  var hasSharesToMigrate: Bool {return self._sharesToMigrate != nil}
  /// Clears the value of `sharesToMigrate`. Subsequent reads from it will return its default value.
  mutating func clearSharesToMigrate() {self._sharesToMigrate = nil}

  /// token_out_mins indicates minimum token to exit Balancer pool with.
  var tokenOutMins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sharesToMigrate: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount0: String = String()

  var amount1: String = String()

  var liquidityCreated: String = String()

  var joinTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _joinTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_joinTime = newValue}
  }
  /// Returns true if `joinTime` has been explicitly set.
  var hasJoinTime: Bool {return self._joinTime != nil}
  /// Clears the value of `joinTime`. Subsequent reads from it will return its default value.
  mutating func clearJoinTime() {self._joinTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _joinTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ===================== MsgAddToConcentratedLiquiditySuperfluidPosition
struct Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionID: UInt64 = 0

  var sender: String = String()

  var tokenDesired0: Cosmos_Base_V1beta1_Coin {
    get {return _tokenDesired0 ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenDesired0 = newValue}
  }
  /// Returns true if `tokenDesired0` has been explicitly set.
  var hasTokenDesired0: Bool {return self._tokenDesired0 != nil}
  /// Clears the value of `tokenDesired0`. Subsequent reads from it will return its default value.
  mutating func clearTokenDesired0() {self._tokenDesired0 = nil}

  var tokenDesired1: Cosmos_Base_V1beta1_Coin {
    get {return _tokenDesired1 ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenDesired1 = newValue}
  }
  /// Returns true if `tokenDesired1` has been explicitly set.
  var hasTokenDesired1: Bool {return self._tokenDesired1 != nil}
  /// Clears the value of `tokenDesired1`. Subsequent reads from it will return its default value.
  mutating func clearTokenDesired1() {self._tokenDesired1 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenDesired0: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _tokenDesired1: Cosmos_Base_V1beta1_Coin? = nil
}

struct Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var positionID: UInt64 = 0

  var amount0: String = String()

  var amount1: String = String()

  /// new_liquidity is the final liquidity after the add.
  /// It includes the liquidity that existed before in the position
  /// and the new liquidity that was added to the position.
  var newLiquidity: String = String()

  var lockID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Superfluid_MsgSuperfluidDelegate: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgSuperfluidDelegateResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgSuperfluidUndelegate: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgSuperfluidUndelegateResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgSuperfluidUnbondLock: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgLockAndSuperfluidDelegate: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgUnPoolWhitelistedPool: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition: @unchecked Sendable {}
extension Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.superfluid"

extension Osmosis_Superfluid_MsgSuperfluidDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidDelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "lock_id"),
    3: .standard(proto: "val_addr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.valAddr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 2)
    }
    if !self.valAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.valAddr, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidDelegate, rhs: Osmosis_Superfluid_MsgSuperfluidDelegate) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.lockID != rhs.lockID {return false}
    if lhs.valAddr != rhs.valAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgSuperfluidDelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidDelegateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidDelegateResponse, rhs: Osmosis_Superfluid_MsgSuperfluidDelegateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgSuperfluidUndelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidUndelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "lock_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidUndelegate, rhs: Osmosis_Superfluid_MsgSuperfluidUndelegate) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.lockID != rhs.lockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgSuperfluidUndelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidUndelegateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidUndelegateResponse, rhs: Osmosis_Superfluid_MsgSuperfluidUndelegateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgSuperfluidUnbondLock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidUnbondLock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "lock_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidUnbondLock, rhs: Osmosis_Superfluid_MsgSuperfluidUnbondLock) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.lockID != rhs.lockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidUnbondLockResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse, rhs: Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidUndelegateAndUnbondLock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "lock_id"),
    3: .same(proto: "coin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._coin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 2)
    }
    try { if let v = self._coin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, rhs: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.lockID != rhs.lockID {return false}
    if lhs._coin != rhs._coin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSuperfluidUndelegateAndUnbondLockResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lock_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse, rhs: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse) -> Bool {
    if lhs.lockID != rhs.lockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgLockAndSuperfluidDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLockAndSuperfluidDelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "coins"),
    3: .standard(proto: "val_addr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.valAddr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 2)
    }
    if !self.valAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.valAddr, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, rhs: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.valAddr != rhs.valAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLockAndSuperfluidDelegateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse, rhs: Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateFullRangePositionAndSuperfluidDelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "coins"),
    3: .standard(proto: "val_addr"),
    4: .standard(proto: "pool_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.valAddr) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 2)
    }
    if !self.valAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.valAddr, fieldNumber: 3)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, rhs: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.valAddr != rhs.valAddr {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateFullRangePositionAndSuperfluidDelegateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lockID"),
    2: .same(proto: "positionID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 1)
    }
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse, rhs: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse) -> Bool {
    if lhs.lockID != rhs.lockID {return false}
    if lhs.positionID != rhs.positionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgUnPoolWhitelistedPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnPoolWhitelistedPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "pool_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.poolID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.poolID != 0 {
      try visitor.visitSingularUInt64Field(value: self.poolID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgUnPoolWhitelistedPool, rhs: Osmosis_Superfluid_MsgUnPoolWhitelistedPool) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnPoolWhitelistedPoolResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "exited_lock_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.exitedLockIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.exitedLockIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.exitedLockIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse, rhs: Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse) -> Bool {
    if lhs.exitedLockIds != rhs.exitedLockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "lock_id"),
    3: .standard(proto: "shares_to_migrate"),
    4: .standard(proto: "token_out_mins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._sharesToMigrate) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.tokenOutMins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 2)
    }
    try { if let v = self._sharesToMigrate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.tokenOutMins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenOutMins, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, rhs: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.lockID != rhs.lockID {return false}
    if lhs._sharesToMigrate != rhs._sharesToMigrate {return false}
    if lhs.tokenOutMins != rhs.tokenOutMins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount0"),
    2: .same(proto: "amount1"),
    3: .standard(proto: "liquidity_created"),
    4: .standard(proto: "join_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.amount0) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount1) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.liquidityCreated) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._joinTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.amount0.isEmpty {
      try visitor.visitSingularStringField(value: self.amount0, fieldNumber: 1)
    }
    if !self.amount1.isEmpty {
      try visitor.visitSingularStringField(value: self.amount1, fieldNumber: 2)
    }
    if !self.liquidityCreated.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidityCreated, fieldNumber: 3)
    }
    try { if let v = self._joinTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse, rhs: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse) -> Bool {
    if lhs.amount0 != rhs.amount0 {return false}
    if lhs.amount1 != rhs.amount1 {return false}
    if lhs.liquidityCreated != rhs.liquidityCreated {return false}
    if lhs._joinTime != rhs._joinTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddToConcentratedLiquiditySuperfluidPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_id"),
    2: .same(proto: "sender"),
    3: .standard(proto: "token_desired0"),
    4: .standard(proto: "token_desired1"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tokenDesired0) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._tokenDesired1) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    try { if let v = self._tokenDesired0 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._tokenDesired1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, rhs: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition) -> Bool {
    if lhs.positionID != rhs.positionID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs._tokenDesired0 != rhs._tokenDesired0 {return false}
    if lhs._tokenDesired1 != rhs._tokenDesired1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddToConcentratedLiquiditySuperfluidPositionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_id"),
    2: .same(proto: "amount0"),
    3: .same(proto: "amount1"),
    5: .standard(proto: "new_liquidity"),
    4: .standard(proto: "lock_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.positionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount0) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount1) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.lockID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.newLiquidity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.positionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.positionID, fieldNumber: 1)
    }
    if !self.amount0.isEmpty {
      try visitor.visitSingularStringField(value: self.amount0, fieldNumber: 2)
    }
    if !self.amount1.isEmpty {
      try visitor.visitSingularStringField(value: self.amount1, fieldNumber: 3)
    }
    if self.lockID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lockID, fieldNumber: 4)
    }
    if !self.newLiquidity.isEmpty {
      try visitor.visitSingularStringField(value: self.newLiquidity, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse, rhs: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse) -> Bool {
    if lhs.positionID != rhs.positionID {return false}
    if lhs.amount0 != rhs.amount0 {return false}
    if lhs.amount1 != rhs.amount1 {return false}
    if lhs.newLiquidity != rhs.newLiquidity {return false}
    if lhs.lockID != rhs.lockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
