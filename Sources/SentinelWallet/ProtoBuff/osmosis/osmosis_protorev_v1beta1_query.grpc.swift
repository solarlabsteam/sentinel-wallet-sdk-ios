//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/protorev/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Osmosis_Protorev_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Protorev_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Osmosis_Protorev_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryParamsRequest, Osmosis_Protorev_V1beta1_QueryParamsResponse>

  func getProtoRevNumberOfTrades(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse>

  func getProtoRevProfitsByDenom(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse>

  func getProtoRevAllProfits(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse>

  func getProtoRevStatisticsByRoute(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse>

  func getProtoRevAllRouteStatistics(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse>

  func getProtoRevTokenPairArbRoutes(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse>

  func getProtoRevAdminAccount(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse>

  func getProtoRevDeveloperAccount(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse>

  func getProtoRevPoolWeights(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse>

  func getProtoRevMaxPoolPointsPerTx(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse>

  func getProtoRevMaxPoolPointsPerBlock(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse>

  func getProtoRevBaseDenoms(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse>

  func getProtoRevEnabled(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse>

  func getProtoRevPool(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse>
}

extension Osmosis_Protorev_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.protorev.v1beta1.Query"
  }

  /// Params queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Protorev_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryParamsRequest, Osmosis_Protorev_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
  /// has executed
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevNumberOfTrades.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevNumberOfTrades(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevNumberOfTrades.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevNumberOfTradesInterceptors() ?? []
    )
  }

  /// GetProtoRevProfitsByDenom queries the profits of the module by denom
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevProfitsByDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevProfitsByDenom(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevProfitsByDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevProfitsByDenomInterceptors() ?? []
    )
  }

  /// GetProtoRevAllProfits queries all of the profits from the module
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevAllProfits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevAllProfits(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllProfits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAllProfitsInterceptors() ?? []
    )
  }

  /// GetProtoRevStatisticsByRoute queries the number of arbitrages and profits
  /// that have been executed for a given route
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevStatisticsByRoute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevStatisticsByRoute(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevStatisticsByRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevStatisticsByRouteInterceptors() ?? []
    )
  }

  /// GetProtoRevAllRouteStatistics queries all of routes that the module has
  /// arbitraged against and the number of trades and profits that have been
  /// accumulated for each route
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevAllRouteStatistics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevAllRouteStatistics(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllRouteStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAllRouteStatisticsInterceptors() ?? []
    )
  }

  /// GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
  /// is currently arbitraging
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevTokenPairArbRoutes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevTokenPairArbRoutes(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevTokenPairArbRoutes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevTokenPairArbRoutesInterceptors() ?? []
    )
  }

  /// GetProtoRevAdminAccount queries the admin account of the module
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevAdminAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevAdminAccount(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAdminAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAdminAccountInterceptors() ?? []
    )
  }

  /// GetProtoRevDeveloperAccount queries the developer account of the module
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevDeveloperAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevDeveloperAccount(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevDeveloperAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevDeveloperAccountInterceptors() ?? []
    )
  }

  /// GetProtoRevPoolWeights queries the weights of each pool type currently
  /// being used by the module
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevPoolWeights.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevPoolWeights(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPoolWeights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevPoolWeightsInterceptors() ?? []
    )
  }

  /// GetProtoRevMaxPoolPointsPerTx queries the maximum number of pool points
  /// that can be consumed per transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevMaxPoolPointsPerTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevMaxPoolPointsPerTx(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerTxInterceptors() ?? []
    )
  }

  /// GetProtoRevMaxPoolPointsPerBlock queries the maximum number of pool points
  /// that can consumed per block
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevMaxPoolPointsPerBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevMaxPoolPointsPerBlock(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerBlockInterceptors() ?? []
    )
  }

  /// GetProtoRevBaseDenoms queries the base denoms that the module is currently
  /// utilizing for arbitrage
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevBaseDenoms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevBaseDenoms(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevBaseDenoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevBaseDenomsInterceptors() ?? []
    )
  }

  /// GetProtoRevEnabled queries whether the module is enabled or not
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevEnabled.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevEnabled(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevEnabledInterceptors() ?? []
    )
  }

  /// GetProtoRevPool queries the pool id used via the highest liquidity method
  /// for arbitrage route building given a pair of denominations
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProtoRevPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProtoRevPool(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevPoolInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Osmosis_Protorev_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Protorev_V1beta1_QueryNIOClient")
internal final class Osmosis_Protorev_V1beta1_QueryClient: Osmosis_Protorev_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.protorev.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Protorev_V1beta1_QueryNIOClient: Osmosis_Protorev_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.protorev.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Protorev_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryParamsRequest, Osmosis_Protorev_V1beta1_QueryParamsResponse>

  func makeGetProtoRevNumberOfTradesCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse>

  func makeGetProtoRevProfitsByDenomCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse>

  func makeGetProtoRevAllProfitsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse>

  func makeGetProtoRevStatisticsByRouteCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse>

  func makeGetProtoRevAllRouteStatisticsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse>

  func makeGetProtoRevTokenPairArbRoutesCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse>

  func makeGetProtoRevAdminAccountCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse>

  func makeGetProtoRevDeveloperAccountCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse>

  func makeGetProtoRevPoolWeightsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse>

  func makeGetProtoRevMaxPoolPointsPerTxCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse>

  func makeGetProtoRevMaxPoolPointsPerBlockCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse>

  func makeGetProtoRevBaseDenomsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse>

  func makeGetProtoRevEnabledCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse>

  func makeGetProtoRevPoolCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Protorev_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Protorev_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryParamsRequest, Osmosis_Protorev_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevNumberOfTradesCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevNumberOfTrades.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevNumberOfTradesInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevProfitsByDenomCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevProfitsByDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevProfitsByDenomInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevAllProfitsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllProfits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAllProfitsInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevStatisticsByRouteCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevStatisticsByRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevStatisticsByRouteInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevAllRouteStatisticsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllRouteStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAllRouteStatisticsInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevTokenPairArbRoutesCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevTokenPairArbRoutes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevTokenPairArbRoutesInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevAdminAccountCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAdminAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAdminAccountInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevDeveloperAccountCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevDeveloperAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevDeveloperAccountInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevPoolWeightsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPoolWeights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevPoolWeightsInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevMaxPoolPointsPerTxCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerTxInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevMaxPoolPointsPerBlockCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerBlockInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevBaseDenomsCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevBaseDenoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevBaseDenomsInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevEnabledCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevEnabledInterceptors() ?? []
    )
  }

  internal func makeGetProtoRevPoolCall(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevPoolInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Protorev_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Osmosis_Protorev_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func getProtoRevNumberOfTrades(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevNumberOfTrades.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevNumberOfTradesInterceptors() ?? []
    )
  }

  internal func getProtoRevProfitsByDenom(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevProfitsByDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevProfitsByDenomInterceptors() ?? []
    )
  }

  internal func getProtoRevAllProfits(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllProfits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAllProfitsInterceptors() ?? []
    )
  }

  internal func getProtoRevStatisticsByRoute(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevStatisticsByRoute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevStatisticsByRouteInterceptors() ?? []
    )
  }

  internal func getProtoRevAllRouteStatistics(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllRouteStatistics.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAllRouteStatisticsInterceptors() ?? []
    )
  }

  internal func getProtoRevTokenPairArbRoutes(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevTokenPairArbRoutes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevTokenPairArbRoutesInterceptors() ?? []
    )
  }

  internal func getProtoRevAdminAccount(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAdminAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevAdminAccountInterceptors() ?? []
    )
  }

  internal func getProtoRevDeveloperAccount(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevDeveloperAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevDeveloperAccountInterceptors() ?? []
    )
  }

  internal func getProtoRevPoolWeights(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPoolWeights.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevPoolWeightsInterceptors() ?? []
    )
  }

  internal func getProtoRevMaxPoolPointsPerTx(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerTxInterceptors() ?? []
    )
  }

  internal func getProtoRevMaxPoolPointsPerBlock(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerBlockInterceptors() ?? []
    )
  }

  internal func getProtoRevBaseDenoms(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevBaseDenoms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevBaseDenomsInterceptors() ?? []
    )
  }

  internal func getProtoRevEnabled(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevEnabledInterceptors() ?? []
    )
  }

  internal func getProtoRevPool(
    _ request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetProtoRevPoolInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Protorev_V1beta1_QueryAsyncClient: Osmosis_Protorev_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Protorev_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryParamsRequest, Osmosis_Protorev_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevNumberOfTrades'.
  func makeGetProtoRevNumberOfTradesInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevProfitsByDenom'.
  func makeGetProtoRevProfitsByDenomInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevAllProfits'.
  func makeGetProtoRevAllProfitsInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevStatisticsByRoute'.
  func makeGetProtoRevStatisticsByRouteInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevAllRouteStatistics'.
  func makeGetProtoRevAllRouteStatisticsInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevTokenPairArbRoutes'.
  func makeGetProtoRevTokenPairArbRoutesInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevAdminAccount'.
  func makeGetProtoRevAdminAccountInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevDeveloperAccount'.
  func makeGetProtoRevDeveloperAccountInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevPoolWeights'.
  func makeGetProtoRevPoolWeightsInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevMaxPoolPointsPerTx'.
  func makeGetProtoRevMaxPoolPointsPerTxInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevMaxPoolPointsPerBlock'.
  func makeGetProtoRevMaxPoolPointsPerBlockInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevBaseDenoms'.
  func makeGetProtoRevBaseDenomsInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevEnabled'.
  func makeGetProtoRevEnabledInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse>]

  /// - Returns: Interceptors to use when invoking 'getProtoRevPool'.
  func makeGetProtoRevPoolInterceptors() -> [ClientInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse>]
}

internal enum Osmosis_Protorev_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.protorev.v1beta1.Query",
    methods: [
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.params,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevNumberOfTrades,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevProfitsByDenom,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllProfits,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevStatisticsByRoute,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAllRouteStatistics,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevTokenPairArbRoutes,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevAdminAccount,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevDeveloperAccount,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPoolWeights,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerTx,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevMaxPoolPointsPerBlock,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevBaseDenoms,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevEnabled,
      Osmosis_Protorev_V1beta1_QueryClientMetadata.Methods.getProtoRevPool,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.protorev.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevNumberOfTrades = GRPCMethodDescriptor(
      name: "GetProtoRevNumberOfTrades",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevNumberOfTrades",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevProfitsByDenom = GRPCMethodDescriptor(
      name: "GetProtoRevProfitsByDenom",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevProfitsByDenom",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevAllProfits = GRPCMethodDescriptor(
      name: "GetProtoRevAllProfits",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllProfits",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevStatisticsByRoute = GRPCMethodDescriptor(
      name: "GetProtoRevStatisticsByRoute",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevStatisticsByRoute",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevAllRouteStatistics = GRPCMethodDescriptor(
      name: "GetProtoRevAllRouteStatistics",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllRouteStatistics",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevTokenPairArbRoutes = GRPCMethodDescriptor(
      name: "GetProtoRevTokenPairArbRoutes",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevTokenPairArbRoutes",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevAdminAccount = GRPCMethodDescriptor(
      name: "GetProtoRevAdminAccount",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevAdminAccount",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevDeveloperAccount = GRPCMethodDescriptor(
      name: "GetProtoRevDeveloperAccount",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevDeveloperAccount",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevPoolWeights = GRPCMethodDescriptor(
      name: "GetProtoRevPoolWeights",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevPoolWeights",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevMaxPoolPointsPerTx = GRPCMethodDescriptor(
      name: "GetProtoRevMaxPoolPointsPerTx",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerTx",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevMaxPoolPointsPerBlock = GRPCMethodDescriptor(
      name: "GetProtoRevMaxPoolPointsPerBlock",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerBlock",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevBaseDenoms = GRPCMethodDescriptor(
      name: "GetProtoRevBaseDenoms",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevBaseDenoms",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevEnabled = GRPCMethodDescriptor(
      name: "GetProtoRevEnabled",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevEnabled",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevPool = GRPCMethodDescriptor(
      name: "GetProtoRevPool",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevPool",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Protorev_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Protorev_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  func params(request: Osmosis_Protorev_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryParamsResponse>

  /// GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
  /// has executed
  func getProtoRevNumberOfTrades(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse>

  /// GetProtoRevProfitsByDenom queries the profits of the module by denom
  func getProtoRevProfitsByDenom(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse>

  /// GetProtoRevAllProfits queries all of the profits from the module
  func getProtoRevAllProfits(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse>

  /// GetProtoRevStatisticsByRoute queries the number of arbitrages and profits
  /// that have been executed for a given route
  func getProtoRevStatisticsByRoute(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse>

  /// GetProtoRevAllRouteStatistics queries all of routes that the module has
  /// arbitraged against and the number of trades and profits that have been
  /// accumulated for each route
  func getProtoRevAllRouteStatistics(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse>

  /// GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
  /// is currently arbitraging
  func getProtoRevTokenPairArbRoutes(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse>

  /// GetProtoRevAdminAccount queries the admin account of the module
  func getProtoRevAdminAccount(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse>

  /// GetProtoRevDeveloperAccount queries the developer account of the module
  func getProtoRevDeveloperAccount(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse>

  /// GetProtoRevPoolWeights queries the weights of each pool type currently
  /// being used by the module
  func getProtoRevPoolWeights(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse>

  /// GetProtoRevMaxPoolPointsPerTx queries the maximum number of pool points
  /// that can be consumed per transaction
  func getProtoRevMaxPoolPointsPerTx(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse>

  /// GetProtoRevMaxPoolPointsPerBlock queries the maximum number of pool points
  /// that can consumed per block
  func getProtoRevMaxPoolPointsPerBlock(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse>

  /// GetProtoRevBaseDenoms queries the base denoms that the module is currently
  /// utilizing for arbitrage
  func getProtoRevBaseDenoms(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse>

  /// GetProtoRevEnabled queries whether the module is enabled or not
  func getProtoRevEnabled(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse>

  /// GetProtoRevPool queries the pool id used via the highest liquidity method
  /// for arbitrage route building given a pair of denominations
  func getProtoRevPool(request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse>
}

extension Osmosis_Protorev_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Osmosis_Protorev_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "GetProtoRevNumberOfTrades":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevNumberOfTradesInterceptors() ?? [],
        userFunction: self.getProtoRevNumberOfTrades(request:context:)
      )

    case "GetProtoRevProfitsByDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevProfitsByDenomInterceptors() ?? [],
        userFunction: self.getProtoRevProfitsByDenom(request:context:)
      )

    case "GetProtoRevAllProfits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevAllProfitsInterceptors() ?? [],
        userFunction: self.getProtoRevAllProfits(request:context:)
      )

    case "GetProtoRevStatisticsByRoute":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevStatisticsByRouteInterceptors() ?? [],
        userFunction: self.getProtoRevStatisticsByRoute(request:context:)
      )

    case "GetProtoRevAllRouteStatistics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevAllRouteStatisticsInterceptors() ?? [],
        userFunction: self.getProtoRevAllRouteStatistics(request:context:)
      )

    case "GetProtoRevTokenPairArbRoutes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevTokenPairArbRoutesInterceptors() ?? [],
        userFunction: self.getProtoRevTokenPairArbRoutes(request:context:)
      )

    case "GetProtoRevAdminAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevAdminAccountInterceptors() ?? [],
        userFunction: self.getProtoRevAdminAccount(request:context:)
      )

    case "GetProtoRevDeveloperAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevDeveloperAccountInterceptors() ?? [],
        userFunction: self.getProtoRevDeveloperAccount(request:context:)
      )

    case "GetProtoRevPoolWeights":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevPoolWeightsInterceptors() ?? [],
        userFunction: self.getProtoRevPoolWeights(request:context:)
      )

    case "GetProtoRevMaxPoolPointsPerTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerTxInterceptors() ?? [],
        userFunction: self.getProtoRevMaxPoolPointsPerTx(request:context:)
      )

    case "GetProtoRevMaxPoolPointsPerBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerBlockInterceptors() ?? [],
        userFunction: self.getProtoRevMaxPoolPointsPerBlock(request:context:)
      )

    case "GetProtoRevBaseDenoms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevBaseDenomsInterceptors() ?? [],
        userFunction: self.getProtoRevBaseDenoms(request:context:)
      )

    case "GetProtoRevEnabled":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevEnabledInterceptors() ?? [],
        userFunction: self.getProtoRevEnabled(request:context:)
      )

    case "GetProtoRevPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevPoolInterceptors() ?? [],
        userFunction: self.getProtoRevPool(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Protorev_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Protorev_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of the module.
  @Sendable func params(
    request: Osmosis_Protorev_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryParamsResponse

  /// GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
  /// has executed
  @Sendable func getProtoRevNumberOfTrades(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse

  /// GetProtoRevProfitsByDenom queries the profits of the module by denom
  @Sendable func getProtoRevProfitsByDenom(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse

  /// GetProtoRevAllProfits queries all of the profits from the module
  @Sendable func getProtoRevAllProfits(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse

  /// GetProtoRevStatisticsByRoute queries the number of arbitrages and profits
  /// that have been executed for a given route
  @Sendable func getProtoRevStatisticsByRoute(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse

  /// GetProtoRevAllRouteStatistics queries all of routes that the module has
  /// arbitraged against and the number of trades and profits that have been
  /// accumulated for each route
  @Sendable func getProtoRevAllRouteStatistics(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse

  /// GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
  /// is currently arbitraging
  @Sendable func getProtoRevTokenPairArbRoutes(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse

  /// GetProtoRevAdminAccount queries the admin account of the module
  @Sendable func getProtoRevAdminAccount(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse

  /// GetProtoRevDeveloperAccount queries the developer account of the module
  @Sendable func getProtoRevDeveloperAccount(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse

  /// GetProtoRevPoolWeights queries the weights of each pool type currently
  /// being used by the module
  @Sendable func getProtoRevPoolWeights(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse

  /// GetProtoRevMaxPoolPointsPerTx queries the maximum number of pool points
  /// that can be consumed per transaction
  @Sendable func getProtoRevMaxPoolPointsPerTx(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse

  /// GetProtoRevMaxPoolPointsPerBlock queries the maximum number of pool points
  /// that can consumed per block
  @Sendable func getProtoRevMaxPoolPointsPerBlock(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse

  /// GetProtoRevBaseDenoms queries the base denoms that the module is currently
  /// utilizing for arbitrage
  @Sendable func getProtoRevBaseDenoms(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse

  /// GetProtoRevEnabled queries whether the module is enabled or not
  @Sendable func getProtoRevEnabled(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse

  /// GetProtoRevPool queries the pool id used via the highest liquidity method
  /// for arbitrage route building given a pair of denominations
  @Sendable func getProtoRevPool(
    request: Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Protorev_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Protorev_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Protorev_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Protorev_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "GetProtoRevNumberOfTrades":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevNumberOfTradesInterceptors() ?? [],
        wrapping: self.getProtoRevNumberOfTrades(request:context:)
      )

    case "GetProtoRevProfitsByDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevProfitsByDenomInterceptors() ?? [],
        wrapping: self.getProtoRevProfitsByDenom(request:context:)
      )

    case "GetProtoRevAllProfits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevAllProfitsInterceptors() ?? [],
        wrapping: self.getProtoRevAllProfits(request:context:)
      )

    case "GetProtoRevStatisticsByRoute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevStatisticsByRouteInterceptors() ?? [],
        wrapping: self.getProtoRevStatisticsByRoute(request:context:)
      )

    case "GetProtoRevAllRouteStatistics":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevAllRouteStatisticsInterceptors() ?? [],
        wrapping: self.getProtoRevAllRouteStatistics(request:context:)
      )

    case "GetProtoRevTokenPairArbRoutes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevTokenPairArbRoutesInterceptors() ?? [],
        wrapping: self.getProtoRevTokenPairArbRoutes(request:context:)
      )

    case "GetProtoRevAdminAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevAdminAccountInterceptors() ?? [],
        wrapping: self.getProtoRevAdminAccount(request:context:)
      )

    case "GetProtoRevDeveloperAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevDeveloperAccountInterceptors() ?? [],
        wrapping: self.getProtoRevDeveloperAccount(request:context:)
      )

    case "GetProtoRevPoolWeights":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevPoolWeightsInterceptors() ?? [],
        wrapping: self.getProtoRevPoolWeights(request:context:)
      )

    case "GetProtoRevMaxPoolPointsPerTx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerTxInterceptors() ?? [],
        wrapping: self.getProtoRevMaxPoolPointsPerTx(request:context:)
      )

    case "GetProtoRevMaxPoolPointsPerBlock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevMaxPoolPointsPerBlockInterceptors() ?? [],
        wrapping: self.getProtoRevMaxPoolPointsPerBlock(request:context:)
      )

    case "GetProtoRevBaseDenoms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevBaseDenomsInterceptors() ?? [],
        wrapping: self.getProtoRevBaseDenoms(request:context:)
      )

    case "GetProtoRevEnabled":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevEnabledInterceptors() ?? [],
        wrapping: self.getProtoRevEnabled(request:context:)
      )

    case "GetProtoRevPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse>(),
        interceptors: self.interceptors?.makeGetProtoRevPoolInterceptors() ?? [],
        wrapping: self.getProtoRevPool(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Protorev_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryParamsRequest, Osmosis_Protorev_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevNumberOfTrades'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevNumberOfTradesInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevNumberOfTradesResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevProfitsByDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevProfitsByDenomInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevProfitsByDenomResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevAllProfits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevAllProfitsInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllProfitsResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevStatisticsByRoute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevStatisticsByRouteInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevStatisticsByRouteResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevAllRouteStatistics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevAllRouteStatisticsInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAllRouteStatisticsResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevTokenPairArbRoutes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevTokenPairArbRoutesInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevTokenPairArbRoutesResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevAdminAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevAdminAccountInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevAdminAccountResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevDeveloperAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevDeveloperAccountInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevDeveloperAccountResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevPoolWeights'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevPoolWeightsInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolWeightsResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevMaxPoolPointsPerTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevMaxPoolPointsPerTxInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerTxResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevMaxPoolPointsPerBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevMaxPoolPointsPerBlockInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevMaxPoolPointsPerBlockResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevBaseDenoms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevBaseDenomsInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevBaseDenomsResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevEnabled'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevEnabledInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevEnabledResponse>]

  /// - Returns: Interceptors to use when handling 'getProtoRevPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetProtoRevPoolInterceptors() -> [ServerInterceptor<Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolRequest, Osmosis_Protorev_V1beta1_QueryGetProtoRevPoolResponse>]
}

internal enum Osmosis_Protorev_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "osmosis.protorev.v1beta1.Query",
    methods: [
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.params,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevNumberOfTrades,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevProfitsByDenom,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevAllProfits,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevStatisticsByRoute,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevAllRouteStatistics,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevTokenPairArbRoutes,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevAdminAccount,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevDeveloperAccount,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevPoolWeights,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevMaxPoolPointsPerTx,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevMaxPoolPointsPerBlock,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevBaseDenoms,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevEnabled,
      Osmosis_Protorev_V1beta1_QueryServerMetadata.Methods.getProtoRevPool,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/osmosis.protorev.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevNumberOfTrades = GRPCMethodDescriptor(
      name: "GetProtoRevNumberOfTrades",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevNumberOfTrades",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevProfitsByDenom = GRPCMethodDescriptor(
      name: "GetProtoRevProfitsByDenom",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevProfitsByDenom",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevAllProfits = GRPCMethodDescriptor(
      name: "GetProtoRevAllProfits",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllProfits",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevStatisticsByRoute = GRPCMethodDescriptor(
      name: "GetProtoRevStatisticsByRoute",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevStatisticsByRoute",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevAllRouteStatistics = GRPCMethodDescriptor(
      name: "GetProtoRevAllRouteStatistics",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllRouteStatistics",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevTokenPairArbRoutes = GRPCMethodDescriptor(
      name: "GetProtoRevTokenPairArbRoutes",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevTokenPairArbRoutes",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevAdminAccount = GRPCMethodDescriptor(
      name: "GetProtoRevAdminAccount",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevAdminAccount",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevDeveloperAccount = GRPCMethodDescriptor(
      name: "GetProtoRevDeveloperAccount",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevDeveloperAccount",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevPoolWeights = GRPCMethodDescriptor(
      name: "GetProtoRevPoolWeights",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevPoolWeights",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevMaxPoolPointsPerTx = GRPCMethodDescriptor(
      name: "GetProtoRevMaxPoolPointsPerTx",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerTx",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevMaxPoolPointsPerBlock = GRPCMethodDescriptor(
      name: "GetProtoRevMaxPoolPointsPerBlock",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerBlock",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevBaseDenoms = GRPCMethodDescriptor(
      name: "GetProtoRevBaseDenoms",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevBaseDenoms",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevEnabled = GRPCMethodDescriptor(
      name: "GetProtoRevEnabled",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevEnabled",
      type: GRPCCallType.unary
    )

    internal static let getProtoRevPool = GRPCMethodDescriptor(
      name: "GetProtoRevPool",
      path: "/osmosis.protorev.v1beta1.Query/GetProtoRevPool",
      type: GRPCCallType.unary
    )
  }
}
