// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/protorev/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgSetHotRoutes defines the Msg/SetHotRoutes request type.
struct Osmosis_Protorev_V1beta1_MsgSetHotRoutes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// admin is the account that is authorized to set the hot routes.
  var admin: String = String()

  /// hot_routes is the list of hot routes to set.
  var hotRoutes: [Osmosis_Protorev_V1beta1_TokenPairArbRoutes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetHotRoutesResponse defines the Msg/SetHotRoutes response type.
struct Osmosis_Protorev_V1beta1_MsgSetHotRoutesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetDeveloperAccount defines the Msg/SetDeveloperAccount request type.
struct Osmosis_Protorev_V1beta1_MsgSetDeveloperAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// admin is the account that is authorized to set the developer account.
  var admin: String = String()

  /// developer_account is the account that will receive a portion of the profits
  /// from the protorev module.
  var developerAccount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetDeveloperAccountResponse defines the Msg/SetDeveloperAccount response
/// type.
struct Osmosis_Protorev_V1beta1_MsgSetDeveloperAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetPoolWeights defines the Msg/SetPoolWeights request type.
struct Osmosis_Protorev_V1beta1_MsgSetPoolWeights {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// admin is the account that is authorized to set the pool weights.
  var admin: String = String()

  /// pool_weights is the list of pool weights to set.
  var poolWeights: Osmosis_Protorev_V1beta1_PoolWeights {
    get {return _poolWeights ?? Osmosis_Protorev_V1beta1_PoolWeights()}
    set {_poolWeights = newValue}
  }
  /// Returns true if `poolWeights` has been explicitly set.
  var hasPoolWeights: Bool {return self._poolWeights != nil}
  /// Clears the value of `poolWeights`. Subsequent reads from it will return its default value.
  mutating func clearPoolWeights() {self._poolWeights = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _poolWeights: Osmosis_Protorev_V1beta1_PoolWeights? = nil
}

/// MsgSetPoolWeightsResponse defines the Msg/SetPoolWeights response type.
struct Osmosis_Protorev_V1beta1_MsgSetPoolWeightsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetMaxPoolPointsPerTx defines the Msg/SetMaxPoolPointsPerTx request type.
struct Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// admin is the account that is authorized to set the max pool points per tx.
  var admin: String = String()

  /// max_pool_points_per_tx is the maximum number of pool points that can be
  /// consumed per transaction.
  var maxPoolPointsPerTx: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetMaxPoolPointsPerTxResponse defines the Msg/SetMaxPoolPointsPerTx
/// response type.
struct Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTxResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetMaxPoolPointsPerBlock defines the Msg/SetMaxPoolPointsPerBlock request
/// type.
struct Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// admin is the account that is authorized to set the max pool points per
  /// block.
  var admin: String = String()

  /// max_pool_points_per_block is the maximum number of pool points that can be
  /// consumed per block.
  var maxPoolPointsPerBlock: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetMaxPoolPointsPerBlockResponse defines the
/// Msg/SetMaxPoolPointsPerBlock response type.
struct Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetBaseDenoms defines the Msg/SetBaseDenoms request type.
struct Osmosis_Protorev_V1beta1_MsgSetBaseDenoms {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// admin is the account that is authorized to set the base denoms.
  var admin: String = String()

  /// base_denoms is the list of base denoms to set.
  var baseDenoms: [Osmosis_Protorev_V1beta1_BaseDenom] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetBaseDenomsResponse defines the Msg/SetBaseDenoms response type.
struct Osmosis_Protorev_V1beta1_MsgSetBaseDenomsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Protorev_V1beta1_MsgSetHotRoutes: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetHotRoutesResponse: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetDeveloperAccount: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetDeveloperAccountResponse: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetPoolWeights: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetPoolWeightsResponse: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTx: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTxResponse: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlock: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlockResponse: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetBaseDenoms: @unchecked Sendable {}
extension Osmosis_Protorev_V1beta1_MsgSetBaseDenomsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.protorev.v1beta1"

extension Osmosis_Protorev_V1beta1_MsgSetHotRoutes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetHotRoutes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .standard(proto: "hot_routes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.hotRoutes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if !self.hotRoutes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hotRoutes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetHotRoutes, rhs: Osmosis_Protorev_V1beta1_MsgSetHotRoutes) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.hotRoutes != rhs.hotRoutes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetHotRoutesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetHotRoutesResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetHotRoutesResponse, rhs: Osmosis_Protorev_V1beta1_MsgSetHotRoutesResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetDeveloperAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetDeveloperAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .standard(proto: "developer_account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.developerAccount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if !self.developerAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.developerAccount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetDeveloperAccount, rhs: Osmosis_Protorev_V1beta1_MsgSetDeveloperAccount) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.developerAccount != rhs.developerAccount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetDeveloperAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetDeveloperAccountResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetDeveloperAccountResponse, rhs: Osmosis_Protorev_V1beta1_MsgSetDeveloperAccountResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetPoolWeights: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetPoolWeights"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .standard(proto: "pool_weights"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._poolWeights) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    try { if let v = self._poolWeights {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetPoolWeights, rhs: Osmosis_Protorev_V1beta1_MsgSetPoolWeights) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs._poolWeights != rhs._poolWeights {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetPoolWeightsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetPoolWeightsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetPoolWeightsResponse, rhs: Osmosis_Protorev_V1beta1_MsgSetPoolWeightsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetMaxPoolPointsPerTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .standard(proto: "max_pool_points_per_tx"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.maxPoolPointsPerTx) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if self.maxPoolPointsPerTx != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxPoolPointsPerTx, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTx, rhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTx) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.maxPoolPointsPerTx != rhs.maxPoolPointsPerTx {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTxResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetMaxPoolPointsPerTxResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTxResponse, rhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerTxResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetMaxPoolPointsPerBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .standard(proto: "max_pool_points_per_block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.maxPoolPointsPerBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if self.maxPoolPointsPerBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxPoolPointsPerBlock, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlock, rhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlock) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.maxPoolPointsPerBlock != rhs.maxPoolPointsPerBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetMaxPoolPointsPerBlockResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlockResponse, rhs: Osmosis_Protorev_V1beta1_MsgSetMaxPoolPointsPerBlockResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetBaseDenoms: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetBaseDenoms"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .standard(proto: "base_denoms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.baseDenoms) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if !self.baseDenoms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.baseDenoms, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetBaseDenoms, rhs: Osmosis_Protorev_V1beta1_MsgSetBaseDenoms) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.baseDenoms != rhs.baseDenoms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Protorev_V1beta1_MsgSetBaseDenomsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetBaseDenomsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Protorev_V1beta1_MsgSetBaseDenomsResponse, rhs: Osmosis_Protorev_V1beta1_MsgSetBaseDenomsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
