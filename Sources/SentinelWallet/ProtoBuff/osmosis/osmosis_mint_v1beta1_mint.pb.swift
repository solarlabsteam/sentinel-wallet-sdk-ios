// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/mint/v1beta1/mint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Minter represents the minting state.
struct Osmosis_Mint_V1beta1_Minter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// epoch_provisions represent rewards for the current epoch.
  var epochProvisions: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// WeightedAddress represents an address with a weight assigned to it.
/// The weight is used to determine the proportion of the total minted
/// tokens to be minted to the address.
struct Osmosis_Mint_V1beta1_WeightedAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var weight: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DistributionProportions defines the distribution proportions of the minted
/// denom. In other words, defines which stakeholders will receive the minted
/// denoms and how much.
struct Osmosis_Mint_V1beta1_DistributionProportions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// staking defines the proportion of the minted mint_denom that is to be
  /// allocated as staking rewards.
  var staking: String = String()

  /// pool_incentives defines the proportion of the minted mint_denom that is
  /// to be allocated as pool incentives.
  var poolIncentives: String = String()

  /// developer_rewards defines the proportion of the minted mint_denom that is
  /// to be allocated to developer rewards address.
  var developerRewards: String = String()

  /// community_pool defines the proportion of the minted mint_denom that is
  /// to be allocated to the community pool.
  var communityPool: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Params holds parameters for the x/mint module.
struct Osmosis_Mint_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// mint_denom is the denom of the coin to mint.
  var mintDenom: String = String()

  /// genesis_epoch_provisions epoch provisions from the first epoch.
  var genesisEpochProvisions: String = String()

  /// epoch_identifier mint epoch identifier e.g. (day, week).
  var epochIdentifier: String = String()

  /// reduction_period_in_epochs the number of epochs it takes
  /// to reduce the rewards.
  var reductionPeriodInEpochs: Int64 = 0

  /// reduction_factor is the reduction multiplier to execute
  /// at the end of each period set by reduction_period_in_epochs.
  var reductionFactor: String = String()

  /// distribution_proportions defines the distribution proportions of the minted
  /// denom. In other words, defines which stakeholders will receive the minted
  /// denoms and how much.
  var distributionProportions: Osmosis_Mint_V1beta1_DistributionProportions {
    get {return _distributionProportions ?? Osmosis_Mint_V1beta1_DistributionProportions()}
    set {_distributionProportions = newValue}
  }
  /// Returns true if `distributionProportions` has been explicitly set.
  var hasDistributionProportions: Bool {return self._distributionProportions != nil}
  /// Clears the value of `distributionProportions`. Subsequent reads from it will return its default value.
  mutating func clearDistributionProportions() {self._distributionProportions = nil}

  /// weighted_developer_rewards_receivers is the address to receive developer
  /// rewards with weights assignedt to each address. The final amount that each
  /// address receives is: epoch_provisions *
  /// distribution_proportions.developer_rewards * Address's Weight.
  var weightedDeveloperRewardsReceivers: [Osmosis_Mint_V1beta1_WeightedAddress] = []

  /// minting_rewards_distribution_start_epoch start epoch to distribute minting
  /// rewards
  var mintingRewardsDistributionStartEpoch: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _distributionProportions: Osmosis_Mint_V1beta1_DistributionProportions? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Mint_V1beta1_Minter: @unchecked Sendable {}
extension Osmosis_Mint_V1beta1_WeightedAddress: @unchecked Sendable {}
extension Osmosis_Mint_V1beta1_DistributionProportions: @unchecked Sendable {}
extension Osmosis_Mint_V1beta1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.mint.v1beta1"

extension Osmosis_Mint_V1beta1_Minter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Minter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "epoch_provisions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.epochProvisions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.epochProvisions.isEmpty {
      try visitor.visitSingularStringField(value: self.epochProvisions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Mint_V1beta1_Minter, rhs: Osmosis_Mint_V1beta1_Minter) -> Bool {
    if lhs.epochProvisions != rhs.epochProvisions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Mint_V1beta1_WeightedAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeightedAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "weight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.weight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.weight.isEmpty {
      try visitor.visitSingularStringField(value: self.weight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Mint_V1beta1_WeightedAddress, rhs: Osmosis_Mint_V1beta1_WeightedAddress) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Mint_V1beta1_DistributionProportions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DistributionProportions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "staking"),
    2: .standard(proto: "pool_incentives"),
    3: .standard(proto: "developer_rewards"),
    4: .standard(proto: "community_pool"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.staking) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.poolIncentives) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.developerRewards) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.communityPool) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.staking.isEmpty {
      try visitor.visitSingularStringField(value: self.staking, fieldNumber: 1)
    }
    if !self.poolIncentives.isEmpty {
      try visitor.visitSingularStringField(value: self.poolIncentives, fieldNumber: 2)
    }
    if !self.developerRewards.isEmpty {
      try visitor.visitSingularStringField(value: self.developerRewards, fieldNumber: 3)
    }
    if !self.communityPool.isEmpty {
      try visitor.visitSingularStringField(value: self.communityPool, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Mint_V1beta1_DistributionProportions, rhs: Osmosis_Mint_V1beta1_DistributionProportions) -> Bool {
    if lhs.staking != rhs.staking {return false}
    if lhs.poolIncentives != rhs.poolIncentives {return false}
    if lhs.developerRewards != rhs.developerRewards {return false}
    if lhs.communityPool != rhs.communityPool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Mint_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mint_denom"),
    2: .standard(proto: "genesis_epoch_provisions"),
    3: .standard(proto: "epoch_identifier"),
    4: .standard(proto: "reduction_period_in_epochs"),
    5: .standard(proto: "reduction_factor"),
    6: .standard(proto: "distribution_proportions"),
    7: .standard(proto: "weighted_developer_rewards_receivers"),
    8: .standard(proto: "minting_rewards_distribution_start_epoch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mintDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.genesisEpochProvisions) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.epochIdentifier) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.reductionPeriodInEpochs) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.reductionFactor) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._distributionProportions) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.weightedDeveloperRewardsReceivers) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.mintingRewardsDistributionStartEpoch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.mintDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.mintDenom, fieldNumber: 1)
    }
    if !self.genesisEpochProvisions.isEmpty {
      try visitor.visitSingularStringField(value: self.genesisEpochProvisions, fieldNumber: 2)
    }
    if !self.epochIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.epochIdentifier, fieldNumber: 3)
    }
    if self.reductionPeriodInEpochs != 0 {
      try visitor.visitSingularInt64Field(value: self.reductionPeriodInEpochs, fieldNumber: 4)
    }
    if !self.reductionFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.reductionFactor, fieldNumber: 5)
    }
    try { if let v = self._distributionProportions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.weightedDeveloperRewardsReceivers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.weightedDeveloperRewardsReceivers, fieldNumber: 7)
    }
    if self.mintingRewardsDistributionStartEpoch != 0 {
      try visitor.visitSingularInt64Field(value: self.mintingRewardsDistributionStartEpoch, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Mint_V1beta1_Params, rhs: Osmosis_Mint_V1beta1_Params) -> Bool {
    if lhs.mintDenom != rhs.mintDenom {return false}
    if lhs.genesisEpochProvisions != rhs.genesisEpochProvisions {return false}
    if lhs.epochIdentifier != rhs.epochIdentifier {return false}
    if lhs.reductionPeriodInEpochs != rhs.reductionPeriodInEpochs {return false}
    if lhs.reductionFactor != rhs.reductionFactor {return false}
    if lhs._distributionProportions != rhs._distributionProportions {return false}
    if lhs.weightedDeveloperRewardsReceivers != rhs.weightedDeveloperRewardsReceivers {return false}
    if lhs.mintingRewardsDistributionStartEpoch != rhs.mintingRewardsDistributionStartEpoch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
