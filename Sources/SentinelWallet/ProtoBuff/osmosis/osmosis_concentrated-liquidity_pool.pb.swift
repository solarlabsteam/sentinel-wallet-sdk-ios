// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/concentrated-liquidity/pool.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Osmosis_Concentratedliquidity_V1beta1_Pool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool's address holding all liquidity tokens.
  var address: String = String()

  /// address holding the incentives liquidity.
  var incentivesAddress: String = String()

  /// address holding spread rewards from swaps.
  var spreadRewardsAddress: String = String()

  var id: UInt64 = 0

  /// Amount of total liquidity
  var currentTickLiquidity: String = String()

  var token0: String = String()

  var token1: String = String()

  var currentSqrtPrice: String = String()

  var currentTick: Int64 = 0

  /// tick_spacing must be one of the authorized_tick_spacing values set in the
  /// concentrated-liquidity parameters
  var tickSpacing: UInt64 = 0

  var exponentAtPriceOne: Int64 = 0

  /// spread_factor is the ratio that is charged on the amount of token in.
  var spreadFactor: String = String()

  /// last_liquidity_update is the last time either the pool liquidity or the
  /// active tick changed
  var lastLiquidityUpdate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastLiquidityUpdate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastLiquidityUpdate = newValue}
  }
  /// Returns true if `lastLiquidityUpdate` has been explicitly set.
  var hasLastLiquidityUpdate: Bool {return self._lastLiquidityUpdate != nil}
  /// Clears the value of `lastLiquidityUpdate`. Subsequent reads from it will return its default value.
  mutating func clearLastLiquidityUpdate() {self._lastLiquidityUpdate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastLiquidityUpdate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Concentratedliquidity_V1beta1_Pool: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.concentratedliquidity.v1beta1"

extension Osmosis_Concentratedliquidity_V1beta1_Pool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "incentives_address"),
    3: .standard(proto: "spread_rewards_address"),
    4: .same(proto: "id"),
    5: .standard(proto: "current_tick_liquidity"),
    6: .same(proto: "token0"),
    7: .same(proto: "token1"),
    8: .standard(proto: "current_sqrt_price"),
    9: .standard(proto: "current_tick"),
    10: .standard(proto: "tick_spacing"),
    11: .standard(proto: "exponent_at_price_one"),
    12: .standard(proto: "spread_factor"),
    13: .standard(proto: "last_liquidity_update"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.incentivesAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.spreadRewardsAddress) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.currentTickLiquidity) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.token0) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.token1) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.currentSqrtPrice) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.currentTick) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.tickSpacing) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.exponentAtPriceOne) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.spreadFactor) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._lastLiquidityUpdate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.incentivesAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.incentivesAddress, fieldNumber: 2)
    }
    if !self.spreadRewardsAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.spreadRewardsAddress, fieldNumber: 3)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 4)
    }
    if !self.currentTickLiquidity.isEmpty {
      try visitor.visitSingularStringField(value: self.currentTickLiquidity, fieldNumber: 5)
    }
    if !self.token0.isEmpty {
      try visitor.visitSingularStringField(value: self.token0, fieldNumber: 6)
    }
    if !self.token1.isEmpty {
      try visitor.visitSingularStringField(value: self.token1, fieldNumber: 7)
    }
    if !self.currentSqrtPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.currentSqrtPrice, fieldNumber: 8)
    }
    if self.currentTick != 0 {
      try visitor.visitSingularInt64Field(value: self.currentTick, fieldNumber: 9)
    }
    if self.tickSpacing != 0 {
      try visitor.visitSingularUInt64Field(value: self.tickSpacing, fieldNumber: 10)
    }
    if self.exponentAtPriceOne != 0 {
      try visitor.visitSingularInt64Field(value: self.exponentAtPriceOne, fieldNumber: 11)
    }
    if !self.spreadFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.spreadFactor, fieldNumber: 12)
    }
    try { if let v = self._lastLiquidityUpdate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_Pool, rhs: Osmosis_Concentratedliquidity_V1beta1_Pool) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.incentivesAddress != rhs.incentivesAddress {return false}
    if lhs.spreadRewardsAddress != rhs.spreadRewardsAddress {return false}
    if lhs.id != rhs.id {return false}
    if lhs.currentTickLiquidity != rhs.currentTickLiquidity {return false}
    if lhs.token0 != rhs.token0 {return false}
    if lhs.token1 != rhs.token1 {return false}
    if lhs.currentSqrtPrice != rhs.currentSqrtPrice {return false}
    if lhs.currentTick != rhs.currentTick {return false}
    if lhs.tickSpacing != rhs.tickSpacing {return false}
    if lhs.exponentAtPriceOne != rhs.exponentAtPriceOne {return false}
    if lhs.spreadFactor != rhs.spreadFactor {return false}
    if lhs._lastLiquidityUpdate != rhs._lastLiquidityUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
