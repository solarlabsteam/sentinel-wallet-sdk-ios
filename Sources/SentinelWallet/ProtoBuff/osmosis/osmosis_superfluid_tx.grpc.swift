//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/superfluid/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Osmosis_Superfluid_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Superfluid_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol? { get }

  func superfluidDelegate(
    _ request: Osmosis_Superfluid_MsgSuperfluidDelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidDelegate, Osmosis_Superfluid_MsgSuperfluidDelegateResponse>

  func superfluidUndelegate(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegate, Osmosis_Superfluid_MsgSuperfluidUndelegateResponse>

  func superfluidUnbondLock(
    _ request: Osmosis_Superfluid_MsgSuperfluidUnbondLock,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidUnbondLock, Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse>

  func superfluidUndelegateAndUnbondLock(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse>

  func lockAndSuperfluidDelegate(
    _ request: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse>

  func createFullRangePositionAndSuperfluidDelegate(
    _ request: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse>

  func unPoolWhitelistedPool(
    _ request: Osmosis_Superfluid_MsgUnPoolWhitelistedPool,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgUnPoolWhitelistedPool, Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse>

  func unlockAndMigrateSharesToFullRangeConcentratedPosition(
    _ request: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>

  func addToConcentratedLiquiditySuperfluidPosition(
    _ request: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse>
}

extension Osmosis_Superfluid_MsgClientProtocol {
  internal var serviceName: String {
    return "osmosis.superfluid.Msg"
  }

  /// Execute superfluid delegation for a lockup
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidDelegate(
    _ request: Osmosis_Superfluid_MsgSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidDelegate, Osmosis_Superfluid_MsgSuperfluidDelegateResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegateInterceptors() ?? []
    )
  }

  /// Execute superfluid undelegation for a lockup
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidUndelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidUndelegate(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegate, Osmosis_Superfluid_MsgSuperfluidUndelegateResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegateInterceptors() ?? []
    )
  }

  /// For a given lock that is being superfluidly undelegated,
  /// also unbond the underlying lock.
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidUnbondLock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidUnbondLock(
    _ request: Osmosis_Superfluid_MsgSuperfluidUnbondLock,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidUnbondLock, Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUnbondLock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUnbondLockInterceptors() ?? []
    )
  }

  /// Superfluid undelegate and unbond partial amount of the underlying lock.
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidUndelegateAndUnbondLock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidUndelegateAndUnbondLock(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegateAndUnbondLock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegateAndUnbondLockInterceptors() ?? []
    )
  }

  /// Execute lockup lock and superfluid delegation in a single msg
  ///
  /// - Parameters:
  ///   - request: Request to send to LockAndSuperfluidDelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lockAndSuperfluidDelegate(
    _ request: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.lockAndSuperfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockAndSuperfluidDelegateInterceptors() ?? []
    )
  }

  /// Unary call to CreateFullRangePositionAndSuperfluidDelegate
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFullRangePositionAndSuperfluidDelegate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFullRangePositionAndSuperfluidDelegate(
    _ request: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.createFullRangePositionAndSuperfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFullRangePositionAndSuperfluidDelegateInterceptors() ?? []
    )
  }

  /// Unary call to UnPoolWhitelistedPool
  ///
  /// - Parameters:
  ///   - request: Request to send to UnPoolWhitelistedPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unPoolWhitelistedPool(
    _ request: Osmosis_Superfluid_MsgUnPoolWhitelistedPool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgUnPoolWhitelistedPool, Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.unPoolWhitelistedPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnPoolWhitelistedPoolInterceptors() ?? []
    )
  }

  /// Unary call to UnlockAndMigrateSharesToFullRangeConcentratedPosition
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlockAndMigrateSharesToFullRangeConcentratedPosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unlockAndMigrateSharesToFullRangeConcentratedPosition(
    _ request: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.unlockAndMigrateSharesToFullRangeConcentratedPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlockAndMigrateSharesToFullRangeConcentratedPositionInterceptors() ?? []
    )
  }

  /// Unary call to AddToConcentratedLiquiditySuperfluidPosition
  ///
  /// - Parameters:
  ///   - request: Request to send to AddToConcentratedLiquiditySuperfluidPosition.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addToConcentratedLiquiditySuperfluidPosition(
    _ request: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse> {
    return self.makeUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.addToConcentratedLiquiditySuperfluidPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToConcentratedLiquiditySuperfluidPositionInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Osmosis_Superfluid_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Superfluid_MsgNIOClient")
internal final class Osmosis_Superfluid_MsgClient: Osmosis_Superfluid_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.superfluid.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Superfluid_MsgNIOClient: Osmosis_Superfluid_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.superfluid.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Superfluid_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol? { get }

  func makeSuperfluidDelegateCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidDelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidDelegate, Osmosis_Superfluid_MsgSuperfluidDelegateResponse>

  func makeSuperfluidUndelegateCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegate, Osmosis_Superfluid_MsgSuperfluidUndelegateResponse>

  func makeSuperfluidUnbondLockCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidUnbondLock,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidUnbondLock, Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse>

  func makeSuperfluidUndelegateAndUnbondLockCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse>

  func makeLockAndSuperfluidDelegateCall(
    _ request: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse>

  func makeCreateFullRangePositionAndSuperfluidDelegateCall(
    _ request: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse>

  func makeUnPoolWhitelistedPoolCall(
    _ request: Osmosis_Superfluid_MsgUnPoolWhitelistedPool,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgUnPoolWhitelistedPool, Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse>

  func makeUnlockAndMigrateSharesToFullRangeConcentratedPositionCall(
    _ request: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>

  func makeAddToConcentratedLiquiditySuperfluidPositionCall(
    _ request: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Superfluid_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSuperfluidDelegateCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidDelegate, Osmosis_Superfluid_MsgSuperfluidDelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegateInterceptors() ?? []
    )
  }

  internal func makeSuperfluidUndelegateCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegate, Osmosis_Superfluid_MsgSuperfluidUndelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegateInterceptors() ?? []
    )
  }

  internal func makeSuperfluidUnbondLockCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidUnbondLock,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidUnbondLock, Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUnbondLock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUnbondLockInterceptors() ?? []
    )
  }

  internal func makeSuperfluidUndelegateAndUnbondLockCall(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegateAndUnbondLock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegateAndUnbondLockInterceptors() ?? []
    )
  }

  internal func makeLockAndSuperfluidDelegateCall(
    _ request: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.lockAndSuperfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockAndSuperfluidDelegateInterceptors() ?? []
    )
  }

  internal func makeCreateFullRangePositionAndSuperfluidDelegateCall(
    _ request: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.createFullRangePositionAndSuperfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFullRangePositionAndSuperfluidDelegateInterceptors() ?? []
    )
  }

  internal func makeUnPoolWhitelistedPoolCall(
    _ request: Osmosis_Superfluid_MsgUnPoolWhitelistedPool,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgUnPoolWhitelistedPool, Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.unPoolWhitelistedPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnPoolWhitelistedPoolInterceptors() ?? []
    )
  }

  internal func makeUnlockAndMigrateSharesToFullRangeConcentratedPositionCall(
    _ request: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.unlockAndMigrateSharesToFullRangeConcentratedPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlockAndMigrateSharesToFullRangeConcentratedPositionInterceptors() ?? []
    )
  }

  internal func makeAddToConcentratedLiquiditySuperfluidPositionCall(
    _ request: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse> {
    return self.makeAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.addToConcentratedLiquiditySuperfluidPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToConcentratedLiquiditySuperfluidPositionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_MsgAsyncClientProtocol {
  internal func superfluidDelegate(
    _ request: Osmosis_Superfluid_MsgSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidDelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegateInterceptors() ?? []
    )
  }

  internal func superfluidUndelegate(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidUndelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegateInterceptors() ?? []
    )
  }

  internal func superfluidUnbondLock(
    _ request: Osmosis_Superfluid_MsgSuperfluidUnbondLock,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUnbondLock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUnbondLockInterceptors() ?? []
    )
  }

  internal func superfluidUndelegateAndUnbondLock(
    _ request: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegateAndUnbondLock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegateAndUnbondLockInterceptors() ?? []
    )
  }

  internal func lockAndSuperfluidDelegate(
    _ request: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.lockAndSuperfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockAndSuperfluidDelegateInterceptors() ?? []
    )
  }

  internal func createFullRangePositionAndSuperfluidDelegate(
    _ request: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.createFullRangePositionAndSuperfluidDelegate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFullRangePositionAndSuperfluidDelegateInterceptors() ?? []
    )
  }

  internal func unPoolWhitelistedPool(
    _ request: Osmosis_Superfluid_MsgUnPoolWhitelistedPool,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.unPoolWhitelistedPool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnPoolWhitelistedPoolInterceptors() ?? []
    )
  }

  internal func unlockAndMigrateSharesToFullRangeConcentratedPosition(
    _ request: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.unlockAndMigrateSharesToFullRangeConcentratedPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnlockAndMigrateSharesToFullRangeConcentratedPositionInterceptors() ?? []
    )
  }

  internal func addToConcentratedLiquiditySuperfluidPosition(
    _ request: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition,
    callOptions: CallOptions? = nil
  ) async throws -> Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse {
    return try await self.performAsyncUnaryCall(
      path: Osmosis_Superfluid_MsgClientMetadata.Methods.addToConcentratedLiquiditySuperfluidPosition.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddToConcentratedLiquiditySuperfluidPositionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Superfluid_MsgAsyncClient: Osmosis_Superfluid_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Superfluid_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'superfluidDelegate'.
  func makeSuperfluidDelegateInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgSuperfluidDelegate, Osmosis_Superfluid_MsgSuperfluidDelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidUndelegate'.
  func makeSuperfluidUndelegateInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgSuperfluidUndelegate, Osmosis_Superfluid_MsgSuperfluidUndelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidUnbondLock'.
  func makeSuperfluidUnbondLockInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgSuperfluidUnbondLock, Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidUndelegateAndUnbondLock'.
  func makeSuperfluidUndelegateAndUnbondLockInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse>]

  /// - Returns: Interceptors to use when invoking 'lockAndSuperfluidDelegate'.
  func makeLockAndSuperfluidDelegateInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'createFullRangePositionAndSuperfluidDelegate'.
  func makeCreateFullRangePositionAndSuperfluidDelegateInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse>]

  /// - Returns: Interceptors to use when invoking 'unPoolWhitelistedPool'.
  func makeUnPoolWhitelistedPoolInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgUnPoolWhitelistedPool, Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'unlockAndMigrateSharesToFullRangeConcentratedPosition'.
  func makeUnlockAndMigrateSharesToFullRangeConcentratedPositionInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>]

  /// - Returns: Interceptors to use when invoking 'addToConcentratedLiquiditySuperfluidPosition'.
  func makeAddToConcentratedLiquiditySuperfluidPositionInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse>]
}

internal enum Osmosis_Superfluid_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.superfluid.Msg",
    methods: [
      Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidDelegate,
      Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegate,
      Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUnbondLock,
      Osmosis_Superfluid_MsgClientMetadata.Methods.superfluidUndelegateAndUnbondLock,
      Osmosis_Superfluid_MsgClientMetadata.Methods.lockAndSuperfluidDelegate,
      Osmosis_Superfluid_MsgClientMetadata.Methods.createFullRangePositionAndSuperfluidDelegate,
      Osmosis_Superfluid_MsgClientMetadata.Methods.unPoolWhitelistedPool,
      Osmosis_Superfluid_MsgClientMetadata.Methods.unlockAndMigrateSharesToFullRangeConcentratedPosition,
      Osmosis_Superfluid_MsgClientMetadata.Methods.addToConcentratedLiquiditySuperfluidPosition,
    ]
  )

  internal enum Methods {
    internal static let superfluidDelegate = GRPCMethodDescriptor(
      name: "SuperfluidDelegate",
      path: "/osmosis.superfluid.Msg/SuperfluidDelegate",
      type: GRPCCallType.unary
    )

    internal static let superfluidUndelegate = GRPCMethodDescriptor(
      name: "SuperfluidUndelegate",
      path: "/osmosis.superfluid.Msg/SuperfluidUndelegate",
      type: GRPCCallType.unary
    )

    internal static let superfluidUnbondLock = GRPCMethodDescriptor(
      name: "SuperfluidUnbondLock",
      path: "/osmosis.superfluid.Msg/SuperfluidUnbondLock",
      type: GRPCCallType.unary
    )

    internal static let superfluidUndelegateAndUnbondLock = GRPCMethodDescriptor(
      name: "SuperfluidUndelegateAndUnbondLock",
      path: "/osmosis.superfluid.Msg/SuperfluidUndelegateAndUnbondLock",
      type: GRPCCallType.unary
    )

    internal static let lockAndSuperfluidDelegate = GRPCMethodDescriptor(
      name: "LockAndSuperfluidDelegate",
      path: "/osmosis.superfluid.Msg/LockAndSuperfluidDelegate",
      type: GRPCCallType.unary
    )

    internal static let createFullRangePositionAndSuperfluidDelegate = GRPCMethodDescriptor(
      name: "CreateFullRangePositionAndSuperfluidDelegate",
      path: "/osmosis.superfluid.Msg/CreateFullRangePositionAndSuperfluidDelegate",
      type: GRPCCallType.unary
    )

    internal static let unPoolWhitelistedPool = GRPCMethodDescriptor(
      name: "UnPoolWhitelistedPool",
      path: "/osmosis.superfluid.Msg/UnPoolWhitelistedPool",
      type: GRPCCallType.unary
    )

    internal static let unlockAndMigrateSharesToFullRangeConcentratedPosition = GRPCMethodDescriptor(
      name: "UnlockAndMigrateSharesToFullRangeConcentratedPosition",
      path: "/osmosis.superfluid.Msg/UnlockAndMigrateSharesToFullRangeConcentratedPosition",
      type: GRPCCallType.unary
    )

    internal static let addToConcentratedLiquiditySuperfluidPosition = GRPCMethodDescriptor(
      name: "AddToConcentratedLiquiditySuperfluidPosition",
      path: "/osmosis.superfluid.Msg/AddToConcentratedLiquiditySuperfluidPosition",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Superfluid_MsgProvider: CallHandlerProvider {
  var interceptors: Osmosis_Superfluid_MsgServerInterceptorFactoryProtocol? { get }

  /// Execute superfluid delegation for a lockup
  func superfluidDelegate(request: Osmosis_Superfluid_MsgSuperfluidDelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgSuperfluidDelegateResponse>

  /// Execute superfluid undelegation for a lockup
  func superfluidUndelegate(request: Osmosis_Superfluid_MsgSuperfluidUndelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgSuperfluidUndelegateResponse>

  /// For a given lock that is being superfluidly undelegated,
  /// also unbond the underlying lock.
  func superfluidUnbondLock(request: Osmosis_Superfluid_MsgSuperfluidUnbondLock, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse>

  /// Superfluid undelegate and unbond partial amount of the underlying lock.
  func superfluidUndelegateAndUnbondLock(request: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse>

  /// Execute lockup lock and superfluid delegation in a single msg
  func lockAndSuperfluidDelegate(request: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse>

  func createFullRangePositionAndSuperfluidDelegate(request: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse>

  func unPoolWhitelistedPool(request: Osmosis_Superfluid_MsgUnPoolWhitelistedPool, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse>

  func unlockAndMigrateSharesToFullRangeConcentratedPosition(request: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>

  func addToConcentratedLiquiditySuperfluidPosition(request: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse>
}

extension Osmosis_Superfluid_MsgProvider {
  internal var serviceName: Substring {
    return Osmosis_Superfluid_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SuperfluidDelegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidDelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidDelegateResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegateInterceptors() ?? [],
        userFunction: self.superfluidDelegate(request:context:)
      )

    case "SuperfluidUndelegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidUndelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidUndelegateResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUndelegateInterceptors() ?? [],
        userFunction: self.superfluidUndelegate(request:context:)
      )

    case "SuperfluidUnbondLock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidUnbondLock>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUnbondLockInterceptors() ?? [],
        userFunction: self.superfluidUnbondLock(request:context:)
      )

    case "SuperfluidUndelegateAndUnbondLock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUndelegateAndUnbondLockInterceptors() ?? [],
        userFunction: self.superfluidUndelegateAndUnbondLock(request:context:)
      )

    case "LockAndSuperfluidDelegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse>(),
        interceptors: self.interceptors?.makeLockAndSuperfluidDelegateInterceptors() ?? [],
        userFunction: self.lockAndSuperfluidDelegate(request:context:)
      )

    case "CreateFullRangePositionAndSuperfluidDelegate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse>(),
        interceptors: self.interceptors?.makeCreateFullRangePositionAndSuperfluidDelegateInterceptors() ?? [],
        userFunction: self.createFullRangePositionAndSuperfluidDelegate(request:context:)
      )

    case "UnPoolWhitelistedPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgUnPoolWhitelistedPool>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse>(),
        interceptors: self.interceptors?.makeUnPoolWhitelistedPoolInterceptors() ?? [],
        userFunction: self.unPoolWhitelistedPool(request:context:)
      )

    case "UnlockAndMigrateSharesToFullRangeConcentratedPosition":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>(),
        interceptors: self.interceptors?.makeUnlockAndMigrateSharesToFullRangeConcentratedPositionInterceptors() ?? [],
        userFunction: self.unlockAndMigrateSharesToFullRangeConcentratedPosition(request:context:)
      )

    case "AddToConcentratedLiquiditySuperfluidPosition":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse>(),
        interceptors: self.interceptors?.makeAddToConcentratedLiquiditySuperfluidPositionInterceptors() ?? [],
        userFunction: self.addToConcentratedLiquiditySuperfluidPosition(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Superfluid_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Superfluid_MsgServerInterceptorFactoryProtocol? { get }

  /// Execute superfluid delegation for a lockup
  @Sendable func superfluidDelegate(
    request: Osmosis_Superfluid_MsgSuperfluidDelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidDelegateResponse

  /// Execute superfluid undelegation for a lockup
  @Sendable func superfluidUndelegate(
    request: Osmosis_Superfluid_MsgSuperfluidUndelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidUndelegateResponse

  /// For a given lock that is being superfluidly undelegated,
  /// also unbond the underlying lock.
  @Sendable func superfluidUnbondLock(
    request: Osmosis_Superfluid_MsgSuperfluidUnbondLock,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse

  /// Superfluid undelegate and unbond partial amount of the underlying lock.
  @Sendable func superfluidUndelegateAndUnbondLock(
    request: Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse

  /// Execute lockup lock and superfluid delegation in a single msg
  @Sendable func lockAndSuperfluidDelegate(
    request: Osmosis_Superfluid_MsgLockAndSuperfluidDelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse

  @Sendable func createFullRangePositionAndSuperfluidDelegate(
    request: Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse

  @Sendable func unPoolWhitelistedPool(
    request: Osmosis_Superfluid_MsgUnPoolWhitelistedPool,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse

  @Sendable func unlockAndMigrateSharesToFullRangeConcentratedPosition(
    request: Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse

  @Sendable func addToConcentratedLiquiditySuperfluidPosition(
    request: Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition,
    context: GRPCAsyncServerCallContext
  ) async throws -> Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Superfluid_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Superfluid_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Superfluid_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Superfluid_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SuperfluidDelegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidDelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidDelegateResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegateInterceptors() ?? [],
        wrapping: self.superfluidDelegate(request:context:)
      )

    case "SuperfluidUndelegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidUndelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidUndelegateResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUndelegateInterceptors() ?? [],
        wrapping: self.superfluidUndelegate(request:context:)
      )

    case "SuperfluidUnbondLock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidUnbondLock>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUnbondLockInterceptors() ?? [],
        wrapping: self.superfluidUnbondLock(request:context:)
      )

    case "SuperfluidUndelegateAndUnbondLock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUndelegateAndUnbondLockInterceptors() ?? [],
        wrapping: self.superfluidUndelegateAndUnbondLock(request:context:)
      )

    case "LockAndSuperfluidDelegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse>(),
        interceptors: self.interceptors?.makeLockAndSuperfluidDelegateInterceptors() ?? [],
        wrapping: self.lockAndSuperfluidDelegate(request:context:)
      )

    case "CreateFullRangePositionAndSuperfluidDelegate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse>(),
        interceptors: self.interceptors?.makeCreateFullRangePositionAndSuperfluidDelegateInterceptors() ?? [],
        wrapping: self.createFullRangePositionAndSuperfluidDelegate(request:context:)
      )

    case "UnPoolWhitelistedPool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgUnPoolWhitelistedPool>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse>(),
        interceptors: self.interceptors?.makeUnPoolWhitelistedPoolInterceptors() ?? [],
        wrapping: self.unPoolWhitelistedPool(request:context:)
      )

    case "UnlockAndMigrateSharesToFullRangeConcentratedPosition":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>(),
        interceptors: self.interceptors?.makeUnlockAndMigrateSharesToFullRangeConcentratedPositionInterceptors() ?? [],
        wrapping: self.unlockAndMigrateSharesToFullRangeConcentratedPosition(request:context:)
      )

    case "AddToConcentratedLiquiditySuperfluidPosition":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse>(),
        interceptors: self.interceptors?.makeAddToConcentratedLiquiditySuperfluidPositionInterceptors() ?? [],
        wrapping: self.addToConcentratedLiquiditySuperfluidPosition(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Superfluid_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'superfluidDelegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidDelegateInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgSuperfluidDelegate, Osmosis_Superfluid_MsgSuperfluidDelegateResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidUndelegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidUndelegateInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgSuperfluidUndelegate, Osmosis_Superfluid_MsgSuperfluidUndelegateResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidUnbondLock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidUnbondLockInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgSuperfluidUnbondLock, Osmosis_Superfluid_MsgSuperfluidUnbondLockResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidUndelegateAndUnbondLock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidUndelegateAndUnbondLockInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLock, Osmosis_Superfluid_MsgSuperfluidUndelegateAndUnbondLockResponse>]

  /// - Returns: Interceptors to use when handling 'lockAndSuperfluidDelegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLockAndSuperfluidDelegateInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgLockAndSuperfluidDelegate, Osmosis_Superfluid_MsgLockAndSuperfluidDelegateResponse>]

  /// - Returns: Interceptors to use when handling 'createFullRangePositionAndSuperfluidDelegate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFullRangePositionAndSuperfluidDelegateInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegate, Osmosis_Superfluid_MsgCreateFullRangePositionAndSuperfluidDelegateResponse>]

  /// - Returns: Interceptors to use when handling 'unPoolWhitelistedPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnPoolWhitelistedPoolInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgUnPoolWhitelistedPool, Osmosis_Superfluid_MsgUnPoolWhitelistedPoolResponse>]

  /// - Returns: Interceptors to use when handling 'unlockAndMigrateSharesToFullRangeConcentratedPosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnlockAndMigrateSharesToFullRangeConcentratedPositionInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition, Osmosis_Superfluid_MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse>]

  /// - Returns: Interceptors to use when handling 'addToConcentratedLiquiditySuperfluidPosition'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddToConcentratedLiquiditySuperfluidPositionInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPosition, Osmosis_Superfluid_MsgAddToConcentratedLiquiditySuperfluidPositionResponse>]
}

internal enum Osmosis_Superfluid_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.superfluid.Msg",
    methods: [
      Osmosis_Superfluid_MsgServerMetadata.Methods.superfluidDelegate,
      Osmosis_Superfluid_MsgServerMetadata.Methods.superfluidUndelegate,
      Osmosis_Superfluid_MsgServerMetadata.Methods.superfluidUnbondLock,
      Osmosis_Superfluid_MsgServerMetadata.Methods.superfluidUndelegateAndUnbondLock,
      Osmosis_Superfluid_MsgServerMetadata.Methods.lockAndSuperfluidDelegate,
      Osmosis_Superfluid_MsgServerMetadata.Methods.createFullRangePositionAndSuperfluidDelegate,
      Osmosis_Superfluid_MsgServerMetadata.Methods.unPoolWhitelistedPool,
      Osmosis_Superfluid_MsgServerMetadata.Methods.unlockAndMigrateSharesToFullRangeConcentratedPosition,
      Osmosis_Superfluid_MsgServerMetadata.Methods.addToConcentratedLiquiditySuperfluidPosition,
    ]
  )

  internal enum Methods {
    internal static let superfluidDelegate = GRPCMethodDescriptor(
      name: "SuperfluidDelegate",
      path: "/osmosis.superfluid.Msg/SuperfluidDelegate",
      type: GRPCCallType.unary
    )

    internal static let superfluidUndelegate = GRPCMethodDescriptor(
      name: "SuperfluidUndelegate",
      path: "/osmosis.superfluid.Msg/SuperfluidUndelegate",
      type: GRPCCallType.unary
    )

    internal static let superfluidUnbondLock = GRPCMethodDescriptor(
      name: "SuperfluidUnbondLock",
      path: "/osmosis.superfluid.Msg/SuperfluidUnbondLock",
      type: GRPCCallType.unary
    )

    internal static let superfluidUndelegateAndUnbondLock = GRPCMethodDescriptor(
      name: "SuperfluidUndelegateAndUnbondLock",
      path: "/osmosis.superfluid.Msg/SuperfluidUndelegateAndUnbondLock",
      type: GRPCCallType.unary
    )

    internal static let lockAndSuperfluidDelegate = GRPCMethodDescriptor(
      name: "LockAndSuperfluidDelegate",
      path: "/osmosis.superfluid.Msg/LockAndSuperfluidDelegate",
      type: GRPCCallType.unary
    )

    internal static let createFullRangePositionAndSuperfluidDelegate = GRPCMethodDescriptor(
      name: "CreateFullRangePositionAndSuperfluidDelegate",
      path: "/osmosis.superfluid.Msg/CreateFullRangePositionAndSuperfluidDelegate",
      type: GRPCCallType.unary
    )

    internal static let unPoolWhitelistedPool = GRPCMethodDescriptor(
      name: "UnPoolWhitelistedPool",
      path: "/osmosis.superfluid.Msg/UnPoolWhitelistedPool",
      type: GRPCCallType.unary
    )

    internal static let unlockAndMigrateSharesToFullRangeConcentratedPosition = GRPCMethodDescriptor(
      name: "UnlockAndMigrateSharesToFullRangeConcentratedPosition",
      path: "/osmosis.superfluid.Msg/UnlockAndMigrateSharesToFullRangeConcentratedPosition",
      type: GRPCCallType.unary
    )

    internal static let addToConcentratedLiquiditySuperfluidPosition = GRPCMethodDescriptor(
      name: "AddToConcentratedLiquiditySuperfluidPosition",
      path: "/osmosis.superfluid.Msg/AddToConcentratedLiquiditySuperfluidPosition",
      type: GRPCCallType.unary
    )
  }
}
