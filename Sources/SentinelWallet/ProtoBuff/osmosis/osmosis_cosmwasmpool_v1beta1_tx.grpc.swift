//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/cosmwasmpool/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Cosmwasmpool_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Cosmwasmpool_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol? { get }
}

extension Osmosis_Cosmwasmpool_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "osmosis.cosmwasmpool.v1beta1.Msg"
  }
}

@available(*, deprecated)
extension Osmosis_Cosmwasmpool_V1beta1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Osmosis_Cosmwasmpool_V1beta1_MsgNIOClient")
internal final class Osmosis_Cosmwasmpool_V1beta1_MsgClient: Osmosis_Cosmwasmpool_V1beta1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the osmosis.cosmwasmpool.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Osmosis_Cosmwasmpool_V1beta1_MsgNIOClient: Osmosis_Cosmwasmpool_V1beta1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.cosmwasmpool.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Cosmwasmpool_V1beta1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol? { get }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Cosmwasmpool_V1beta1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Cosmwasmpool_V1beta1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Cosmwasmpool_V1beta1_MsgAsyncClientProtocol {
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Osmosis_Cosmwasmpool_V1beta1_MsgAsyncClient: Osmosis_Cosmwasmpool_V1beta1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Osmosis_Cosmwasmpool_V1beta1_MsgClientInterceptorFactoryProtocol: Sendable {
}

internal enum Osmosis_Cosmwasmpool_V1beta1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.cosmwasmpool.v1beta1.Msg",
    methods: [
    ]
  )

  internal enum Methods {
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Cosmwasmpool_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgServerInterceptorFactoryProtocol? { get }
}

extension Osmosis_Cosmwasmpool_V1beta1_MsgProvider {
  internal var serviceName: Substring {
    return Osmosis_Cosmwasmpool_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Osmosis_Cosmwasmpool_V1beta1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgServerInterceptorFactoryProtocol? { get }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Osmosis_Cosmwasmpool_V1beta1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Osmosis_Cosmwasmpool_V1beta1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Osmosis_Cosmwasmpool_V1beta1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Osmosis_Cosmwasmpool_V1beta1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    default:
      return nil
    }
  }
}

internal protocol Osmosis_Cosmwasmpool_V1beta1_MsgServerInterceptorFactoryProtocol {
}

internal enum Osmosis_Cosmwasmpool_V1beta1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "osmosis.cosmwasmpool.v1beta1.Msg",
    methods: [
    ]
  )

  internal enum Methods {
  }
}
