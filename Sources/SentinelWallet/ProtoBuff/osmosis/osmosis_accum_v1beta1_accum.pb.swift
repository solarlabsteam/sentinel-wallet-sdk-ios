// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/accum/v1beta1/accum.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AccumulatorContent is the state-entry for the global accumulator.
/// It contains the name of the global accumulator and the total value of
/// shares belonging to it from all positions.
struct Osmosis_Accum_V1beta1_AccumulatorContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accumValue: [Cosmos_Base_V1beta1_DecCoin] = []

  var totalShares: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Accum_V1beta1_Options {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Record corresponds to an individual position value belonging to the
/// global accumulator.
struct Osmosis_Accum_V1beta1_Record {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// num_shares is the number of shares belonging to the position associated
  /// with this record.
  var numShares: String = String()

  /// accum_value_per_share is the subset of coins per shar of the global
  /// accumulator value that allows to infer how much a position is entitled to
  /// per share that it owns.
  ///
  /// In the default case with no intervals, this value equals to the global
  /// accumulator value at the time of the position creation, the last update or
  /// reward claim.
  ///
  /// In the interval case such as concentrated liquidity, this value equals to
  /// the global growth of rewards inside the interval during one of: the time of
  /// the position creation, the last update or reward claim. Note, that
  /// immediately prior to claiming or updating rewards, this value must be
  /// updated to "the growth inside at the time of last update + the growth
  /// outside at the time of the current block". This is so that the claiming
  /// logic can subtract this updated value from the global accumulator value to
  /// get the growth inside the interval from the time of last update up until
  /// the current block time.
  var accumValuePerShare: [Cosmos_Base_V1beta1_DecCoin] = []

  /// unclaimed_rewards_total is the total amount of unclaimed rewards that the
  /// position is entitled to. This value is updated whenever shares are added or
  /// removed from an existing position. We also expose API for manually updating
  /// this value for some custom use cases such as merging pre-existing positions
  /// into a single one.
  var unclaimedRewardsTotal: [Cosmos_Base_V1beta1_DecCoin] = []

  var options: Osmosis_Accum_V1beta1_Options {
    get {return _options ?? Osmosis_Accum_V1beta1_Options()}
    set {_options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  var hasOptions: Bool {return self._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  mutating func clearOptions() {self._options = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _options: Osmosis_Accum_V1beta1_Options? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Accum_V1beta1_AccumulatorContent: @unchecked Sendable {}
extension Osmosis_Accum_V1beta1_Options: @unchecked Sendable {}
extension Osmosis_Accum_V1beta1_Record: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.accum.v1beta1"

extension Osmosis_Accum_V1beta1_AccumulatorContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccumulatorContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "accum_value"),
    2: .standard(proto: "total_shares"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.accumValue) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.totalShares) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accumValue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accumValue, fieldNumber: 1)
    }
    if !self.totalShares.isEmpty {
      try visitor.visitSingularStringField(value: self.totalShares, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Accum_V1beta1_AccumulatorContent, rhs: Osmosis_Accum_V1beta1_AccumulatorContent) -> Bool {
    if lhs.accumValue != rhs.accumValue {return false}
    if lhs.totalShares != rhs.totalShares {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Accum_V1beta1_Options: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Options"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Accum_V1beta1_Options, rhs: Osmosis_Accum_V1beta1_Options) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Accum_V1beta1_Record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Record"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_shares"),
    2: .standard(proto: "accum_value_per_share"),
    3: .standard(proto: "unclaimed_rewards_total"),
    4: .same(proto: "options"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.numShares) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.accumValuePerShare) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.unclaimedRewardsTotal) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._options) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.numShares.isEmpty {
      try visitor.visitSingularStringField(value: self.numShares, fieldNumber: 1)
    }
    if !self.accumValuePerShare.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accumValuePerShare, fieldNumber: 2)
    }
    if !self.unclaimedRewardsTotal.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unclaimedRewardsTotal, fieldNumber: 3)
    }
    try { if let v = self._options {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Accum_V1beta1_Record, rhs: Osmosis_Accum_V1beta1_Record) -> Bool {
    if lhs.numShares != rhs.numShares {return false}
    if lhs.accumValuePerShare != rhs.accumValuePerShare {return false}
    if lhs.unclaimedRewardsTotal != rhs.unclaimedRewardsTotal {return false}
    if lhs._options != rhs._options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
