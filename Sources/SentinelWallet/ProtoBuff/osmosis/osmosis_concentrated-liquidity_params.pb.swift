// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/concentrated-liquidity/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Osmosis_Concentratedliquidity_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// authorized_tick_spacing is an array of uint64s that represents the tick
  /// spacing values concentrated-liquidity pools can be created with. For
  /// example, an authorized_tick_spacing of [1, 10, 30] allows for pools
  /// to be created with tick spacing of 1, 10, or 30.
  var authorizedTickSpacing: [UInt64] = []

  var authorizedSpreadFactors: [String] = []

  /// balancer_shares_reward_discount is the rate by which incentives flowing
  /// from CL to Balancer pools will be discounted to encourage LPs to migrate.
  /// e.g. a rate of 0.05 means Balancer LPs get 5% less incentives than full
  /// range CL LPs.
  var balancerSharesRewardDiscount: String = String()

  /// authorized_quote_denoms is a list of quote denoms that can be used as
  /// token1 when creating a pool. We limit the quote assets to a small set for
  /// the purposes of having convinient price increments stemming from tick to
  /// price conversion. These increments are in a human readable magnitude only
  /// for token1 as a quote. For limit orders in the future, this will be a
  /// desirable property in terms of UX as to allow users to set limit orders at
  /// prices in terms of token1 (quote asset) that are easy to reason about.
  var authorizedQuoteDenoms: [String] = []

  var authorizedUptimes: [SwiftProtobuf.Google_Protobuf_Duration] = []

  /// is_permissionless_pool_creation_enabled is a boolean that determines if
  /// concentrated liquidity pools can be created via message. At launch,
  /// we consider allowing only governance to create pools, and then later
  /// allowing permissionless pool creation by switching this flag to true
  /// with a governance proposal.
  var isPermissionlessPoolCreationEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Concentratedliquidity_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.concentratedliquidity"

extension Osmosis_Concentratedliquidity_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "authorized_tick_spacing"),
    2: .standard(proto: "authorized_spread_factors"),
    3: .standard(proto: "balancer_shares_reward_discount"),
    4: .standard(proto: "authorized_quote_denoms"),
    5: .standard(proto: "authorized_uptimes"),
    6: .standard(proto: "is_permissionless_pool_creation_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.authorizedTickSpacing) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.authorizedSpreadFactors) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.balancerSharesRewardDiscount) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.authorizedQuoteDenoms) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.authorizedUptimes) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isPermissionlessPoolCreationEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authorizedTickSpacing.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.authorizedTickSpacing, fieldNumber: 1)
    }
    if !self.authorizedSpreadFactors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authorizedSpreadFactors, fieldNumber: 2)
    }
    if !self.balancerSharesRewardDiscount.isEmpty {
      try visitor.visitSingularStringField(value: self.balancerSharesRewardDiscount, fieldNumber: 3)
    }
    if !self.authorizedQuoteDenoms.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authorizedQuoteDenoms, fieldNumber: 4)
    }
    if !self.authorizedUptimes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.authorizedUptimes, fieldNumber: 5)
    }
    if self.isPermissionlessPoolCreationEnabled != false {
      try visitor.visitSingularBoolField(value: self.isPermissionlessPoolCreationEnabled, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_Params, rhs: Osmosis_Concentratedliquidity_Params) -> Bool {
    if lhs.authorizedTickSpacing != rhs.authorizedTickSpacing {return false}
    if lhs.authorizedSpreadFactors != rhs.authorizedSpreadFactors {return false}
    if lhs.balancerSharesRewardDiscount != rhs.balancerSharesRewardDiscount {return false}
    if lhs.authorizedQuoteDenoms != rhs.authorizedQuoteDenoms {return false}
    if lhs.authorizedUptimes != rhs.authorizedUptimes {return false}
    if lhs.isPermissionlessPoolCreationEnabled != rhs.isPermissionlessPoolCreationEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
