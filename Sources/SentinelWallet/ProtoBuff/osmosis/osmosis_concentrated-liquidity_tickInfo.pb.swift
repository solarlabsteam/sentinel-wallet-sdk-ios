// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: osmosis/concentrated-liquidity/tickInfo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Osmosis_Concentratedliquidity_V1beta1_TickInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var liquidityGross: String = String()

  var liquidityNet: String = String()

  /// Total spread rewards accumulated in the opposite direction that the tick
  /// was last crossed. i.e. if the current tick is to the right of this tick
  /// (meaning its currently a greater price), then this is the total spread
  /// rewards accumulated below the tick. If the current tick is to the left of
  /// this tick (meaning its currently at a lower price), then this is the total
  /// spread rewards accumulated above the tick.
  ///
  /// Note: the way this value is used depends on the direction of spread rewards
  /// we are calculating for. If we are calculating spread rewards below the
  /// lower tick and the lower tick is the active tick, then this is the
  /// spreadRewardGrowthGlobal - the lower tick's
  /// spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating
  /// spread rewards above the upper tick and the upper tick is the active tick,
  /// then this is just the tick's
  /// spreadRewardGrowthOppositeDirectionOfLastTraversal value.
  var spreadRewardGrowthOppositeDirectionOfLastTraversal: [Cosmos_Base_V1beta1_DecCoin] = []

  var uptimeTrackers: [Osmosis_Concentratedliquidity_V1beta1_UptimeTracker] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Osmosis_Concentratedliquidity_V1beta1_UptimeTracker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uptimeGrowthOutside: [Cosmos_Base_V1beta1_DecCoin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Osmosis_Concentratedliquidity_V1beta1_TickInfo: @unchecked Sendable {}
extension Osmosis_Concentratedliquidity_V1beta1_UptimeTracker: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "osmosis.concentratedliquidity.v1beta1"

extension Osmosis_Concentratedliquidity_V1beta1_TickInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TickInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "liquidity_gross"),
    2: .standard(proto: "liquidity_net"),
    3: .standard(proto: "spread_reward_growth_opposite_direction_of_last_traversal"),
    4: .standard(proto: "uptime_trackers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.liquidityGross) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.liquidityNet) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.spreadRewardGrowthOppositeDirectionOfLastTraversal) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.uptimeTrackers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.liquidityGross.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidityGross, fieldNumber: 1)
    }
    if !self.liquidityNet.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidityNet, fieldNumber: 2)
    }
    if !self.spreadRewardGrowthOppositeDirectionOfLastTraversal.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spreadRewardGrowthOppositeDirectionOfLastTraversal, fieldNumber: 3)
    }
    if !self.uptimeTrackers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uptimeTrackers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_TickInfo, rhs: Osmosis_Concentratedliquidity_V1beta1_TickInfo) -> Bool {
    if lhs.liquidityGross != rhs.liquidityGross {return false}
    if lhs.liquidityNet != rhs.liquidityNet {return false}
    if lhs.spreadRewardGrowthOppositeDirectionOfLastTraversal != rhs.spreadRewardGrowthOppositeDirectionOfLastTraversal {return false}
    if lhs.uptimeTrackers != rhs.uptimeTrackers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Osmosis_Concentratedliquidity_V1beta1_UptimeTracker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UptimeTracker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "uptime_growth_outside"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.uptimeGrowthOutside) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uptimeGrowthOutside.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uptimeGrowthOutside, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Osmosis_Concentratedliquidity_V1beta1_UptimeTracker, rhs: Osmosis_Concentratedliquidity_V1beta1_UptimeTracker) -> Bool {
    if lhs.uptimeGrowthOutside != rhs.uptimeGrowthOutside {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
