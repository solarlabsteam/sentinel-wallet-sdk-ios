//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/cert/v1beta1/cert.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the provider Msg service
///
/// Usage: instantiate `Akash_Cert_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Cert_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Cert_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createCertificate(
    _ request: Akash_Cert_V1beta1_MsgCreateCertificate,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Cert_V1beta1_MsgCreateCertificate, Akash_Cert_V1beta1_MsgCreateCertificateResponse>

  func revokeCertificate(
    _ request: Akash_Cert_V1beta1_MsgRevokeCertificate,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Cert_V1beta1_MsgRevokeCertificate, Akash_Cert_V1beta1_MsgRevokeCertificateResponse>
}

extension Akash_Cert_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "akash.cert.v1beta1.Msg"
  }

  /// CreateCertificate defines a method to create new certificate given proper inputs.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCertificate(
    _ request: Akash_Cert_V1beta1_MsgCreateCertificate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Cert_V1beta1_MsgCreateCertificate, Akash_Cert_V1beta1_MsgCreateCertificateResponse> {
    return self.makeUnaryCall(
      path: "/akash.cert.v1beta1.Msg/CreateCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCertificateInterceptors() ?? []
    )
  }

  /// RevokeCertificate defines a method to revoke the certificate
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeCertificate(
    _ request: Akash_Cert_V1beta1_MsgRevokeCertificate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Cert_V1beta1_MsgRevokeCertificate, Akash_Cert_V1beta1_MsgRevokeCertificateResponse> {
    return self.makeUnaryCall(
      path: "/akash.cert.v1beta1.Msg/RevokeCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeCertificateInterceptors() ?? []
    )
  }
}

internal protocol Akash_Cert_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createCertificate'.
  func makeCreateCertificateInterceptors() -> [ClientInterceptor<Akash_Cert_V1beta1_MsgCreateCertificate, Akash_Cert_V1beta1_MsgCreateCertificateResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeCertificate'.
  func makeRevokeCertificateInterceptors() -> [ClientInterceptor<Akash_Cert_V1beta1_MsgRevokeCertificate, Akash_Cert_V1beta1_MsgRevokeCertificateResponse>]
}

internal final class Akash_Cert_V1beta1_MsgClient: Akash_Cert_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Cert_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.cert.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Cert_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the provider Msg service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Cert_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Akash_Cert_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateCertificate defines a method to create new certificate given proper inputs.
  func createCertificate(request: Akash_Cert_V1beta1_MsgCreateCertificate, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Cert_V1beta1_MsgCreateCertificateResponse>

  /// RevokeCertificate defines a method to revoke the certificate
  func revokeCertificate(request: Akash_Cert_V1beta1_MsgRevokeCertificate, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Cert_V1beta1_MsgRevokeCertificateResponse>
}

extension Akash_Cert_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "akash.cert.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateCertificate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Cert_V1beta1_MsgCreateCertificate>(),
        responseSerializer: ProtobufSerializer<Akash_Cert_V1beta1_MsgCreateCertificateResponse>(),
        interceptors: self.interceptors?.makeCreateCertificateInterceptors() ?? [],
        userFunction: self.createCertificate(request:context:)
      )

    case "RevokeCertificate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Cert_V1beta1_MsgRevokeCertificate>(),
        responseSerializer: ProtobufSerializer<Akash_Cert_V1beta1_MsgRevokeCertificateResponse>(),
        interceptors: self.interceptors?.makeRevokeCertificateInterceptors() ?? [],
        userFunction: self.revokeCertificate(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Cert_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createCertificate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateCertificateInterceptors() -> [ServerInterceptor<Akash_Cert_V1beta1_MsgCreateCertificate, Akash_Cert_V1beta1_MsgCreateCertificateResponse>]

  /// - Returns: Interceptors to use when handling 'revokeCertificate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeCertificateInterceptors() -> [ServerInterceptor<Akash_Cert_V1beta1_MsgRevokeCertificate, Akash_Cert_V1beta1_MsgRevokeCertificateResponse>]
}
