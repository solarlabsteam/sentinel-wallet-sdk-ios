//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: sentinel/session/v2/querier.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Session_V2_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Session_V2_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func querySessions(
    _ request: Sentinel_Session_V2_QuerySessionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsRequest, Sentinel_Session_V2_QuerySessionsResponse>

  func querySessionsForAccount(
    _ request: Sentinel_Session_V2_QuerySessionsForAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForAccountRequest, Sentinel_Session_V2_QuerySessionsForAccountResponse>

  func querySessionsForNode(
    _ request: Sentinel_Session_V2_QuerySessionsForNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForNodeRequest, Sentinel_Session_V2_QuerySessionsForNodeResponse>

  func querySessionsForSubscription(
    _ request: Sentinel_Session_V2_QuerySessionsForSubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest, Sentinel_Session_V2_QuerySessionsForSubscriptionResponse>

  func querySessionsForAllocation(
    _ request: Sentinel_Session_V2_QuerySessionsForAllocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForAllocationRequest, Sentinel_Session_V2_QuerySessionsForAllocationResponse>

  func querySession(
    _ request: Sentinel_Session_V2_QuerySessionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionRequest, Sentinel_Session_V2_QuerySessionResponse>

  func queryParams(
    _ request: Sentinel_Session_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_QueryParamsRequest, Sentinel_Session_V2_QueryParamsResponse>
}

extension Sentinel_Session_V2_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.session.v2.QueryService"
  }

  /// Unary call to QuerySessions
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySessions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySessions(
    _ request: Sentinel_Session_V2_QuerySessionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsRequest, Sentinel_Session_V2_QuerySessionsResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsInterceptors() ?? []
    )
  }

  /// Unary call to QuerySessionsForAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySessionsForAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySessionsForAccount(
    _ request: Sentinel_Session_V2_QuerySessionsForAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForAccountRequest, Sentinel_Session_V2_QuerySessionsForAccountResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForAccountInterceptors() ?? []
    )
  }

  /// Unary call to QuerySessionsForNode
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySessionsForNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySessionsForNode(
    _ request: Sentinel_Session_V2_QuerySessionsForNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForNodeRequest, Sentinel_Session_V2_QuerySessionsForNodeResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForNodeInterceptors() ?? []
    )
  }

  /// Unary call to QuerySessionsForSubscription
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySessionsForSubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySessionsForSubscription(
    _ request: Sentinel_Session_V2_QuerySessionsForSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest, Sentinel_Session_V2_QuerySessionsForSubscriptionResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForSubscriptionInterceptors() ?? []
    )
  }

  /// Unary call to QuerySessionsForAllocation
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySessionsForAllocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySessionsForAllocation(
    _ request: Sentinel_Session_V2_QuerySessionsForAllocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionsForAllocationRequest, Sentinel_Session_V2_QuerySessionsForAllocationResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAllocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForAllocationInterceptors() ?? []
    )
  }

  /// Unary call to QuerySession
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySession.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySession(
    _ request: Sentinel_Session_V2_QuerySessionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_QuerySessionRequest, Sentinel_Session_V2_QuerySessionResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionInterceptors() ?? []
    )
  }

  /// Unary call to QueryParams
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Sentinel_Session_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_QueryParamsRequest, Sentinel_Session_V2_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Sentinel_Session_V2_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Sentinel_Session_V2_QueryServiceNIOClient")
internal final class Sentinel_Session_V2_QueryServiceClient: Sentinel_Session_V2_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sentinel.session.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Sentinel_Session_V2_QueryServiceNIOClient: Sentinel_Session_V2_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.session.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Session_V2_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makeQuerySessionsCall(
    _ request: Sentinel_Session_V2_QuerySessionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsRequest, Sentinel_Session_V2_QuerySessionsResponse>

  func makeQuerySessionsForAccountCall(
    _ request: Sentinel_Session_V2_QuerySessionsForAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForAccountRequest, Sentinel_Session_V2_QuerySessionsForAccountResponse>

  func makeQuerySessionsForNodeCall(
    _ request: Sentinel_Session_V2_QuerySessionsForNodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForNodeRequest, Sentinel_Session_V2_QuerySessionsForNodeResponse>

  func makeQuerySessionsForSubscriptionCall(
    _ request: Sentinel_Session_V2_QuerySessionsForSubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest, Sentinel_Session_V2_QuerySessionsForSubscriptionResponse>

  func makeQuerySessionsForAllocationCall(
    _ request: Sentinel_Session_V2_QuerySessionsForAllocationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForAllocationRequest, Sentinel_Session_V2_QuerySessionsForAllocationResponse>

  func makeQuerySessionCall(
    _ request: Sentinel_Session_V2_QuerySessionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionRequest, Sentinel_Session_V2_QuerySessionResponse>

  func makeQueryParamsCall(
    _ request: Sentinel_Session_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QueryParamsRequest, Sentinel_Session_V2_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Session_V2_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Session_V2_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQuerySessionsCall(
    _ request: Sentinel_Session_V2_QuerySessionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsRequest, Sentinel_Session_V2_QuerySessionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsInterceptors() ?? []
    )
  }

  internal func makeQuerySessionsForAccountCall(
    _ request: Sentinel_Session_V2_QuerySessionsForAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForAccountRequest, Sentinel_Session_V2_QuerySessionsForAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForAccountInterceptors() ?? []
    )
  }

  internal func makeQuerySessionsForNodeCall(
    _ request: Sentinel_Session_V2_QuerySessionsForNodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForNodeRequest, Sentinel_Session_V2_QuerySessionsForNodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForNodeInterceptors() ?? []
    )
  }

  internal func makeQuerySessionsForSubscriptionCall(
    _ request: Sentinel_Session_V2_QuerySessionsForSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest, Sentinel_Session_V2_QuerySessionsForSubscriptionResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForSubscriptionInterceptors() ?? []
    )
  }

  internal func makeQuerySessionsForAllocationCall(
    _ request: Sentinel_Session_V2_QuerySessionsForAllocationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionsForAllocationRequest, Sentinel_Session_V2_QuerySessionsForAllocationResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAllocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForAllocationInterceptors() ?? []
    )
  }

  internal func makeQuerySessionCall(
    _ request: Sentinel_Session_V2_QuerySessionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QuerySessionRequest, Sentinel_Session_V2_QuerySessionResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionInterceptors() ?? []
    )
  }

  internal func makeQueryParamsCall(
    _ request: Sentinel_Session_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Session_V2_QueryParamsRequest, Sentinel_Session_V2_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Session_V2_QueryServiceAsyncClientProtocol {
  internal func querySessions(
    _ request: Sentinel_Session_V2_QuerySessionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Session_V2_QuerySessionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsInterceptors() ?? []
    )
  }

  internal func querySessionsForAccount(
    _ request: Sentinel_Session_V2_QuerySessionsForAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Session_V2_QuerySessionsForAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForAccountInterceptors() ?? []
    )
  }

  internal func querySessionsForNode(
    _ request: Sentinel_Session_V2_QuerySessionsForNodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Session_V2_QuerySessionsForNodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForNodeInterceptors() ?? []
    )
  }

  internal func querySessionsForSubscription(
    _ request: Sentinel_Session_V2_QuerySessionsForSubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Session_V2_QuerySessionsForSubscriptionResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForSubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForSubscriptionInterceptors() ?? []
    )
  }

  internal func querySessionsForAllocation(
    _ request: Sentinel_Session_V2_QuerySessionsForAllocationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Session_V2_QuerySessionsForAllocationResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAllocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionsForAllocationInterceptors() ?? []
    )
  }

  internal func querySession(
    _ request: Sentinel_Session_V2_QuerySessionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Session_V2_QuerySessionResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySession.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySessionInterceptors() ?? []
    )
  }

  internal func queryParams(
    _ request: Sentinel_Session_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Session_V2_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Session_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Sentinel_Session_V2_QueryServiceAsyncClient: Sentinel_Session_V2_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Sentinel_Session_V2_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'querySessions'.
  func makeQuerySessionsInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_QuerySessionsRequest, Sentinel_Session_V2_QuerySessionsResponse>]

  /// - Returns: Interceptors to use when invoking 'querySessionsForAccount'.
  func makeQuerySessionsForAccountInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_QuerySessionsForAccountRequest, Sentinel_Session_V2_QuerySessionsForAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'querySessionsForNode'.
  func makeQuerySessionsForNodeInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_QuerySessionsForNodeRequest, Sentinel_Session_V2_QuerySessionsForNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'querySessionsForSubscription'.
  func makeQuerySessionsForSubscriptionInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest, Sentinel_Session_V2_QuerySessionsForSubscriptionResponse>]

  /// - Returns: Interceptors to use when invoking 'querySessionsForAllocation'.
  func makeQuerySessionsForAllocationInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_QuerySessionsForAllocationRequest, Sentinel_Session_V2_QuerySessionsForAllocationResponse>]

  /// - Returns: Interceptors to use when invoking 'querySession'.
  func makeQuerySessionInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_QuerySessionRequest, Sentinel_Session_V2_QuerySessionResponse>]

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_QueryParamsRequest, Sentinel_Session_V2_QueryParamsResponse>]
}

internal enum Sentinel_Session_V2_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.session.v2.QueryService",
    methods: [
      Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessions,
      Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAccount,
      Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForNode,
      Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForSubscription,
      Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySessionsForAllocation,
      Sentinel_Session_V2_QueryServiceClientMetadata.Methods.querySession,
      Sentinel_Session_V2_QueryServiceClientMetadata.Methods.queryParams,
    ]
  )

  internal enum Methods {
    internal static let querySessions = GRPCMethodDescriptor(
      name: "QuerySessions",
      path: "/sentinel.session.v2.QueryService/QuerySessions",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForAccount = GRPCMethodDescriptor(
      name: "QuerySessionsForAccount",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForAccount",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForNode = GRPCMethodDescriptor(
      name: "QuerySessionsForNode",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForNode",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForSubscription = GRPCMethodDescriptor(
      name: "QuerySessionsForSubscription",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForSubscription",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForAllocation = GRPCMethodDescriptor(
      name: "QuerySessionsForAllocation",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForAllocation",
      type: GRPCCallType.unary
    )

    internal static let querySession = GRPCMethodDescriptor(
      name: "QuerySession",
      path: "/sentinel.session.v2.QueryService/QuerySession",
      type: GRPCCallType.unary
    )

    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/sentinel.session.v2.QueryService/QueryParams",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Session_V2_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Session_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func querySessions(request: Sentinel_Session_V2_QuerySessionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_QuerySessionsResponse>

  func querySessionsForAccount(request: Sentinel_Session_V2_QuerySessionsForAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_QuerySessionsForAccountResponse>

  func querySessionsForNode(request: Sentinel_Session_V2_QuerySessionsForNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_QuerySessionsForNodeResponse>

  func querySessionsForSubscription(request: Sentinel_Session_V2_QuerySessionsForSubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_QuerySessionsForSubscriptionResponse>

  func querySessionsForAllocation(request: Sentinel_Session_V2_QuerySessionsForAllocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_QuerySessionsForAllocationResponse>

  func querySession(request: Sentinel_Session_V2_QuerySessionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_QuerySessionResponse>

  func queryParams(request: Sentinel_Session_V2_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_QueryParamsResponse>
}

extension Sentinel_Session_V2_QueryServiceProvider {
  internal var serviceName: Substring {
    return Sentinel_Session_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QuerySessions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsInterceptors() ?? [],
        userFunction: self.querySessions(request:context:)
      )

    case "QuerySessionsForAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForAccountRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForAccountResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForAccountInterceptors() ?? [],
        userFunction: self.querySessionsForAccount(request:context:)
      )

    case "QuerySessionsForNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForNodeResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForNodeInterceptors() ?? [],
        userFunction: self.querySessionsForNode(request:context:)
      )

    case "QuerySessionsForSubscription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForSubscriptionResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForSubscriptionInterceptors() ?? [],
        userFunction: self.querySessionsForSubscription(request:context:)
      )

    case "QuerySessionsForAllocation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForAllocationRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForAllocationResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForAllocationInterceptors() ?? [],
        userFunction: self.querySessionsForAllocation(request:context:)
      )

    case "QuerySession":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionResponse>(),
        interceptors: self.interceptors?.makeQuerySessionInterceptors() ?? [],
        userFunction: self.querySession(request:context:)
      )

    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Session_V2_QueryServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Session_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func querySessions(
    request: Sentinel_Session_V2_QuerySessionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Session_V2_QuerySessionsResponse

  func querySessionsForAccount(
    request: Sentinel_Session_V2_QuerySessionsForAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Session_V2_QuerySessionsForAccountResponse

  func querySessionsForNode(
    request: Sentinel_Session_V2_QuerySessionsForNodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Session_V2_QuerySessionsForNodeResponse

  func querySessionsForSubscription(
    request: Sentinel_Session_V2_QuerySessionsForSubscriptionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Session_V2_QuerySessionsForSubscriptionResponse

  func querySessionsForAllocation(
    request: Sentinel_Session_V2_QuerySessionsForAllocationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Session_V2_QuerySessionsForAllocationResponse

  func querySession(
    request: Sentinel_Session_V2_QuerySessionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Session_V2_QuerySessionResponse

  func queryParams(
    request: Sentinel_Session_V2_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Session_V2_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Session_V2_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Session_V2_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Sentinel_Session_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Sentinel_Session_V2_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QuerySessions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsInterceptors() ?? [],
        wrapping: { try await self.querySessions(request: $0, context: $1) }
      )

    case "QuerySessionsForAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForAccountRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForAccountResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForAccountInterceptors() ?? [],
        wrapping: { try await self.querySessionsForAccount(request: $0, context: $1) }
      )

    case "QuerySessionsForNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForNodeResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForNodeInterceptors() ?? [],
        wrapping: { try await self.querySessionsForNode(request: $0, context: $1) }
      )

    case "QuerySessionsForSubscription":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForSubscriptionResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForSubscriptionInterceptors() ?? [],
        wrapping: { try await self.querySessionsForSubscription(request: $0, context: $1) }
      )

    case "QuerySessionsForAllocation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionsForAllocationRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionsForAllocationResponse>(),
        interceptors: self.interceptors?.makeQuerySessionsForAllocationInterceptors() ?? [],
        wrapping: { try await self.querySessionsForAllocation(request: $0, context: $1) }
      )

    case "QuerySession":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QuerySessionRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QuerySessionResponse>(),
        interceptors: self.interceptors?.makeQuerySessionInterceptors() ?? [],
        wrapping: { try await self.querySession(request: $0, context: $1) }
      )

    case "QueryParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        wrapping: { try await self.queryParams(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Session_V2_QueryServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'querySessions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySessionsInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_QuerySessionsRequest, Sentinel_Session_V2_QuerySessionsResponse>]

  /// - Returns: Interceptors to use when handling 'querySessionsForAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySessionsForAccountInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_QuerySessionsForAccountRequest, Sentinel_Session_V2_QuerySessionsForAccountResponse>]

  /// - Returns: Interceptors to use when handling 'querySessionsForNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySessionsForNodeInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_QuerySessionsForNodeRequest, Sentinel_Session_V2_QuerySessionsForNodeResponse>]

  /// - Returns: Interceptors to use when handling 'querySessionsForSubscription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySessionsForSubscriptionInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_QuerySessionsForSubscriptionRequest, Sentinel_Session_V2_QuerySessionsForSubscriptionResponse>]

  /// - Returns: Interceptors to use when handling 'querySessionsForAllocation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySessionsForAllocationInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_QuerySessionsForAllocationRequest, Sentinel_Session_V2_QuerySessionsForAllocationResponse>]

  /// - Returns: Interceptors to use when handling 'querySession'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySessionInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_QuerySessionRequest, Sentinel_Session_V2_QuerySessionResponse>]

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_QueryParamsRequest, Sentinel_Session_V2_QueryParamsResponse>]
}

internal enum Sentinel_Session_V2_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.session.v2.QueryService",
    methods: [
      Sentinel_Session_V2_QueryServiceServerMetadata.Methods.querySessions,
      Sentinel_Session_V2_QueryServiceServerMetadata.Methods.querySessionsForAccount,
      Sentinel_Session_V2_QueryServiceServerMetadata.Methods.querySessionsForNode,
      Sentinel_Session_V2_QueryServiceServerMetadata.Methods.querySessionsForSubscription,
      Sentinel_Session_V2_QueryServiceServerMetadata.Methods.querySessionsForAllocation,
      Sentinel_Session_V2_QueryServiceServerMetadata.Methods.querySession,
      Sentinel_Session_V2_QueryServiceServerMetadata.Methods.queryParams,
    ]
  )

  internal enum Methods {
    internal static let querySessions = GRPCMethodDescriptor(
      name: "QuerySessions",
      path: "/sentinel.session.v2.QueryService/QuerySessions",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForAccount = GRPCMethodDescriptor(
      name: "QuerySessionsForAccount",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForAccount",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForNode = GRPCMethodDescriptor(
      name: "QuerySessionsForNode",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForNode",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForSubscription = GRPCMethodDescriptor(
      name: "QuerySessionsForSubscription",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForSubscription",
      type: GRPCCallType.unary
    )

    internal static let querySessionsForAllocation = GRPCMethodDescriptor(
      name: "QuerySessionsForAllocation",
      path: "/sentinel.session.v2.QueryService/QuerySessionsForAllocation",
      type: GRPCCallType.unary
    )

    internal static let querySession = GRPCMethodDescriptor(
      name: "QuerySession",
      path: "/sentinel.session.v2.QueryService/QuerySession",
      type: GRPCCallType.unary
    )

    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/sentinel.session.v2.QueryService/QueryParams",
      type: GRPCCallType.unary
    )
  }
}
