//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sentinel/session/v2/msg.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Session_V2_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Session_V2_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Session_V2_MsgServiceClientInterceptorFactoryProtocol? { get }

  func msgStart(
    _ request: Sentinel_Session_V2_MsgStartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_MsgStartRequest, Sentinel_Session_V2_MsgStartResponse>

  func msgUpdateDetails(
    _ request: Sentinel_Session_V2_MsgUpdateDetailsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_MsgUpdateDetailsRequest, Sentinel_Session_V2_MsgUpdateDetailsResponse>

  func msgEnd(
    _ request: Sentinel_Session_V2_MsgEndRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Session_V2_MsgEndRequest, Sentinel_Session_V2_MsgEndResponse>
}

extension Sentinel_Session_V2_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.session.v2.MsgService"
  }

  /// Unary call to MsgStart
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgStart.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgStart(
    _ request: Sentinel_Session_V2_MsgStartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_MsgStartRequest, Sentinel_Session_V2_MsgStartResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.session.v2.MsgService/MsgStart",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgStartInterceptors() ?? []
    )
  }

  /// Unary call to MsgUpdateDetails
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgUpdateDetails.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgUpdateDetails(
    _ request: Sentinel_Session_V2_MsgUpdateDetailsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_MsgUpdateDetailsRequest, Sentinel_Session_V2_MsgUpdateDetailsResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.session.v2.MsgService/MsgUpdateDetails",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgUpdateDetailsInterceptors() ?? []
    )
  }

  /// Unary call to MsgEnd
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgEnd.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgEnd(
    _ request: Sentinel_Session_V2_MsgEndRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Session_V2_MsgEndRequest, Sentinel_Session_V2_MsgEndResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.session.v2.MsgService/MsgEnd",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgEndInterceptors() ?? []
    )
  }
}

internal protocol Sentinel_Session_V2_MsgServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'msgStart'.
  func makeMsgStartInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_MsgStartRequest, Sentinel_Session_V2_MsgStartResponse>]

  /// - Returns: Interceptors to use when invoking 'msgUpdateDetails'.
  func makeMsgUpdateDetailsInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_MsgUpdateDetailsRequest, Sentinel_Session_V2_MsgUpdateDetailsResponse>]

  /// - Returns: Interceptors to use when invoking 'msgEnd'.
  func makeMsgEndInterceptors() -> [ClientInterceptor<Sentinel_Session_V2_MsgEndRequest, Sentinel_Session_V2_MsgEndResponse>]
}

internal final class Sentinel_Session_V2_MsgServiceClient: Sentinel_Session_V2_MsgServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Session_V2_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.session.v2.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Session_V2_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Session_V2_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Session_V2_MsgServiceServerInterceptorFactoryProtocol? { get }

  func msgStart(request: Sentinel_Session_V2_MsgStartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_MsgStartResponse>

  func msgUpdateDetails(request: Sentinel_Session_V2_MsgUpdateDetailsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_MsgUpdateDetailsResponse>

  func msgEnd(request: Sentinel_Session_V2_MsgEndRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Session_V2_MsgEndResponse>
}

extension Sentinel_Session_V2_MsgServiceProvider {
  internal var serviceName: Substring { return "sentinel.session.v2.MsgService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MsgStart":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_MsgStartRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_MsgStartResponse>(),
        interceptors: self.interceptors?.makeMsgStartInterceptors() ?? [],
        userFunction: self.msgStart(request:context:)
      )

    case "MsgUpdateDetails":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_MsgUpdateDetailsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_MsgUpdateDetailsResponse>(),
        interceptors: self.interceptors?.makeMsgUpdateDetailsInterceptors() ?? [],
        userFunction: self.msgUpdateDetails(request:context:)
      )

    case "MsgEnd":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Session_V2_MsgEndRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Session_V2_MsgEndResponse>(),
        interceptors: self.interceptors?.makeMsgEndInterceptors() ?? [],
        userFunction: self.msgEnd(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Session_V2_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'msgStart'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgStartInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_MsgStartRequest, Sentinel_Session_V2_MsgStartResponse>]

  /// - Returns: Interceptors to use when handling 'msgUpdateDetails'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgUpdateDetailsInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_MsgUpdateDetailsRequest, Sentinel_Session_V2_MsgUpdateDetailsResponse>]

  /// - Returns: Interceptors to use when handling 'msgEnd'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgEndInterceptors() -> [ServerInterceptor<Sentinel_Session_V2_MsgEndRequest, Sentinel_Session_V2_MsgEndResponse>]
}
