//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: sentinel/node/v2/querier.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Node_V2_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Node_V2_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func queryNodes(
    _ request: Sentinel_Node_V2_QueryNodesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse>

  func queryNodesForPlan(
    _ request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse>

  func queryNode(
    _ request: Sentinel_Node_V2_QueryNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse>

  func queryParams(
    _ request: Sentinel_Node_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse>
}

extension Sentinel_Node_V2_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.node.v2.QueryService"
  }

  /// Unary call to QueryNodes
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryNodes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryNodes(
    _ request: Sentinel_Node_V2_QueryNodesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesInterceptors() ?? []
    )
  }

  /// Unary call to QueryNodesForPlan
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryNodesForPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryNodesForPlan(
    _ request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodesForPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesForPlanInterceptors() ?? []
    )
  }

  /// Unary call to QueryNode
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryNode(
    _ request: Sentinel_Node_V2_QueryNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodeInterceptors() ?? []
    )
  }

  /// Unary call to QueryParams
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Sentinel_Node_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Sentinel_Node_V2_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Sentinel_Node_V2_QueryServiceNIOClient")
internal final class Sentinel_Node_V2_QueryServiceClient: Sentinel_Node_V2_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sentinel.node.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Sentinel_Node_V2_QueryServiceNIOClient: Sentinel_Node_V2_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.node.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Node_V2_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makeQueryNodesCall(
    _ request: Sentinel_Node_V2_QueryNodesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse>

  func makeQueryNodesForPlanCall(
    _ request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse>

  func makeQueryNodeCall(
    _ request: Sentinel_Node_V2_QueryNodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse>

  func makeQueryParamsCall(
    _ request: Sentinel_Node_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Node_V2_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Node_V2_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQueryNodesCall(
    _ request: Sentinel_Node_V2_QueryNodesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesInterceptors() ?? []
    )
  }

  internal func makeQueryNodesForPlanCall(
    _ request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodesForPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesForPlanInterceptors() ?? []
    )
  }

  internal func makeQueryNodeCall(
    _ request: Sentinel_Node_V2_QueryNodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodeInterceptors() ?? []
    )
  }

  internal func makeQueryParamsCall(
    _ request: Sentinel_Node_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Node_V2_QueryServiceAsyncClientProtocol {
  internal func queryNodes(
    _ request: Sentinel_Node_V2_QueryNodesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Node_V2_QueryNodesResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesInterceptors() ?? []
    )
  }

  internal func queryNodesForPlan(
    _ request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Node_V2_QueryNodesForPlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodesForPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesForPlanInterceptors() ?? []
    )
  }

  internal func queryNode(
    _ request: Sentinel_Node_V2_QueryNodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Node_V2_QueryNodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodeInterceptors() ?? []
    )
  }

  internal func queryParams(
    _ request: Sentinel_Node_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Node_V2_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Sentinel_Node_V2_QueryServiceAsyncClient: Sentinel_Node_V2_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'queryNodes'.
  func makeQueryNodesInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse>]

  /// - Returns: Interceptors to use when invoking 'queryNodesForPlan'.
  func makeQueryNodesForPlanInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'queryNode'.
  func makeQueryNodeInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse>]
}

internal enum Sentinel_Node_V2_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.node.v2.QueryService",
    methods: [
      Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodes,
      Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNodesForPlan,
      Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryNode,
      Sentinel_Node_V2_QueryServiceClientMetadata.Methods.queryParams,
    ]
  )

  internal enum Methods {
    internal static let queryNodes = GRPCMethodDescriptor(
      name: "QueryNodes",
      path: "/sentinel.node.v2.QueryService/QueryNodes",
      type: GRPCCallType.unary
    )

    internal static let queryNodesForPlan = GRPCMethodDescriptor(
      name: "QueryNodesForPlan",
      path: "/sentinel.node.v2.QueryService/QueryNodesForPlan",
      type: GRPCCallType.unary
    )

    internal static let queryNode = GRPCMethodDescriptor(
      name: "QueryNode",
      path: "/sentinel.node.v2.QueryService/QueryNode",
      type: GRPCCallType.unary
    )

    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/sentinel.node.v2.QueryService/QueryParams",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Node_V2_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Node_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func queryNodes(request: Sentinel_Node_V2_QueryNodesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryNodesResponse>

  func queryNodesForPlan(request: Sentinel_Node_V2_QueryNodesForPlanRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryNodesForPlanResponse>

  func queryNode(request: Sentinel_Node_V2_QueryNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryNodeResponse>

  func queryParams(request: Sentinel_Node_V2_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryParamsResponse>
}

extension Sentinel_Node_V2_QueryServiceProvider {
  internal var serviceName: Substring {
    return Sentinel_Node_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryNodes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodesRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodesResponse>(),
        interceptors: self.interceptors?.makeQueryNodesInterceptors() ?? [],
        userFunction: self.queryNodes(request:context:)
      )

    case "QueryNodesForPlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodesForPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodesForPlanResponse>(),
        interceptors: self.interceptors?.makeQueryNodesForPlanInterceptors() ?? [],
        userFunction: self.queryNodesForPlan(request:context:)
      )

    case "QueryNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodeResponse>(),
        interceptors: self.interceptors?.makeQueryNodeInterceptors() ?? [],
        userFunction: self.queryNode(request:context:)
      )

    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Node_V2_QueryServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Node_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func queryNodes(
    request: Sentinel_Node_V2_QueryNodesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Node_V2_QueryNodesResponse

  func queryNodesForPlan(
    request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Node_V2_QueryNodesForPlanResponse

  func queryNode(
    request: Sentinel_Node_V2_QueryNodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Node_V2_QueryNodeResponse

  func queryParams(
    request: Sentinel_Node_V2_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Node_V2_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Node_V2_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Node_V2_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Sentinel_Node_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Sentinel_Node_V2_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryNodes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodesRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodesResponse>(),
        interceptors: self.interceptors?.makeQueryNodesInterceptors() ?? [],
        wrapping: { try await self.queryNodes(request: $0, context: $1) }
      )

    case "QueryNodesForPlan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodesForPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodesForPlanResponse>(),
        interceptors: self.interceptors?.makeQueryNodesForPlanInterceptors() ?? [],
        wrapping: { try await self.queryNodesForPlan(request: $0, context: $1) }
      )

    case "QueryNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodeResponse>(),
        interceptors: self.interceptors?.makeQueryNodeInterceptors() ?? [],
        wrapping: { try await self.queryNode(request: $0, context: $1) }
      )

    case "QueryParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        wrapping: { try await self.queryParams(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Node_V2_QueryServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'queryNodes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryNodesInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse>]

  /// - Returns: Interceptors to use when handling 'queryNodesForPlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryNodesForPlanInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse>]

  /// - Returns: Interceptors to use when handling 'queryNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryNodeInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse>]

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse>]
}

internal enum Sentinel_Node_V2_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.node.v2.QueryService",
    methods: [
      Sentinel_Node_V2_QueryServiceServerMetadata.Methods.queryNodes,
      Sentinel_Node_V2_QueryServiceServerMetadata.Methods.queryNodesForPlan,
      Sentinel_Node_V2_QueryServiceServerMetadata.Methods.queryNode,
      Sentinel_Node_V2_QueryServiceServerMetadata.Methods.queryParams,
    ]
  )

  internal enum Methods {
    internal static let queryNodes = GRPCMethodDescriptor(
      name: "QueryNodes",
      path: "/sentinel.node.v2.QueryService/QueryNodes",
      type: GRPCCallType.unary
    )

    internal static let queryNodesForPlan = GRPCMethodDescriptor(
      name: "QueryNodesForPlan",
      path: "/sentinel.node.v2.QueryService/QueryNodesForPlan",
      type: GRPCCallType.unary
    )

    internal static let queryNode = GRPCMethodDescriptor(
      name: "QueryNode",
      path: "/sentinel.node.v2.QueryService/QueryNode",
      type: GRPCCallType.unary
    )

    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/sentinel.node.v2.QueryService/QueryParams",
      type: GRPCCallType.unary
    )
  }
}
