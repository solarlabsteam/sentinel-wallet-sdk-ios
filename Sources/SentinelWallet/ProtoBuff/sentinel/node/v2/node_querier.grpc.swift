//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sentinel/node/v2/querier.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Node_V2_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Node_V2_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func queryNodes(
    _ request: Sentinel_Node_V2_QueryNodesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse>

  func queryNodesForPlan(
    _ request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse>

  func queryNode(
    _ request: Sentinel_Node_V2_QueryNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse>

  func queryParams(
    _ request: Sentinel_Node_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse>
}

extension Sentinel_Node_V2_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.node.v2.QueryService"
  }

  /// Unary call to QueryNodes
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryNodes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryNodes(
    _ request: Sentinel_Node_V2_QueryNodesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.node.v2.QueryService/QueryNodes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesInterceptors() ?? []
    )
  }

  /// Unary call to QueryNodesForPlan
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryNodesForPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryNodesForPlan(
    _ request: Sentinel_Node_V2_QueryNodesForPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.node.v2.QueryService/QueryNodesForPlan",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodesForPlanInterceptors() ?? []
    )
  }

  /// Unary call to QueryNode
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryNode(
    _ request: Sentinel_Node_V2_QueryNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.node.v2.QueryService/QueryNode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryNodeInterceptors() ?? []
    )
  }

  /// Unary call to QueryParams
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Sentinel_Node_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.node.v2.QueryService/QueryParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

internal protocol Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'queryNodes'.
  func makeQueryNodesInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse>]

  /// - Returns: Interceptors to use when invoking 'queryNodesForPlan'.
  func makeQueryNodesForPlanInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'queryNode'.
  func makeQueryNodeInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse>]
}

internal final class Sentinel_Node_V2_QueryServiceClient: Sentinel_Node_V2_QueryServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.node.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Node_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Node_V2_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Node_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func queryNodes(request: Sentinel_Node_V2_QueryNodesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryNodesResponse>

  func queryNodesForPlan(request: Sentinel_Node_V2_QueryNodesForPlanRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryNodesForPlanResponse>

  func queryNode(request: Sentinel_Node_V2_QueryNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryNodeResponse>

  func queryParams(request: Sentinel_Node_V2_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Node_V2_QueryParamsResponse>
}

extension Sentinel_Node_V2_QueryServiceProvider {
  internal var serviceName: Substring { return "sentinel.node.v2.QueryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryNodes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodesRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodesResponse>(),
        interceptors: self.interceptors?.makeQueryNodesInterceptors() ?? [],
        userFunction: self.queryNodes(request:context:)
      )

    case "QueryNodesForPlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodesForPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodesForPlanResponse>(),
        interceptors: self.interceptors?.makeQueryNodesForPlanInterceptors() ?? [],
        userFunction: self.queryNodesForPlan(request:context:)
      )

    case "QueryNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryNodeResponse>(),
        interceptors: self.interceptors?.makeQueryNodeInterceptors() ?? [],
        userFunction: self.queryNode(request:context:)
      )

    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Node_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Node_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Node_V2_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryNodes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryNodesInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryNodesRequest, Sentinel_Node_V2_QueryNodesResponse>]

  /// - Returns: Interceptors to use when handling 'queryNodesForPlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryNodesForPlanInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryNodesForPlanRequest, Sentinel_Node_V2_QueryNodesForPlanResponse>]

  /// - Returns: Interceptors to use when handling 'queryNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryNodeInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryNodeRequest, Sentinel_Node_V2_QueryNodeResponse>]

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Sentinel_Node_V2_QueryParamsRequest, Sentinel_Node_V2_QueryParamsResponse>]
}
