// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sentinel/node/v2/msg.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgRegisterRequest defines the SDK message for registering a node
struct Sentinel_Node_V2_MsgRegisterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var gigabytePrices: [Cosmos_Base_V1beta1_Coin] = []

  var hourlyPrices: [Cosmos_Base_V1beta1_Coin] = []

  var remoteURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateDetailsRequest defines the SDK message for updating the node details
struct Sentinel_Node_V2_MsgUpdateDetailsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var gigabytePrices: [Cosmos_Base_V1beta1_Coin] = []

  var hourlyPrices: [Cosmos_Base_V1beta1_Coin] = []

  var remoteURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateStatusRequest defines the SDK message for updating the node status
struct Sentinel_Node_V2_MsgUpdateStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var status: Sentinel_Types_V1_Status = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSubscribeRequest defines the SDK message for subscribe to a node
struct Sentinel_Node_V2_MsgSubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var nodeAddress: String = String()

  var gigabytes: Int64 = 0

  var hours: Int64 = 0

  var denom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRegisterResponse defines the response of message MsgRegisterRequest
struct Sentinel_Node_V2_MsgRegisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateDetailsResponse defines the response of message
/// MsgUpdateDetailsRequest
struct Sentinel_Node_V2_MsgUpdateDetailsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateStatusResponse defines the response of message
/// MsgUpdateStatusRequest
struct Sentinel_Node_V2_MsgUpdateStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSubscribeResponse defines the response of message MsgSubscribeRequest
struct Sentinel_Node_V2_MsgSubscribeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sentinel_Node_V2_MsgRegisterRequest: @unchecked Sendable {}
extension Sentinel_Node_V2_MsgUpdateDetailsRequest: @unchecked Sendable {}
extension Sentinel_Node_V2_MsgUpdateStatusRequest: @unchecked Sendable {}
extension Sentinel_Node_V2_MsgSubscribeRequest: @unchecked Sendable {}
extension Sentinel_Node_V2_MsgRegisterResponse: @unchecked Sendable {}
extension Sentinel_Node_V2_MsgUpdateDetailsResponse: @unchecked Sendable {}
extension Sentinel_Node_V2_MsgUpdateStatusResponse: @unchecked Sendable {}
extension Sentinel_Node_V2_MsgSubscribeResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sentinel.node.v2"

extension Sentinel_Node_V2_MsgRegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "gigabyte_prices"),
    3: .standard(proto: "hourly_prices"),
    4: .standard(proto: "remote_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.gigabytePrices) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.hourlyPrices) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.remoteURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.gigabytePrices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gigabytePrices, fieldNumber: 2)
    }
    if !self.hourlyPrices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hourlyPrices, fieldNumber: 3)
    }
    if !self.remoteURL.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteURL, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgRegisterRequest, rhs: Sentinel_Node_V2_MsgRegisterRequest) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.gigabytePrices != rhs.gigabytePrices {return false}
    if lhs.hourlyPrices != rhs.hourlyPrices {return false}
    if lhs.remoteURL != rhs.remoteURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Node_V2_MsgUpdateDetailsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateDetailsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "gigabyte_prices"),
    3: .standard(proto: "hourly_prices"),
    4: .standard(proto: "remote_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.gigabytePrices) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.hourlyPrices) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.remoteURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.gigabytePrices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gigabytePrices, fieldNumber: 2)
    }
    if !self.hourlyPrices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hourlyPrices, fieldNumber: 3)
    }
    if !self.remoteURL.isEmpty {
      try visitor.visitSingularStringField(value: self.remoteURL, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgUpdateDetailsRequest, rhs: Sentinel_Node_V2_MsgUpdateDetailsRequest) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.gigabytePrices != rhs.gigabytePrices {return false}
    if lhs.hourlyPrices != rhs.hourlyPrices {return false}
    if lhs.remoteURL != rhs.remoteURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Node_V2_MsgUpdateStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgUpdateStatusRequest, rhs: Sentinel_Node_V2_MsgUpdateStatusRequest) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Node_V2_MsgSubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubscribeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "node_address"),
    3: .same(proto: "gigabytes"),
    4: .same(proto: "hours"),
    5: .same(proto: "denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nodeAddress) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.gigabytes) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.hours) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.nodeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeAddress, fieldNumber: 2)
    }
    if self.gigabytes != 0 {
      try visitor.visitSingularInt64Field(value: self.gigabytes, fieldNumber: 3)
    }
    if self.hours != 0 {
      try visitor.visitSingularInt64Field(value: self.hours, fieldNumber: 4)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgSubscribeRequest, rhs: Sentinel_Node_V2_MsgSubscribeRequest) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.nodeAddress != rhs.nodeAddress {return false}
    if lhs.gigabytes != rhs.gigabytes {return false}
    if lhs.hours != rhs.hours {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Node_V2_MsgRegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgRegisterResponse, rhs: Sentinel_Node_V2_MsgRegisterResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Node_V2_MsgUpdateDetailsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateDetailsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgUpdateDetailsResponse, rhs: Sentinel_Node_V2_MsgUpdateDetailsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Node_V2_MsgUpdateStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateStatusResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgUpdateStatusResponse, rhs: Sentinel_Node_V2_MsgUpdateStatusResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Node_V2_MsgSubscribeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSubscribeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Node_V2_MsgSubscribeResponse, rhs: Sentinel_Node_V2_MsgSubscribeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
