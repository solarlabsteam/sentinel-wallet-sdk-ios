//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sentinel/subscription/v1/msg.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Subscription_V1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Subscription_V1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Subscription_V1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func msgSubscribeToNode(
    _ request: Sentinel_Subscription_V1_MsgSubscribeToNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgSubscribeToNodeRequest, Sentinel_Subscription_V1_MsgSubscribeToNodeResponse>

  func msgSubscribeToPlan(
    _ request: Sentinel_Subscription_V1_MsgSubscribeToPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgSubscribeToPlanRequest, Sentinel_Subscription_V1_MsgSubscribeToPlanResponse>

  func msgCancel(
    _ request: Sentinel_Subscription_V1_MsgCancelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgCancelRequest, Sentinel_Subscription_V1_MsgCancelResponse>

  func msgAddQuota(
    _ request: Sentinel_Subscription_V1_MsgAddQuotaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgAddQuotaRequest, Sentinel_Subscription_V1_MsgAddQuotaResponse>

  func msgUpdateQuota(
    _ request: Sentinel_Subscription_V1_MsgUpdateQuotaRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgUpdateQuotaRequest, Sentinel_Subscription_V1_MsgUpdateQuotaResponse>
}

extension Sentinel_Subscription_V1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.subscription.v1.MsgService"
  }

  /// Unary call to MsgSubscribeToNode
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgSubscribeToNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgSubscribeToNode(
    _ request: Sentinel_Subscription_V1_MsgSubscribeToNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgSubscribeToNodeRequest, Sentinel_Subscription_V1_MsgSubscribeToNodeResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.subscription.v1.MsgService/MsgSubscribeToNode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgSubscribeToNodeInterceptors() ?? []
    )
  }

  /// Unary call to MsgSubscribeToPlan
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgSubscribeToPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgSubscribeToPlan(
    _ request: Sentinel_Subscription_V1_MsgSubscribeToPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgSubscribeToPlanRequest, Sentinel_Subscription_V1_MsgSubscribeToPlanResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.subscription.v1.MsgService/MsgSubscribeToPlan",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgSubscribeToPlanInterceptors() ?? []
    )
  }

  /// Unary call to MsgCancel
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgCancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgCancel(
    _ request: Sentinel_Subscription_V1_MsgCancelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgCancelRequest, Sentinel_Subscription_V1_MsgCancelResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.subscription.v1.MsgService/MsgCancel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgCancelInterceptors() ?? []
    )
  }

  /// Unary call to MsgAddQuota
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgAddQuota.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgAddQuota(
    _ request: Sentinel_Subscription_V1_MsgAddQuotaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgAddQuotaRequest, Sentinel_Subscription_V1_MsgAddQuotaResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.subscription.v1.MsgService/MsgAddQuota",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgAddQuotaInterceptors() ?? []
    )
  }

  /// Unary call to MsgUpdateQuota
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgUpdateQuota.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgUpdateQuota(
    _ request: Sentinel_Subscription_V1_MsgUpdateQuotaRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V1_MsgUpdateQuotaRequest, Sentinel_Subscription_V1_MsgUpdateQuotaResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.subscription.v1.MsgService/MsgUpdateQuota",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgUpdateQuotaInterceptors() ?? []
    )
  }
}

internal protocol Sentinel_Subscription_V1_MsgServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'msgSubscribeToNode'.
  func makeMsgSubscribeToNodeInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V1_MsgSubscribeToNodeRequest, Sentinel_Subscription_V1_MsgSubscribeToNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'msgSubscribeToPlan'.
  func makeMsgSubscribeToPlanInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V1_MsgSubscribeToPlanRequest, Sentinel_Subscription_V1_MsgSubscribeToPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'msgCancel'.
  func makeMsgCancelInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V1_MsgCancelRequest, Sentinel_Subscription_V1_MsgCancelResponse>]

  /// - Returns: Interceptors to use when invoking 'msgAddQuota'.
  func makeMsgAddQuotaInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V1_MsgAddQuotaRequest, Sentinel_Subscription_V1_MsgAddQuotaResponse>]

  /// - Returns: Interceptors to use when invoking 'msgUpdateQuota'.
  func makeMsgUpdateQuotaInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V1_MsgUpdateQuotaRequest, Sentinel_Subscription_V1_MsgUpdateQuotaResponse>]
}

internal final class Sentinel_Subscription_V1_MsgServiceClient: Sentinel_Subscription_V1_MsgServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Subscription_V1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.subscription.v1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Subscription_V1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Subscription_V1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Subscription_V1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func msgSubscribeToNode(request: Sentinel_Subscription_V1_MsgSubscribeToNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V1_MsgSubscribeToNodeResponse>

  func msgSubscribeToPlan(request: Sentinel_Subscription_V1_MsgSubscribeToPlanRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V1_MsgSubscribeToPlanResponse>

  func msgCancel(request: Sentinel_Subscription_V1_MsgCancelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V1_MsgCancelResponse>

  func msgAddQuota(request: Sentinel_Subscription_V1_MsgAddQuotaRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V1_MsgAddQuotaResponse>

  func msgUpdateQuota(request: Sentinel_Subscription_V1_MsgUpdateQuotaRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V1_MsgUpdateQuotaResponse>
}

extension Sentinel_Subscription_V1_MsgServiceProvider {
  internal var serviceName: Substring { return "sentinel.subscription.v1.MsgService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MsgSubscribeToNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V1_MsgSubscribeToNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V1_MsgSubscribeToNodeResponse>(),
        interceptors: self.interceptors?.makeMsgSubscribeToNodeInterceptors() ?? [],
        userFunction: self.msgSubscribeToNode(request:context:)
      )

    case "MsgSubscribeToPlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V1_MsgSubscribeToPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V1_MsgSubscribeToPlanResponse>(),
        interceptors: self.interceptors?.makeMsgSubscribeToPlanInterceptors() ?? [],
        userFunction: self.msgSubscribeToPlan(request:context:)
      )

    case "MsgCancel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V1_MsgCancelRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V1_MsgCancelResponse>(),
        interceptors: self.interceptors?.makeMsgCancelInterceptors() ?? [],
        userFunction: self.msgCancel(request:context:)
      )

    case "MsgAddQuota":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V1_MsgAddQuotaRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V1_MsgAddQuotaResponse>(),
        interceptors: self.interceptors?.makeMsgAddQuotaInterceptors() ?? [],
        userFunction: self.msgAddQuota(request:context:)
      )

    case "MsgUpdateQuota":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V1_MsgUpdateQuotaRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V1_MsgUpdateQuotaResponse>(),
        interceptors: self.interceptors?.makeMsgUpdateQuotaInterceptors() ?? [],
        userFunction: self.msgUpdateQuota(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Subscription_V1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'msgSubscribeToNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgSubscribeToNodeInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V1_MsgSubscribeToNodeRequest, Sentinel_Subscription_V1_MsgSubscribeToNodeResponse>]

  /// - Returns: Interceptors to use when handling 'msgSubscribeToPlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgSubscribeToPlanInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V1_MsgSubscribeToPlanRequest, Sentinel_Subscription_V1_MsgSubscribeToPlanResponse>]

  /// - Returns: Interceptors to use when handling 'msgCancel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgCancelInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V1_MsgCancelRequest, Sentinel_Subscription_V1_MsgCancelResponse>]

  /// - Returns: Interceptors to use when handling 'msgAddQuota'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgAddQuotaInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V1_MsgAddQuotaRequest, Sentinel_Subscription_V1_MsgAddQuotaResponse>]

  /// - Returns: Interceptors to use when handling 'msgUpdateQuota'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgUpdateQuotaInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V1_MsgUpdateQuotaRequest, Sentinel_Subscription_V1_MsgUpdateQuotaResponse>]
}
