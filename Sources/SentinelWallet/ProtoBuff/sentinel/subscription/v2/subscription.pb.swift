// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sentinel/subscription/v2/subscription.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sentinel_Subscription_V2_SubscriptionType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case typeUnspecified // = 0
  case typeNode // = 1
  case typePlan // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .typeUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .typeUnspecified
    case 1: self = .typeNode
    case 2: self = .typePlan
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .typeUnspecified: return 0
    case .typeNode: return 1
    case .typePlan: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sentinel_Subscription_V2_SubscriptionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sentinel_Subscription_V2_SubscriptionType] = [
    .typeUnspecified,
    .typeNode,
    .typePlan,
  ]
}

#endif  // swift(>=4.2)

struct Sentinel_Subscription_V2_BaseSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var address: String = String()

  var inactiveAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _inactiveAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_inactiveAt = newValue}
  }
  /// Returns true if `inactiveAt` has been explicitly set.
  var hasInactiveAt: Bool {return self._inactiveAt != nil}
  /// Clears the value of `inactiveAt`. Subsequent reads from it will return its default value.
  mutating func clearInactiveAt() {self._inactiveAt = nil}

  var status: Sentinel_Types_V1_Status = .unspecified

  var statusAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _statusAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_statusAt = newValue}
  }
  /// Returns true if `statusAt` has been explicitly set.
  var hasStatusAt: Bool {return self._statusAt != nil}
  /// Clears the value of `statusAt`. Subsequent reads from it will return its default value.
  mutating func clearStatusAt() {self._statusAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _inactiveAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _statusAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Sentinel_Subscription_V2_NodeSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Sentinel_Subscription_V2_BaseSubscription {
    get {return _base ?? Sentinel_Subscription_V2_BaseSubscription()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var nodeAddress: String = String()

  var gigabytes: Int64 = 0

  var hours: Int64 = 0

  var deposit: Cosmos_Base_V1beta1_Coin {
    get {return _deposit ?? Cosmos_Base_V1beta1_Coin()}
    set {_deposit = newValue}
  }
  /// Returns true if `deposit` has been explicitly set.
  var hasDeposit: Bool {return self._deposit != nil}
  /// Clears the value of `deposit`. Subsequent reads from it will return its default value.
  mutating func clearDeposit() {self._deposit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Sentinel_Subscription_V2_BaseSubscription? = nil
  fileprivate var _deposit: Cosmos_Base_V1beta1_Coin? = nil
}

struct Sentinel_Subscription_V2_PlanSubscription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Sentinel_Subscription_V2_BaseSubscription {
    get {return _base ?? Sentinel_Subscription_V2_BaseSubscription()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var planID: UInt64 = 0

  var denom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Sentinel_Subscription_V2_BaseSubscription? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sentinel_Subscription_V2_SubscriptionType: @unchecked Sendable {}
extension Sentinel_Subscription_V2_BaseSubscription: @unchecked Sendable {}
extension Sentinel_Subscription_V2_NodeSubscription: @unchecked Sendable {}
extension Sentinel_Subscription_V2_PlanSubscription: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sentinel.subscription.v2"

extension Sentinel_Subscription_V2_SubscriptionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "TYPE_NODE"),
    2: .same(proto: "TYPE_PLAN"),
  ]
}

extension Sentinel_Subscription_V2_BaseSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseSubscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "address"),
    3: .standard(proto: "inactive_at"),
    4: .same(proto: "status"),
    5: .standard(proto: "status_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._inactiveAt) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._statusAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    try { if let v = self._inactiveAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    try { if let v = self._statusAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Subscription_V2_BaseSubscription, rhs: Sentinel_Subscription_V2_BaseSubscription) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.address != rhs.address {return false}
    if lhs._inactiveAt != rhs._inactiveAt {return false}
    if lhs.status != rhs.status {return false}
    if lhs._statusAt != rhs._statusAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Subscription_V2_NodeSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeSubscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "node_address"),
    3: .same(proto: "gigabytes"),
    4: .same(proto: "hours"),
    5: .same(proto: "deposit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nodeAddress) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.gigabytes) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.hours) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._deposit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.nodeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeAddress, fieldNumber: 2)
    }
    if self.gigabytes != 0 {
      try visitor.visitSingularInt64Field(value: self.gigabytes, fieldNumber: 3)
    }
    if self.hours != 0 {
      try visitor.visitSingularInt64Field(value: self.hours, fieldNumber: 4)
    }
    try { if let v = self._deposit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Subscription_V2_NodeSubscription, rhs: Sentinel_Subscription_V2_NodeSubscription) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.nodeAddress != rhs.nodeAddress {return false}
    if lhs.gigabytes != rhs.gigabytes {return false}
    if lhs.hours != rhs.hours {return false}
    if lhs._deposit != rhs._deposit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sentinel_Subscription_V2_PlanSubscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlanSubscription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "base"),
    2: .standard(proto: "plan_id"),
    3: .same(proto: "denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.planID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.planID != 0 {
      try visitor.visitSingularUInt64Field(value: self.planID, fieldNumber: 2)
    }
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sentinel_Subscription_V2_PlanSubscription, rhs: Sentinel_Subscription_V2_PlanSubscription) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.planID != rhs.planID {return false}
    if lhs.denom != rhs.denom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
