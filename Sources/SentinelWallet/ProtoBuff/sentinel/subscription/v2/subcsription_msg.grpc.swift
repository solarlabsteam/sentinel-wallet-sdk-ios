//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: sentinel/subscription/v2/msg.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Subscription_V2_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Subscription_V2_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol? { get }

  func msgCancel(
    _ request: Sentinel_Subscription_V2_MsgCancelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_MsgCancelRequest, Sentinel_Subscription_V2_MsgCancelResponse>

  func msgAllocate(
    _ request: Sentinel_Subscription_V2_MsgAllocateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_MsgAllocateRequest, Sentinel_Subscription_V2_MsgAllocateResponse>
}

extension Sentinel_Subscription_V2_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.subscription.v2.MsgService"
  }

  /// Unary call to MsgCancel
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgCancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgCancel(
    _ request: Sentinel_Subscription_V2_MsgCancelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_MsgCancelRequest, Sentinel_Subscription_V2_MsgCancelResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgCancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgCancelInterceptors() ?? []
    )
  }

  /// Unary call to MsgAllocate
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgAllocate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgAllocate(
    _ request: Sentinel_Subscription_V2_MsgAllocateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_MsgAllocateRequest, Sentinel_Subscription_V2_MsgAllocateResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgAllocate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgAllocateInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Sentinel_Subscription_V2_MsgServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Sentinel_Subscription_V2_MsgServiceNIOClient")
internal final class Sentinel_Subscription_V2_MsgServiceClient: Sentinel_Subscription_V2_MsgServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sentinel.subscription.v2.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Sentinel_Subscription_V2_MsgServiceNIOClient: Sentinel_Subscription_V2_MsgServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.subscription.v2.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Subscription_V2_MsgServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol? { get }

  func makeMsgCancelCall(
    _ request: Sentinel_Subscription_V2_MsgCancelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_MsgCancelRequest, Sentinel_Subscription_V2_MsgCancelResponse>

  func makeMsgAllocateCall(
    _ request: Sentinel_Subscription_V2_MsgAllocateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_MsgAllocateRequest, Sentinel_Subscription_V2_MsgAllocateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Subscription_V2_MsgServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Subscription_V2_MsgServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeMsgCancelCall(
    _ request: Sentinel_Subscription_V2_MsgCancelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_MsgCancelRequest, Sentinel_Subscription_V2_MsgCancelResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgCancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgCancelInterceptors() ?? []
    )
  }

  internal func makeMsgAllocateCall(
    _ request: Sentinel_Subscription_V2_MsgAllocateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_MsgAllocateRequest, Sentinel_Subscription_V2_MsgAllocateResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgAllocate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgAllocateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Subscription_V2_MsgServiceAsyncClientProtocol {
  internal func msgCancel(
    _ request: Sentinel_Subscription_V2_MsgCancelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_MsgCancelResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgCancel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgCancelInterceptors() ?? []
    )
  }

  internal func msgAllocate(
    _ request: Sentinel_Subscription_V2_MsgAllocateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_MsgAllocateResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgAllocate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgAllocateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Sentinel_Subscription_V2_MsgServiceAsyncClient: Sentinel_Subscription_V2_MsgServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Sentinel_Subscription_V2_MsgServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'msgCancel'.
  func makeMsgCancelInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_MsgCancelRequest, Sentinel_Subscription_V2_MsgCancelResponse>]

  /// - Returns: Interceptors to use when invoking 'msgAllocate'.
  func makeMsgAllocateInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_MsgAllocateRequest, Sentinel_Subscription_V2_MsgAllocateResponse>]
}

internal enum Sentinel_Subscription_V2_MsgServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "sentinel.subscription.v2.MsgService",
    methods: [
      Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgCancel,
      Sentinel_Subscription_V2_MsgServiceClientMetadata.Methods.msgAllocate,
    ]
  )

  internal enum Methods {
    internal static let msgCancel = GRPCMethodDescriptor(
      name: "MsgCancel",
      path: "/sentinel.subscription.v2.MsgService/MsgCancel",
      type: GRPCCallType.unary
    )

    internal static let msgAllocate = GRPCMethodDescriptor(
      name: "MsgAllocate",
      path: "/sentinel.subscription.v2.MsgService/MsgAllocate",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Subscription_V2_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Subscription_V2_MsgServiceServerInterceptorFactoryProtocol? { get }

  func msgCancel(request: Sentinel_Subscription_V2_MsgCancelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_MsgCancelResponse>

  func msgAllocate(request: Sentinel_Subscription_V2_MsgAllocateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_MsgAllocateResponse>
}

extension Sentinel_Subscription_V2_MsgServiceProvider {
  internal var serviceName: Substring {
    return Sentinel_Subscription_V2_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MsgCancel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_MsgCancelRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_MsgCancelResponse>(),
        interceptors: self.interceptors?.makeMsgCancelInterceptors() ?? [],
        userFunction: self.msgCancel(request:context:)
      )

    case "MsgAllocate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_MsgAllocateRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_MsgAllocateResponse>(),
        interceptors: self.interceptors?.makeMsgAllocateInterceptors() ?? [],
        userFunction: self.msgAllocate(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Subscription_V2_MsgServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Subscription_V2_MsgServiceServerInterceptorFactoryProtocol? { get }

  func msgCancel(
    request: Sentinel_Subscription_V2_MsgCancelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_MsgCancelResponse

  func msgAllocate(
    request: Sentinel_Subscription_V2_MsgAllocateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_MsgAllocateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Subscription_V2_MsgServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Subscription_V2_MsgServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Sentinel_Subscription_V2_MsgServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Sentinel_Subscription_V2_MsgServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MsgCancel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_MsgCancelRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_MsgCancelResponse>(),
        interceptors: self.interceptors?.makeMsgCancelInterceptors() ?? [],
        wrapping: { try await self.msgCancel(request: $0, context: $1) }
      )

    case "MsgAllocate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_MsgAllocateRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_MsgAllocateResponse>(),
        interceptors: self.interceptors?.makeMsgAllocateInterceptors() ?? [],
        wrapping: { try await self.msgAllocate(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Subscription_V2_MsgServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'msgCancel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgCancelInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_MsgCancelRequest, Sentinel_Subscription_V2_MsgCancelResponse>]

  /// - Returns: Interceptors to use when handling 'msgAllocate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgAllocateInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_MsgAllocateRequest, Sentinel_Subscription_V2_MsgAllocateResponse>]
}

internal enum Sentinel_Subscription_V2_MsgServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MsgService",
    fullName: "sentinel.subscription.v2.MsgService",
    methods: [
      Sentinel_Subscription_V2_MsgServiceServerMetadata.Methods.msgCancel,
      Sentinel_Subscription_V2_MsgServiceServerMetadata.Methods.msgAllocate,
    ]
  )

  internal enum Methods {
    internal static let msgCancel = GRPCMethodDescriptor(
      name: "MsgCancel",
      path: "/sentinel.subscription.v2.MsgService/MsgCancel",
      type: GRPCCallType.unary
    )

    internal static let msgAllocate = GRPCMethodDescriptor(
      name: "MsgAllocate",
      path: "/sentinel.subscription.v2.MsgService/MsgAllocate",
      type: GRPCCallType.unary
    )
  }
}
