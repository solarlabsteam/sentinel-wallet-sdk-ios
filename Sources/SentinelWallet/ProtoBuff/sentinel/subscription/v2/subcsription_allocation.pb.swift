// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sentinel/subscription/v2/allocation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct Sentinel_Subscription_V2_Allocation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    public var id: UInt64 = 0
    
    public var address: String = String()
    
    public  var grantedBytes: String = String()
    
    public  var utilisedBytes: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sentinel_Subscription_V2_Allocation: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sentinel.subscription.v2"

extension Sentinel_Subscription_V2_Allocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".Allocation"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "address"),
        3: .standard(proto: "granted_bytes"),
        4: .standard(proto: "utilised_bytes"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.grantedBytes) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.utilisedBytes) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.id != 0 {
            try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
        }
        if !self.address.isEmpty {
            try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
        }
        if !self.grantedBytes.isEmpty {
            try visitor.visitSingularStringField(value: self.grantedBytes, fieldNumber: 3)
        }
        if !self.utilisedBytes.isEmpty {
            try visitor.visitSingularStringField(value: self.utilisedBytes, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: Sentinel_Subscription_V2_Allocation, rhs: Sentinel_Subscription_V2_Allocation) -> Bool {
        if lhs.id != rhs.id {return false}
        if lhs.address != rhs.address {return false}
        if lhs.grantedBytes != rhs.grantedBytes {return false}
        if lhs.utilisedBytes != rhs.utilisedBytes {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
