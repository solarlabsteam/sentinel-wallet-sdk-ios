//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: sentinel/subscription/v2/querier.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Subscription_V2_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Subscription_V2_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func querySubscriptions(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsRequest, Sentinel_Subscription_V2_QuerySubscriptionsResponse>

  func querySubscriptionsForAccount(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest, Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse>

  func querySubscriptionsForNode(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest, Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse>

  func querySubscriptionsForPlan(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest, Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse>

  func querySubscription(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionRequest, Sentinel_Subscription_V2_QuerySubscriptionResponse>

  func queryAllocations(
    _ request: Sentinel_Subscription_V2_QueryAllocationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryAllocationsRequest, Sentinel_Subscription_V2_QueryAllocationsResponse>

  func queryAllocation(
    _ request: Sentinel_Subscription_V2_QueryAllocationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryAllocationRequest, Sentinel_Subscription_V2_QueryAllocationResponse>

  func queryPayouts(
    _ request: Sentinel_Subscription_V2_QueryPayoutsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutsRequest, Sentinel_Subscription_V2_QueryPayoutsResponse>

  func queryPayoutsForAccount(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest, Sentinel_Subscription_V2_QueryPayoutsForAccountResponse>

  func queryPayoutsForNode(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest, Sentinel_Subscription_V2_QueryPayoutsForNodeResponse>

  func queryPayout(
    _ request: Sentinel_Subscription_V2_QueryPayoutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutRequest, Sentinel_Subscription_V2_QueryPayoutResponse>

  func queryParams(
    _ request: Sentinel_Subscription_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryParamsRequest, Sentinel_Subscription_V2_QueryParamsResponse>
}

extension Sentinel_Subscription_V2_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.subscription.v2.QueryService"
  }

  /// Unary call to QuerySubscriptions
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriptions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriptions(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsRequest, Sentinel_Subscription_V2_QuerySubscriptionsResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriptionsForAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriptionsForAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriptionsForAccount(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest, Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForAccountInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriptionsForNode
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriptionsForNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriptionsForNode(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest, Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForNodeInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscriptionsForPlan
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscriptionsForPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscriptionsForPlan(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest, Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForPlanInterceptors() ?? []
    )
  }

  /// Unary call to QuerySubscription
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySubscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySubscription(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QuerySubscriptionRequest, Sentinel_Subscription_V2_QuerySubscriptionResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionInterceptors() ?? []
    )
  }

  /// Unary call to QueryAllocations
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAllocations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAllocations(
    _ request: Sentinel_Subscription_V2_QueryAllocationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryAllocationsRequest, Sentinel_Subscription_V2_QueryAllocationsResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllocationsInterceptors() ?? []
    )
  }

  /// Unary call to QueryAllocation
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAllocation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAllocation(
    _ request: Sentinel_Subscription_V2_QueryAllocationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryAllocationRequest, Sentinel_Subscription_V2_QueryAllocationResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllocationInterceptors() ?? []
    )
  }

  /// Unary call to QueryPayouts
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPayouts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPayouts(
    _ request: Sentinel_Subscription_V2_QueryPayoutsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutsRequest, Sentinel_Subscription_V2_QueryPayoutsResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayouts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsInterceptors() ?? []
    )
  }

  /// Unary call to QueryPayoutsForAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPayoutsForAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPayoutsForAccount(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest, Sentinel_Subscription_V2_QueryPayoutsForAccountResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsForAccountInterceptors() ?? []
    )
  }

  /// Unary call to QueryPayoutsForNode
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPayoutsForNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPayoutsForNode(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest, Sentinel_Subscription_V2_QueryPayoutsForNodeResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsForNodeInterceptors() ?? []
    )
  }

  /// Unary call to QueryPayout
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPayout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPayout(
    _ request: Sentinel_Subscription_V2_QueryPayoutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryPayoutRequest, Sentinel_Subscription_V2_QueryPayoutResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutInterceptors() ?? []
    )
  }

  /// Unary call to QueryParams
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Sentinel_Subscription_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Subscription_V2_QueryParamsRequest, Sentinel_Subscription_V2_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Sentinel_Subscription_V2_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Sentinel_Subscription_V2_QueryServiceNIOClient")
internal final class Sentinel_Subscription_V2_QueryServiceClient: Sentinel_Subscription_V2_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sentinel.subscription.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Sentinel_Subscription_V2_QueryServiceNIOClient: Sentinel_Subscription_V2_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.subscription.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Subscription_V2_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makeQuerySubscriptionsCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsRequest, Sentinel_Subscription_V2_QuerySubscriptionsResponse>

  func makeQuerySubscriptionsForAccountCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest, Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse>

  func makeQuerySubscriptionsForNodeCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest, Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse>

  func makeQuerySubscriptionsForPlanCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest, Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse>

  func makeQuerySubscriptionCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionRequest, Sentinel_Subscription_V2_QuerySubscriptionResponse>

  func makeQueryAllocationsCall(
    _ request: Sentinel_Subscription_V2_QueryAllocationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryAllocationsRequest, Sentinel_Subscription_V2_QueryAllocationsResponse>

  func makeQueryAllocationCall(
    _ request: Sentinel_Subscription_V2_QueryAllocationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryAllocationRequest, Sentinel_Subscription_V2_QueryAllocationResponse>

  func makeQueryPayoutsCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutsRequest, Sentinel_Subscription_V2_QueryPayoutsResponse>

  func makeQueryPayoutsForAccountCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest, Sentinel_Subscription_V2_QueryPayoutsForAccountResponse>

  func makeQueryPayoutsForNodeCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForNodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest, Sentinel_Subscription_V2_QueryPayoutsForNodeResponse>

  func makeQueryPayoutCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutRequest, Sentinel_Subscription_V2_QueryPayoutResponse>

  func makeQueryParamsCall(
    _ request: Sentinel_Subscription_V2_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryParamsRequest, Sentinel_Subscription_V2_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Subscription_V2_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Subscription_V2_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQuerySubscriptionsCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsRequest, Sentinel_Subscription_V2_QuerySubscriptionsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriptionsForAccountCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest, Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForAccountInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriptionsForNodeCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest, Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForNodeInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriptionsForPlanCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest, Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForPlanInterceptors() ?? []
    )
  }

  internal func makeQuerySubscriptionCall(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QuerySubscriptionRequest, Sentinel_Subscription_V2_QuerySubscriptionResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionInterceptors() ?? []
    )
  }

  internal func makeQueryAllocationsCall(
    _ request: Sentinel_Subscription_V2_QueryAllocationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryAllocationsRequest, Sentinel_Subscription_V2_QueryAllocationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllocationsInterceptors() ?? []
    )
  }

  internal func makeQueryAllocationCall(
    _ request: Sentinel_Subscription_V2_QueryAllocationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryAllocationRequest, Sentinel_Subscription_V2_QueryAllocationResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllocationInterceptors() ?? []
    )
  }

  internal func makeQueryPayoutsCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutsRequest, Sentinel_Subscription_V2_QueryPayoutsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayouts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsInterceptors() ?? []
    )
  }

  internal func makeQueryPayoutsForAccountCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest, Sentinel_Subscription_V2_QueryPayoutsForAccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsForAccountInterceptors() ?? []
    )
  }

  internal func makeQueryPayoutsForNodeCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForNodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest, Sentinel_Subscription_V2_QueryPayoutsForNodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsForNodeInterceptors() ?? []
    )
  }

  internal func makeQueryPayoutCall(
    _ request: Sentinel_Subscription_V2_QueryPayoutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryPayoutRequest, Sentinel_Subscription_V2_QueryPayoutResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutInterceptors() ?? []
    )
  }

  internal func makeQueryParamsCall(
    _ request: Sentinel_Subscription_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Subscription_V2_QueryParamsRequest, Sentinel_Subscription_V2_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Subscription_V2_QueryServiceAsyncClientProtocol {
  internal func querySubscriptions(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsInterceptors() ?? []
    )
  }

  internal func querySubscriptionsForAccount(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForAccountInterceptors() ?? []
    )
  }

  internal func querySubscriptionsForNode(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForNodeInterceptors() ?? []
    )
  }

  internal func querySubscriptionsForPlan(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionsForPlanInterceptors() ?? []
    )
  }

  internal func querySubscription(
    _ request: Sentinel_Subscription_V2_QuerySubscriptionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscription.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySubscriptionInterceptors() ?? []
    )
  }

  internal func queryAllocations(
    _ request: Sentinel_Subscription_V2_QueryAllocationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QueryAllocationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllocationsInterceptors() ?? []
    )
  }

  internal func queryAllocation(
    _ request: Sentinel_Subscription_V2_QueryAllocationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QueryAllocationResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllocationInterceptors() ?? []
    )
  }

  internal func queryPayouts(
    _ request: Sentinel_Subscription_V2_QueryPayoutsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayouts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsInterceptors() ?? []
    )
  }

  internal func queryPayoutsForAccount(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutsForAccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsForAccountInterceptors() ?? []
    )
  }

  internal func queryPayoutsForNode(
    _ request: Sentinel_Subscription_V2_QueryPayoutsForNodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutsForNodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForNode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutsForNodeInterceptors() ?? []
    )
  }

  internal func queryPayout(
    _ request: Sentinel_Subscription_V2_QueryPayoutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPayoutInterceptors() ?? []
    )
  }

  internal func queryParams(
    _ request: Sentinel_Subscription_V2_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Subscription_V2_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Sentinel_Subscription_V2_QueryServiceAsyncClient: Sentinel_Subscription_V2_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Sentinel_Subscription_V2_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'querySubscriptions'.
  func makeQuerySubscriptionsInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsRequest, Sentinel_Subscription_V2_QuerySubscriptionsResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriptionsForAccount'.
  func makeQuerySubscriptionsForAccountInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest, Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriptionsForNode'.
  func makeQuerySubscriptionsForNodeInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest, Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscriptionsForPlan'.
  func makeQuerySubscriptionsForPlanInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest, Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'querySubscription'.
  func makeQuerySubscriptionInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QuerySubscriptionRequest, Sentinel_Subscription_V2_QuerySubscriptionResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAllocations'.
  func makeQueryAllocationsInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QueryAllocationsRequest, Sentinel_Subscription_V2_QueryAllocationsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAllocation'.
  func makeQueryAllocationInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QueryAllocationRequest, Sentinel_Subscription_V2_QueryAllocationResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPayouts'.
  func makeQueryPayoutsInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QueryPayoutsRequest, Sentinel_Subscription_V2_QueryPayoutsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPayoutsForAccount'.
  func makeQueryPayoutsForAccountInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest, Sentinel_Subscription_V2_QueryPayoutsForAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPayoutsForNode'.
  func makeQueryPayoutsForNodeInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest, Sentinel_Subscription_V2_QueryPayoutsForNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPayout'.
  func makeQueryPayoutInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QueryPayoutRequest, Sentinel_Subscription_V2_QueryPayoutResponse>]

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Sentinel_Subscription_V2_QueryParamsRequest, Sentinel_Subscription_V2_QueryParamsResponse>]
}

internal enum Sentinel_Subscription_V2_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.subscription.v2.QueryService",
    methods: [
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptions,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForAccount,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForNode,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscriptionsForPlan,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.querySubscription,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocations,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryAllocation,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayouts,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForAccount,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayoutsForNode,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryPayout,
      Sentinel_Subscription_V2_QueryServiceClientMetadata.Methods.queryParams,
    ]
  )

  internal enum Methods {
    internal static let querySubscriptions = GRPCMethodDescriptor(
      name: "QuerySubscriptions",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptions",
      type: GRPCCallType.unary
    )

    internal static let querySubscriptionsForAccount = GRPCMethodDescriptor(
      name: "QuerySubscriptionsForAccount",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptionsForAccount",
      type: GRPCCallType.unary
    )

    internal static let querySubscriptionsForNode = GRPCMethodDescriptor(
      name: "QuerySubscriptionsForNode",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptionsForNode",
      type: GRPCCallType.unary
    )

    internal static let querySubscriptionsForPlan = GRPCMethodDescriptor(
      name: "QuerySubscriptionsForPlan",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptionsForPlan",
      type: GRPCCallType.unary
    )

    internal static let querySubscription = GRPCMethodDescriptor(
      name: "QuerySubscription",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscription",
      type: GRPCCallType.unary
    )

    internal static let queryAllocations = GRPCMethodDescriptor(
      name: "QueryAllocations",
      path: "/sentinel.subscription.v2.QueryService/QueryAllocations",
      type: GRPCCallType.unary
    )

    internal static let queryAllocation = GRPCMethodDescriptor(
      name: "QueryAllocation",
      path: "/sentinel.subscription.v2.QueryService/QueryAllocation",
      type: GRPCCallType.unary
    )

    internal static let queryPayouts = GRPCMethodDescriptor(
      name: "QueryPayouts",
      path: "/sentinel.subscription.v2.QueryService/QueryPayouts",
      type: GRPCCallType.unary
    )

    internal static let queryPayoutsForAccount = GRPCMethodDescriptor(
      name: "QueryPayoutsForAccount",
      path: "/sentinel.subscription.v2.QueryService/QueryPayoutsForAccount",
      type: GRPCCallType.unary
    )

    internal static let queryPayoutsForNode = GRPCMethodDescriptor(
      name: "QueryPayoutsForNode",
      path: "/sentinel.subscription.v2.QueryService/QueryPayoutsForNode",
      type: GRPCCallType.unary
    )

    internal static let queryPayout = GRPCMethodDescriptor(
      name: "QueryPayout",
      path: "/sentinel.subscription.v2.QueryService/QueryPayout",
      type: GRPCCallType.unary
    )

    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/sentinel.subscription.v2.QueryService/QueryParams",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Subscription_V2_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Subscription_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func querySubscriptions(request: Sentinel_Subscription_V2_QuerySubscriptionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QuerySubscriptionsResponse>

  func querySubscriptionsForAccount(request: Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse>

  func querySubscriptionsForNode(request: Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse>

  func querySubscriptionsForPlan(request: Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse>

  func querySubscription(request: Sentinel_Subscription_V2_QuerySubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QuerySubscriptionResponse>

  func queryAllocations(request: Sentinel_Subscription_V2_QueryAllocationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QueryAllocationsResponse>

  func queryAllocation(request: Sentinel_Subscription_V2_QueryAllocationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QueryAllocationResponse>

  func queryPayouts(request: Sentinel_Subscription_V2_QueryPayoutsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QueryPayoutsResponse>

  func queryPayoutsForAccount(request: Sentinel_Subscription_V2_QueryPayoutsForAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QueryPayoutsForAccountResponse>

  func queryPayoutsForNode(request: Sentinel_Subscription_V2_QueryPayoutsForNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QueryPayoutsForNodeResponse>

  func queryPayout(request: Sentinel_Subscription_V2_QueryPayoutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QueryPayoutResponse>

  func queryParams(request: Sentinel_Subscription_V2_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Subscription_V2_QueryParamsResponse>
}

extension Sentinel_Subscription_V2_QueryServiceProvider {
  internal var serviceName: Substring {
    return Sentinel_Subscription_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QuerySubscriptions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsInterceptors() ?? [],
        userFunction: self.querySubscriptions(request:context:)
      )

    case "QuerySubscriptionsForAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsForAccountInterceptors() ?? [],
        userFunction: self.querySubscriptionsForAccount(request:context:)
      )

    case "QuerySubscriptionsForNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsForNodeInterceptors() ?? [],
        userFunction: self.querySubscriptionsForNode(request:context:)
      )

    case "QuerySubscriptionsForPlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsForPlanInterceptors() ?? [],
        userFunction: self.querySubscriptionsForPlan(request:context:)
      )

    case "QuerySubscription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionInterceptors() ?? [],
        userFunction: self.querySubscription(request:context:)
      )

    case "QueryAllocations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryAllocationsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryAllocationsResponse>(),
        interceptors: self.interceptors?.makeQueryAllocationsInterceptors() ?? [],
        userFunction: self.queryAllocations(request:context:)
      )

    case "QueryAllocation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryAllocationRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryAllocationResponse>(),
        interceptors: self.interceptors?.makeQueryAllocationInterceptors() ?? [],
        userFunction: self.queryAllocation(request:context:)
      )

    case "QueryPayouts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutsResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutsInterceptors() ?? [],
        userFunction: self.queryPayouts(request:context:)
      )

    case "QueryPayoutsForAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutsForAccountResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutsForAccountInterceptors() ?? [],
        userFunction: self.queryPayoutsForAccount(request:context:)
      )

    case "QueryPayoutsForNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutsForNodeResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutsForNodeInterceptors() ?? [],
        userFunction: self.queryPayoutsForNode(request:context:)
      )

    case "QueryPayout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutInterceptors() ?? [],
        userFunction: self.queryPayout(request:context:)
      )

    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Subscription_V2_QueryServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Subscription_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func querySubscriptions(
    request: Sentinel_Subscription_V2_QuerySubscriptionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsResponse

  func querySubscriptionsForAccount(
    request: Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse

  func querySubscriptionsForNode(
    request: Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse

  func querySubscriptionsForPlan(
    request: Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse

  func querySubscription(
    request: Sentinel_Subscription_V2_QuerySubscriptionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QuerySubscriptionResponse

  func queryAllocations(
    request: Sentinel_Subscription_V2_QueryAllocationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QueryAllocationsResponse

  func queryAllocation(
    request: Sentinel_Subscription_V2_QueryAllocationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QueryAllocationResponse

  func queryPayouts(
    request: Sentinel_Subscription_V2_QueryPayoutsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutsResponse

  func queryPayoutsForAccount(
    request: Sentinel_Subscription_V2_QueryPayoutsForAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutsForAccountResponse

  func queryPayoutsForNode(
    request: Sentinel_Subscription_V2_QueryPayoutsForNodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutsForNodeResponse

  func queryPayout(
    request: Sentinel_Subscription_V2_QueryPayoutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QueryPayoutResponse

  func queryParams(
    request: Sentinel_Subscription_V2_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Subscription_V2_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Subscription_V2_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Subscription_V2_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Sentinel_Subscription_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Sentinel_Subscription_V2_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QuerySubscriptions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsInterceptors() ?? [],
        wrapping: { try await self.querySubscriptions(request: $0, context: $1) }
      )

    case "QuerySubscriptionsForAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsForAccountInterceptors() ?? [],
        wrapping: { try await self.querySubscriptionsForAccount(request: $0, context: $1) }
      )

    case "QuerySubscriptionsForNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsForNodeInterceptors() ?? [],
        wrapping: { try await self.querySubscriptionsForNode(request: $0, context: $1) }
      )

    case "QuerySubscriptionsForPlan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionsForPlanInterceptors() ?? [],
        wrapping: { try await self.querySubscriptionsForPlan(request: $0, context: $1) }
      )

    case "QuerySubscription":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QuerySubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QuerySubscriptionResponse>(),
        interceptors: self.interceptors?.makeQuerySubscriptionInterceptors() ?? [],
        wrapping: { try await self.querySubscription(request: $0, context: $1) }
      )

    case "QueryAllocations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryAllocationsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryAllocationsResponse>(),
        interceptors: self.interceptors?.makeQueryAllocationsInterceptors() ?? [],
        wrapping: { try await self.queryAllocations(request: $0, context: $1) }
      )

    case "QueryAllocation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryAllocationRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryAllocationResponse>(),
        interceptors: self.interceptors?.makeQueryAllocationInterceptors() ?? [],
        wrapping: { try await self.queryAllocation(request: $0, context: $1) }
      )

    case "QueryPayouts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutsResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutsInterceptors() ?? [],
        wrapping: { try await self.queryPayouts(request: $0, context: $1) }
      )

    case "QueryPayoutsForAccount":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutsForAccountResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutsForAccountInterceptors() ?? [],
        wrapping: { try await self.queryPayoutsForAccount(request: $0, context: $1) }
      )

    case "QueryPayoutsForNode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutsForNodeResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutsForNodeInterceptors() ?? [],
        wrapping: { try await self.queryPayoutsForNode(request: $0, context: $1) }
      )

    case "QueryPayout":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryPayoutRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryPayoutResponse>(),
        interceptors: self.interceptors?.makeQueryPayoutInterceptors() ?? [],
        wrapping: { try await self.queryPayout(request: $0, context: $1) }
      )

    case "QueryParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Subscription_V2_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Subscription_V2_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        wrapping: { try await self.queryParams(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Subscription_V2_QueryServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'querySubscriptions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriptionsInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsRequest, Sentinel_Subscription_V2_QuerySubscriptionsResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriptionsForAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriptionsForAccountInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsForAccountRequest, Sentinel_Subscription_V2_QuerySubscriptionsForAccountResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriptionsForNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriptionsForNodeInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsForNodeRequest, Sentinel_Subscription_V2_QuerySubscriptionsForNodeResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscriptionsForPlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriptionsForPlanInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QuerySubscriptionsForPlanRequest, Sentinel_Subscription_V2_QuerySubscriptionsForPlanResponse>]

  /// - Returns: Interceptors to use when handling 'querySubscription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySubscriptionInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QuerySubscriptionRequest, Sentinel_Subscription_V2_QuerySubscriptionResponse>]

  /// - Returns: Interceptors to use when handling 'queryAllocations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAllocationsInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QueryAllocationsRequest, Sentinel_Subscription_V2_QueryAllocationsResponse>]

  /// - Returns: Interceptors to use when handling 'queryAllocation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAllocationInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QueryAllocationRequest, Sentinel_Subscription_V2_QueryAllocationResponse>]

  /// - Returns: Interceptors to use when handling 'queryPayouts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPayoutsInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QueryPayoutsRequest, Sentinel_Subscription_V2_QueryPayoutsResponse>]

  /// - Returns: Interceptors to use when handling 'queryPayoutsForAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPayoutsForAccountInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QueryPayoutsForAccountRequest, Sentinel_Subscription_V2_QueryPayoutsForAccountResponse>]

  /// - Returns: Interceptors to use when handling 'queryPayoutsForNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPayoutsForNodeInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QueryPayoutsForNodeRequest, Sentinel_Subscription_V2_QueryPayoutsForNodeResponse>]

  /// - Returns: Interceptors to use when handling 'queryPayout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPayoutInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QueryPayoutRequest, Sentinel_Subscription_V2_QueryPayoutResponse>]

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Sentinel_Subscription_V2_QueryParamsRequest, Sentinel_Subscription_V2_QueryParamsResponse>]
}

internal enum Sentinel_Subscription_V2_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.subscription.v2.QueryService",
    methods: [
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.querySubscriptions,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.querySubscriptionsForAccount,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.querySubscriptionsForNode,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.querySubscriptionsForPlan,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.querySubscription,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.queryAllocations,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.queryAllocation,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.queryPayouts,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.queryPayoutsForAccount,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.queryPayoutsForNode,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.queryPayout,
      Sentinel_Subscription_V2_QueryServiceServerMetadata.Methods.queryParams,
    ]
  )

  internal enum Methods {
    internal static let querySubscriptions = GRPCMethodDescriptor(
      name: "QuerySubscriptions",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptions",
      type: GRPCCallType.unary
    )

    internal static let querySubscriptionsForAccount = GRPCMethodDescriptor(
      name: "QuerySubscriptionsForAccount",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptionsForAccount",
      type: GRPCCallType.unary
    )

    internal static let querySubscriptionsForNode = GRPCMethodDescriptor(
      name: "QuerySubscriptionsForNode",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptionsForNode",
      type: GRPCCallType.unary
    )

    internal static let querySubscriptionsForPlan = GRPCMethodDescriptor(
      name: "QuerySubscriptionsForPlan",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscriptionsForPlan",
      type: GRPCCallType.unary
    )

    internal static let querySubscription = GRPCMethodDescriptor(
      name: "QuerySubscription",
      path: "/sentinel.subscription.v2.QueryService/QuerySubscription",
      type: GRPCCallType.unary
    )

    internal static let queryAllocations = GRPCMethodDescriptor(
      name: "QueryAllocations",
      path: "/sentinel.subscription.v2.QueryService/QueryAllocations",
      type: GRPCCallType.unary
    )

    internal static let queryAllocation = GRPCMethodDescriptor(
      name: "QueryAllocation",
      path: "/sentinel.subscription.v2.QueryService/QueryAllocation",
      type: GRPCCallType.unary
    )

    internal static let queryPayouts = GRPCMethodDescriptor(
      name: "QueryPayouts",
      path: "/sentinel.subscription.v2.QueryService/QueryPayouts",
      type: GRPCCallType.unary
    )

    internal static let queryPayoutsForAccount = GRPCMethodDescriptor(
      name: "QueryPayoutsForAccount",
      path: "/sentinel.subscription.v2.QueryService/QueryPayoutsForAccount",
      type: GRPCCallType.unary
    )

    internal static let queryPayoutsForNode = GRPCMethodDescriptor(
      name: "QueryPayoutsForNode",
      path: "/sentinel.subscription.v2.QueryService/QueryPayoutsForNode",
      type: GRPCCallType.unary
    )

    internal static let queryPayout = GRPCMethodDescriptor(
      name: "QueryPayout",
      path: "/sentinel.subscription.v2.QueryService/QueryPayout",
      type: GRPCCallType.unary
    )

    internal static let queryParams = GRPCMethodDescriptor(
      name: "QueryParams",
      path: "/sentinel.subscription.v2.QueryService/QueryParams",
      type: GRPCCallType.unary
    )
  }
}
