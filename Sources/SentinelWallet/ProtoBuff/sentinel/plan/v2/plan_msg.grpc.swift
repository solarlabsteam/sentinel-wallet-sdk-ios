//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sentinel/plan/v2/msg.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Plan_V2_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Plan_V2_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Plan_V2_MsgServiceClientInterceptorFactoryProtocol? { get }

  func msgCreate(
    _ request: Sentinel_Plan_V2_MsgCreateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_MsgCreateRequest, Sentinel_Plan_V2_MsgCreateResponse>

  func msgUpdateStatus(
    _ request: Sentinel_Plan_V2_MsgUpdateStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_MsgUpdateStatusRequest, Sentinel_Plan_V2_MsgUpdateStatusResponse>

  func msgLinkNode(
    _ request: Sentinel_Plan_V2_MsgLinkNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_MsgLinkNodeRequest, Sentinel_Plan_V2_MsgLinkNodeResponse>

  func msgUnlinkNode(
    _ request: Sentinel_Plan_V2_MsgUnlinkNodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_MsgUnlinkNodeRequest, Sentinel_Plan_V2_MsgUnlinkNodeResponse>

  func msgSubscribe(
    _ request: Sentinel_Plan_V2_MsgSubscribeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_MsgSubscribeRequest, Sentinel_Plan_V2_MsgSubscribeResponse>
}

extension Sentinel_Plan_V2_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.plan.v2.MsgService"
  }

  /// Unary call to MsgCreate
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgCreate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgCreate(
    _ request: Sentinel_Plan_V2_MsgCreateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_MsgCreateRequest, Sentinel_Plan_V2_MsgCreateResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.plan.v2.MsgService/MsgCreate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgCreateInterceptors() ?? []
    )
  }

  /// Unary call to MsgUpdateStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgUpdateStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgUpdateStatus(
    _ request: Sentinel_Plan_V2_MsgUpdateStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_MsgUpdateStatusRequest, Sentinel_Plan_V2_MsgUpdateStatusResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.plan.v2.MsgService/MsgUpdateStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgUpdateStatusInterceptors() ?? []
    )
  }

  /// Unary call to MsgLinkNode
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgLinkNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgLinkNode(
    _ request: Sentinel_Plan_V2_MsgLinkNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_MsgLinkNodeRequest, Sentinel_Plan_V2_MsgLinkNodeResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.plan.v2.MsgService/MsgLinkNode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgLinkNodeInterceptors() ?? []
    )
  }

  /// Unary call to MsgUnlinkNode
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgUnlinkNode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgUnlinkNode(
    _ request: Sentinel_Plan_V2_MsgUnlinkNodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_MsgUnlinkNodeRequest, Sentinel_Plan_V2_MsgUnlinkNodeResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.plan.v2.MsgService/MsgUnlinkNode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgUnlinkNodeInterceptors() ?? []
    )
  }

  /// Unary call to MsgSubscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to MsgSubscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func msgSubscribe(
    _ request: Sentinel_Plan_V2_MsgSubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_MsgSubscribeRequest, Sentinel_Plan_V2_MsgSubscribeResponse> {
    return self.makeUnaryCall(
      path: "/sentinel.plan.v2.MsgService/MsgSubscribe",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMsgSubscribeInterceptors() ?? []
    )
  }
}

internal protocol Sentinel_Plan_V2_MsgServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'msgCreate'.
  func makeMsgCreateInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_MsgCreateRequest, Sentinel_Plan_V2_MsgCreateResponse>]

  /// - Returns: Interceptors to use when invoking 'msgUpdateStatus'.
  func makeMsgUpdateStatusInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_MsgUpdateStatusRequest, Sentinel_Plan_V2_MsgUpdateStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'msgLinkNode'.
  func makeMsgLinkNodeInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_MsgLinkNodeRequest, Sentinel_Plan_V2_MsgLinkNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'msgUnlinkNode'.
  func makeMsgUnlinkNodeInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_MsgUnlinkNodeRequest, Sentinel_Plan_V2_MsgUnlinkNodeResponse>]

  /// - Returns: Interceptors to use when invoking 'msgSubscribe'.
  func makeMsgSubscribeInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_MsgSubscribeRequest, Sentinel_Plan_V2_MsgSubscribeResponse>]
}

internal final class Sentinel_Plan_V2_MsgServiceClient: Sentinel_Plan_V2_MsgServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Plan_V2_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.plan.v2.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Plan_V2_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Plan_V2_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Plan_V2_MsgServiceServerInterceptorFactoryProtocol? { get }

  func msgCreate(request: Sentinel_Plan_V2_MsgCreateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_MsgCreateResponse>

  func msgUpdateStatus(request: Sentinel_Plan_V2_MsgUpdateStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_MsgUpdateStatusResponse>

  func msgLinkNode(request: Sentinel_Plan_V2_MsgLinkNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_MsgLinkNodeResponse>

  func msgUnlinkNode(request: Sentinel_Plan_V2_MsgUnlinkNodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_MsgUnlinkNodeResponse>

  func msgSubscribe(request: Sentinel_Plan_V2_MsgSubscribeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_MsgSubscribeResponse>
}

extension Sentinel_Plan_V2_MsgServiceProvider {
  internal var serviceName: Substring { return "sentinel.plan.v2.MsgService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MsgCreate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_MsgCreateRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_MsgCreateResponse>(),
        interceptors: self.interceptors?.makeMsgCreateInterceptors() ?? [],
        userFunction: self.msgCreate(request:context:)
      )

    case "MsgUpdateStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_MsgUpdateStatusRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_MsgUpdateStatusResponse>(),
        interceptors: self.interceptors?.makeMsgUpdateStatusInterceptors() ?? [],
        userFunction: self.msgUpdateStatus(request:context:)
      )

    case "MsgLinkNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_MsgLinkNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_MsgLinkNodeResponse>(),
        interceptors: self.interceptors?.makeMsgLinkNodeInterceptors() ?? [],
        userFunction: self.msgLinkNode(request:context:)
      )

    case "MsgUnlinkNode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_MsgUnlinkNodeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_MsgUnlinkNodeResponse>(),
        interceptors: self.interceptors?.makeMsgUnlinkNodeInterceptors() ?? [],
        userFunction: self.msgUnlinkNode(request:context:)
      )

    case "MsgSubscribe":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_MsgSubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_MsgSubscribeResponse>(),
        interceptors: self.interceptors?.makeMsgSubscribeInterceptors() ?? [],
        userFunction: self.msgSubscribe(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Plan_V2_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'msgCreate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgCreateInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_MsgCreateRequest, Sentinel_Plan_V2_MsgCreateResponse>]

  /// - Returns: Interceptors to use when handling 'msgUpdateStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgUpdateStatusInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_MsgUpdateStatusRequest, Sentinel_Plan_V2_MsgUpdateStatusResponse>]

  /// - Returns: Interceptors to use when handling 'msgLinkNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgLinkNodeInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_MsgLinkNodeRequest, Sentinel_Plan_V2_MsgLinkNodeResponse>]

  /// - Returns: Interceptors to use when handling 'msgUnlinkNode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgUnlinkNodeInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_MsgUnlinkNodeRequest, Sentinel_Plan_V2_MsgUnlinkNodeResponse>]

  /// - Returns: Interceptors to use when handling 'msgSubscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMsgSubscribeInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_MsgSubscribeRequest, Sentinel_Plan_V2_MsgSubscribeResponse>]
}
