//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: sentinel/plan/v2/querier.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Sentinel_Plan_V2_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Sentinel_Plan_V2_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func queryPlans(
    _ request: Sentinel_Plan_V2_QueryPlansRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_QueryPlansRequest, Sentinel_Plan_V2_QueryPlansResponse>

  func queryPlansForProvider(
    _ request: Sentinel_Plan_V2_QueryPlansForProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_QueryPlansForProviderRequest, Sentinel_Plan_V2_QueryPlansForProviderResponse>

  func queryPlan(
    _ request: Sentinel_Plan_V2_QueryPlanRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sentinel_Plan_V2_QueryPlanRequest, Sentinel_Plan_V2_QueryPlanResponse>
}

extension Sentinel_Plan_V2_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "sentinel.plan.v2.QueryService"
  }

  /// Unary call to QueryPlans
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPlans.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPlans(
    _ request: Sentinel_Plan_V2_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_QueryPlansRequest, Sentinel_Plan_V2_QueryPlansResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlansInterceptors() ?? []
    )
  }

  /// Unary call to QueryPlansForProvider
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPlansForProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPlansForProvider(
    _ request: Sentinel_Plan_V2_QueryPlansForProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_QueryPlansForProviderRequest, Sentinel_Plan_V2_QueryPlansForProviderResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlansForProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlansForProviderInterceptors() ?? []
    )
  }

  /// Unary call to QueryPlan
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryPlan(
    _ request: Sentinel_Plan_V2_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sentinel_Plan_V2_QueryPlanRequest, Sentinel_Plan_V2_QueryPlanResponse> {
    return self.makeUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlanInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Sentinel_Plan_V2_QueryServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Sentinel_Plan_V2_QueryServiceNIOClient")
internal final class Sentinel_Plan_V2_QueryServiceClient: Sentinel_Plan_V2_QueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the sentinel.plan.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Sentinel_Plan_V2_QueryServiceNIOClient: Sentinel_Plan_V2_QueryServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the sentinel.plan.v2.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Plan_V2_QueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol? { get }

  func makeQueryPlansCall(
    _ request: Sentinel_Plan_V2_QueryPlansRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Plan_V2_QueryPlansRequest, Sentinel_Plan_V2_QueryPlansResponse>

  func makeQueryPlansForProviderCall(
    _ request: Sentinel_Plan_V2_QueryPlansForProviderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Plan_V2_QueryPlansForProviderRequest, Sentinel_Plan_V2_QueryPlansForProviderResponse>

  func makeQueryPlanCall(
    _ request: Sentinel_Plan_V2_QueryPlanRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sentinel_Plan_V2_QueryPlanRequest, Sentinel_Plan_V2_QueryPlanResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Plan_V2_QueryServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Plan_V2_QueryServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeQueryPlansCall(
    _ request: Sentinel_Plan_V2_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Plan_V2_QueryPlansRequest, Sentinel_Plan_V2_QueryPlansResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlansInterceptors() ?? []
    )
  }

  internal func makeQueryPlansForProviderCall(
    _ request: Sentinel_Plan_V2_QueryPlansForProviderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Plan_V2_QueryPlansForProviderRequest, Sentinel_Plan_V2_QueryPlansForProviderResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlansForProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlansForProviderInterceptors() ?? []
    )
  }

  internal func makeQueryPlanCall(
    _ request: Sentinel_Plan_V2_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sentinel_Plan_V2_QueryPlanRequest, Sentinel_Plan_V2_QueryPlanResponse> {
    return self.makeAsyncUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlanInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Plan_V2_QueryServiceAsyncClientProtocol {
  internal func queryPlans(
    _ request: Sentinel_Plan_V2_QueryPlansRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Plan_V2_QueryPlansResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlans.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlansInterceptors() ?? []
    )
  }

  internal func queryPlansForProvider(
    _ request: Sentinel_Plan_V2_QueryPlansForProviderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Plan_V2_QueryPlansForProviderResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlansForProvider.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlansForProviderInterceptors() ?? []
    )
  }

  internal func queryPlan(
    _ request: Sentinel_Plan_V2_QueryPlanRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sentinel_Plan_V2_QueryPlanResponse {
    return try await self.performAsyncUnaryCall(
      path: Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlan.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryPlanInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Sentinel_Plan_V2_QueryServiceAsyncClient: Sentinel_Plan_V2_QueryServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Sentinel_Plan_V2_QueryServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'queryPlans'.
  func makeQueryPlansInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_QueryPlansRequest, Sentinel_Plan_V2_QueryPlansResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPlansForProvider'.
  func makeQueryPlansForProviderInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_QueryPlansForProviderRequest, Sentinel_Plan_V2_QueryPlansForProviderResponse>]

  /// - Returns: Interceptors to use when invoking 'queryPlan'.
  func makeQueryPlanInterceptors() -> [ClientInterceptor<Sentinel_Plan_V2_QueryPlanRequest, Sentinel_Plan_V2_QueryPlanResponse>]
}

internal enum Sentinel_Plan_V2_QueryServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.plan.v2.QueryService",
    methods: [
      Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlans,
      Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlansForProvider,
      Sentinel_Plan_V2_QueryServiceClientMetadata.Methods.queryPlan,
    ]
  )

  internal enum Methods {
    internal static let queryPlans = GRPCMethodDescriptor(
      name: "QueryPlans",
      path: "/sentinel.plan.v2.QueryService/QueryPlans",
      type: GRPCCallType.unary
    )

    internal static let queryPlansForProvider = GRPCMethodDescriptor(
      name: "QueryPlansForProvider",
      path: "/sentinel.plan.v2.QueryService/QueryPlansForProvider",
      type: GRPCCallType.unary
    )

    internal static let queryPlan = GRPCMethodDescriptor(
      name: "QueryPlan",
      path: "/sentinel.plan.v2.QueryService/QueryPlan",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sentinel_Plan_V2_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Sentinel_Plan_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func queryPlans(request: Sentinel_Plan_V2_QueryPlansRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_QueryPlansResponse>

  func queryPlansForProvider(request: Sentinel_Plan_V2_QueryPlansForProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_QueryPlansForProviderResponse>

  func queryPlan(request: Sentinel_Plan_V2_QueryPlanRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sentinel_Plan_V2_QueryPlanResponse>
}

extension Sentinel_Plan_V2_QueryServiceProvider {
  internal var serviceName: Substring {
    return Sentinel_Plan_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryPlans":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_QueryPlansRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_QueryPlansResponse>(),
        interceptors: self.interceptors?.makeQueryPlansInterceptors() ?? [],
        userFunction: self.queryPlans(request:context:)
      )

    case "QueryPlansForProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_QueryPlansForProviderRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_QueryPlansForProviderResponse>(),
        interceptors: self.interceptors?.makeQueryPlansForProviderInterceptors() ?? [],
        userFunction: self.queryPlansForProvider(request:context:)
      )

    case "QueryPlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_QueryPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_QueryPlanResponse>(),
        interceptors: self.interceptors?.makeQueryPlanInterceptors() ?? [],
        userFunction: self.queryPlan(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Sentinel_Plan_V2_QueryServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Sentinel_Plan_V2_QueryServiceServerInterceptorFactoryProtocol? { get }

  func queryPlans(
    request: Sentinel_Plan_V2_QueryPlansRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Plan_V2_QueryPlansResponse

  func queryPlansForProvider(
    request: Sentinel_Plan_V2_QueryPlansForProviderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Plan_V2_QueryPlansForProviderResponse

  func queryPlan(
    request: Sentinel_Plan_V2_QueryPlanRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sentinel_Plan_V2_QueryPlanResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Sentinel_Plan_V2_QueryServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Sentinel_Plan_V2_QueryServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Sentinel_Plan_V2_QueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Sentinel_Plan_V2_QueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryPlans":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_QueryPlansRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_QueryPlansResponse>(),
        interceptors: self.interceptors?.makeQueryPlansInterceptors() ?? [],
        wrapping: { try await self.queryPlans(request: $0, context: $1) }
      )

    case "QueryPlansForProvider":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_QueryPlansForProviderRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_QueryPlansForProviderResponse>(),
        interceptors: self.interceptors?.makeQueryPlansForProviderInterceptors() ?? [],
        wrapping: { try await self.queryPlansForProvider(request: $0, context: $1) }
      )

    case "QueryPlan":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sentinel_Plan_V2_QueryPlanRequest>(),
        responseSerializer: ProtobufSerializer<Sentinel_Plan_V2_QueryPlanResponse>(),
        interceptors: self.interceptors?.makeQueryPlanInterceptors() ?? [],
        wrapping: { try await self.queryPlan(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Sentinel_Plan_V2_QueryServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'queryPlans'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPlansInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_QueryPlansRequest, Sentinel_Plan_V2_QueryPlansResponse>]

  /// - Returns: Interceptors to use when handling 'queryPlansForProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPlansForProviderInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_QueryPlansForProviderRequest, Sentinel_Plan_V2_QueryPlansForProviderResponse>]

  /// - Returns: Interceptors to use when handling 'queryPlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryPlanInterceptors() -> [ServerInterceptor<Sentinel_Plan_V2_QueryPlanRequest, Sentinel_Plan_V2_QueryPlanResponse>]
}

internal enum Sentinel_Plan_V2_QueryServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryService",
    fullName: "sentinel.plan.v2.QueryService",
    methods: [
      Sentinel_Plan_V2_QueryServiceServerMetadata.Methods.queryPlans,
      Sentinel_Plan_V2_QueryServiceServerMetadata.Methods.queryPlansForProvider,
      Sentinel_Plan_V2_QueryServiceServerMetadata.Methods.queryPlan,
    ]
  )

  internal enum Methods {
    internal static let queryPlans = GRPCMethodDescriptor(
      name: "QueryPlans",
      path: "/sentinel.plan.v2.QueryService/QueryPlans",
      type: GRPCCallType.unary
    )

    internal static let queryPlansForProvider = GRPCMethodDescriptor(
      name: "QueryPlansForProvider",
      path: "/sentinel.plan.v2.QueryService/QueryPlansForProvider",
      type: GRPCCallType.unary
    )

    internal static let queryPlan = GRPCMethodDescriptor(
      name: "QueryPlan",
      path: "/sentinel.plan.v2.QueryService/QueryPlan",
      type: GRPCCallType.unary
    )
  }
}
