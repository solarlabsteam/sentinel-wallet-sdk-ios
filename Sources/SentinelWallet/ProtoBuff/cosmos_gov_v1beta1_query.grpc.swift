//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/gov/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for gov module
///
/// Usage: instantiate `Cosmos_Gov_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Gov_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Gov_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func proposal(
    _ request: Cosmos_Gov_V1beta1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryProposalRequest, Cosmos_Gov_V1beta1_QueryProposalResponse>

  func proposals(
    _ request: Cosmos_Gov_V1beta1_QueryProposalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryProposalsRequest, Cosmos_Gov_V1beta1_QueryProposalsResponse>

  func vote(
    _ request: Cosmos_Gov_V1beta1_QueryVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryVoteRequest, Cosmos_Gov_V1beta1_QueryVoteResponse>

  func votes(
    _ request: Cosmos_Gov_V1beta1_QueryVotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryVotesRequest, Cosmos_Gov_V1beta1_QueryVotesResponse>

  func params(
    _ request: Cosmos_Gov_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryParamsRequest, Cosmos_Gov_V1beta1_QueryParamsResponse>

  func deposit(
    _ request: Cosmos_Gov_V1beta1_QueryDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryDepositRequest, Cosmos_Gov_V1beta1_QueryDepositResponse>

  func deposits(
    _ request: Cosmos_Gov_V1beta1_QueryDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryDepositsRequest, Cosmos_Gov_V1beta1_QueryDepositsResponse>

  func tallyResult(
    _ request: Cosmos_Gov_V1beta1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryTallyResultRequest, Cosmos_Gov_V1beta1_QueryTallyResultResponse>
}

extension Cosmos_Gov_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.gov.v1beta1.Query"
  }

  /// Proposal queries proposal details based on ProposalID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposal(
    _ request: Cosmos_Gov_V1beta1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryProposalRequest, Cosmos_Gov_V1beta1_QueryProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/Proposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  /// Proposals queries all proposals based on given status.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposals(
    _ request: Cosmos_Gov_V1beta1_QueryProposalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryProposalsRequest, Cosmos_Gov_V1beta1_QueryProposalsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/Proposals",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsInterceptors() ?? []
    )
  }

  /// Vote queries voted information based on proposalID, voterAddr.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vote(
    _ request: Cosmos_Gov_V1beta1_QueryVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryVoteRequest, Cosmos_Gov_V1beta1_QueryVoteResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/Vote",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// Votes queries votes of a given proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Votes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votes(
    _ request: Cosmos_Gov_V1beta1_QueryVotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryVotesRequest, Cosmos_Gov_V1beta1_QueryVotesResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/Votes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesInterceptors() ?? []
    )
  }

  /// Params queries all parameters of the gov module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Cosmos_Gov_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryParamsRequest, Cosmos_Gov_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Deposit queries single deposit information based proposalID, depositAddr.
  ///
  /// - Parameters:
  ///   - request: Request to send to Deposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deposit(
    _ request: Cosmos_Gov_V1beta1_QueryDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryDepositRequest, Cosmos_Gov_V1beta1_QueryDepositResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/Deposit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositInterceptors() ?? []
    )
  }

  /// Deposits queries all deposits of a single proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Deposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deposits(
    _ request: Cosmos_Gov_V1beta1_QueryDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryDepositsRequest, Cosmos_Gov_V1beta1_QueryDepositsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/Deposits",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositsInterceptors() ?? []
    )
  }

  /// TallyResult queries the tally of a proposal vote.
  ///
  /// - Parameters:
  ///   - request: Request to send to TallyResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tallyResult(
    _ request: Cosmos_Gov_V1beta1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Gov_V1beta1_QueryTallyResultRequest, Cosmos_Gov_V1beta1_QueryTallyResultResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.gov.v1beta1.Query/TallyResult",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Gov_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'proposal'.
  func makeProposalInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryProposalRequest, Cosmos_Gov_V1beta1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'proposals'.
  func makeProposalsInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryProposalsRequest, Cosmos_Gov_V1beta1_QueryProposalsResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryVoteRequest, Cosmos_Gov_V1beta1_QueryVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'votes'.
  func makeVotesInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryVotesRequest, Cosmos_Gov_V1beta1_QueryVotesResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryParamsRequest, Cosmos_Gov_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'deposit'.
  func makeDepositInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryDepositRequest, Cosmos_Gov_V1beta1_QueryDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'deposits'.
  func makeDepositsInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryDepositsRequest, Cosmos_Gov_V1beta1_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'tallyResult'.
  func makeTallyResultInterceptors() -> [ClientInterceptor<Cosmos_Gov_V1beta1_QueryTallyResultRequest, Cosmos_Gov_V1beta1_QueryTallyResultResponse>]
}

internal final class Cosmos_Gov_V1beta1_QueryClient: Cosmos_Gov_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Gov_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.gov.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Gov_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for gov module
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Gov_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Gov_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Proposal queries proposal details based on ProposalID.
  func proposal(request: Cosmos_Gov_V1beta1_QueryProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryProposalResponse>

  /// Proposals queries all proposals based on given status.
  func proposals(request: Cosmos_Gov_V1beta1_QueryProposalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryProposalsResponse>

  /// Vote queries voted information based on proposalID, voterAddr.
  func vote(request: Cosmos_Gov_V1beta1_QueryVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryVoteResponse>

  /// Votes queries votes of a given proposal.
  func votes(request: Cosmos_Gov_V1beta1_QueryVotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryVotesResponse>

  /// Params queries all parameters of the gov module.
  func params(request: Cosmos_Gov_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryParamsResponse>

  /// Deposit queries single deposit information based proposalID, depositAddr.
  func deposit(request: Cosmos_Gov_V1beta1_QueryDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryDepositResponse>

  /// Deposits queries all deposits of a single proposal.
  func deposits(request: Cosmos_Gov_V1beta1_QueryDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryDepositsResponse>

  /// TallyResult queries the tally of a proposal vote.
  func tallyResult(request: Cosmos_Gov_V1beta1_QueryTallyResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Gov_V1beta1_QueryTallyResultResponse>
}

extension Cosmos_Gov_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "cosmos.gov.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Proposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryProposalResponse>(),
        interceptors: self.interceptors?.makeProposalInterceptors() ?? [],
        userFunction: self.proposal(request:context:)
      )

    case "Proposals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryProposalsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryProposalsResponse>(),
        interceptors: self.interceptors?.makeProposalsInterceptors() ?? [],
        userFunction: self.proposals(request:context:)
      )

    case "Vote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryVoteRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryVoteResponse>(),
        interceptors: self.interceptors?.makeVoteInterceptors() ?? [],
        userFunction: self.vote(request:context:)
      )

    case "Votes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryVotesRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryVotesResponse>(),
        interceptors: self.interceptors?.makeVotesInterceptors() ?? [],
        userFunction: self.votes(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Deposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryDepositRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryDepositResponse>(),
        interceptors: self.interceptors?.makeDepositInterceptors() ?? [],
        userFunction: self.deposit(request:context:)
      )

    case "Deposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeDepositsInterceptors() ?? [],
        userFunction: self.deposits(request:context:)
      )

    case "TallyResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Gov_V1beta1_QueryTallyResultRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Gov_V1beta1_QueryTallyResultResponse>(),
        interceptors: self.interceptors?.makeTallyResultInterceptors() ?? [],
        userFunction: self.tallyResult(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Gov_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'proposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryProposalRequest, Cosmos_Gov_V1beta1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when handling 'proposals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalsInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryProposalsRequest, Cosmos_Gov_V1beta1_QueryProposalsResponse>]

  /// - Returns: Interceptors to use when handling 'vote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryVoteRequest, Cosmos_Gov_V1beta1_QueryVoteResponse>]

  /// - Returns: Interceptors to use when handling 'votes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotesInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryVotesRequest, Cosmos_Gov_V1beta1_QueryVotesResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryParamsRequest, Cosmos_Gov_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'deposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryDepositRequest, Cosmos_Gov_V1beta1_QueryDepositResponse>]

  /// - Returns: Interceptors to use when handling 'deposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositsInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryDepositsRequest, Cosmos_Gov_V1beta1_QueryDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'tallyResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTallyResultInterceptors() -> [ServerInterceptor<Cosmos_Gov_V1beta1_QueryTallyResultRequest, Cosmos_Gov_V1beta1_QueryTallyResultResponse>]
}
