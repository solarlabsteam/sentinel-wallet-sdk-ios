//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/pool-incentives/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Poolincentives_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Poolincentives_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Poolincentives_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func gaugeIds(
    _ request: Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest, Osmosis_Poolincentives_V1beta1_QueryGaugeIdsResponse>

  func distrInfo(
    _ request: Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest, Osmosis_Poolincentives_V1beta1_QueryDistrInfoResponse>

  func params(
    _ request: Osmosis_Poolincentives_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryParamsRequest, Osmosis_Poolincentives_V1beta1_QueryParamsResponse>

  func lockableDurations(
    _ request: Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest, Osmosis_Poolincentives_V1beta1_QueryLockableDurationsResponse>

  func incentivizedPools(
    _ request: Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest, Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsResponse>
}

extension Osmosis_Poolincentives_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.poolincentives.v1beta1.Query"
  }

  /// GaugeIds takes the pool id and returns the matching gauge ids and durations
  ///
  /// - Parameters:
  ///   - request: Request to send to GaugeIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func gaugeIds(
    _ request: Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest, Osmosis_Poolincentives_V1beta1_QueryGaugeIdsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.poolincentives.v1beta1.Query/GaugeIds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGaugeIdsInterceptors() ?? []
    )
  }

  /// Unary call to DistrInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to DistrInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func distrInfo(
    _ request: Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest, Osmosis_Poolincentives_V1beta1_QueryDistrInfoResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.poolincentives.v1beta1.Query/DistrInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDistrInfoInterceptors() ?? []
    )
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Poolincentives_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryParamsRequest, Osmosis_Poolincentives_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.poolincentives.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to LockableDurations
  ///
  /// - Parameters:
  ///   - request: Request to send to LockableDurations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lockableDurations(
    _ request: Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest, Osmosis_Poolincentives_V1beta1_QueryLockableDurationsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.poolincentives.v1beta1.Query/LockableDurations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? []
    )
  }

  /// Unary call to IncentivizedPools
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPools(
    _ request: Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest, Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.poolincentives.v1beta1.Query/IncentivizedPools",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPoolsInterceptors() ?? []
    )
  }
}

internal protocol Osmosis_Poolincentives_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'gaugeIds'.
  func makeGaugeIdsInterceptors() -> [ClientInterceptor<Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest, Osmosis_Poolincentives_V1beta1_QueryGaugeIdsResponse>]

  /// - Returns: Interceptors to use when invoking 'distrInfo'.
  func makeDistrInfoInterceptors() -> [ClientInterceptor<Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest, Osmosis_Poolincentives_V1beta1_QueryDistrInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Poolincentives_V1beta1_QueryParamsRequest, Osmosis_Poolincentives_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'lockableDurations'.
  func makeLockableDurationsInterceptors() -> [ClientInterceptor<Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest, Osmosis_Poolincentives_V1beta1_QueryLockableDurationsResponse>]

  /// - Returns: Interceptors to use when invoking 'incentivizedPools'.
  func makeIncentivizedPoolsInterceptors() -> [ClientInterceptor<Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest, Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsResponse>]
}

internal final class Osmosis_Poolincentives_V1beta1_QueryClient: Osmosis_Poolincentives_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Poolincentives_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.poolincentives.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Poolincentives_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Poolincentives_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Poolincentives_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// GaugeIds takes the pool id and returns the matching gauge ids and durations
  func gaugeIds(request: Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolincentives_V1beta1_QueryGaugeIdsResponse>

  func distrInfo(request: Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolincentives_V1beta1_QueryDistrInfoResponse>

  func params(request: Osmosis_Poolincentives_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolincentives_V1beta1_QueryParamsResponse>

  func lockableDurations(request: Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolincentives_V1beta1_QueryLockableDurationsResponse>

  func incentivizedPools(request: Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsResponse>
}

extension Osmosis_Poolincentives_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "osmosis.poolincentives.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GaugeIds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolincentives_V1beta1_QueryGaugeIdsResponse>(),
        interceptors: self.interceptors?.makeGaugeIdsInterceptors() ?? [],
        userFunction: self.gaugeIds(request:context:)
      )

    case "DistrInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolincentives_V1beta1_QueryDistrInfoResponse>(),
        interceptors: self.interceptors?.makeDistrInfoInterceptors() ?? [],
        userFunction: self.distrInfo(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolincentives_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolincentives_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "LockableDurations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolincentives_V1beta1_QueryLockableDurationsResponse>(),
        interceptors: self.interceptors?.makeLockableDurationsInterceptors() ?? [],
        userFunction: self.lockableDurations(request:context:)
      )

    case "IncentivizedPools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsResponse>(),
        interceptors: self.interceptors?.makeIncentivizedPoolsInterceptors() ?? [],
        userFunction: self.incentivizedPools(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Poolincentives_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'gaugeIds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGaugeIdsInterceptors() -> [ServerInterceptor<Osmosis_Poolincentives_V1beta1_QueryGaugeIdsRequest, Osmosis_Poolincentives_V1beta1_QueryGaugeIdsResponse>]

  /// - Returns: Interceptors to use when handling 'distrInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDistrInfoInterceptors() -> [ServerInterceptor<Osmosis_Poolincentives_V1beta1_QueryDistrInfoRequest, Osmosis_Poolincentives_V1beta1_QueryDistrInfoResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Poolincentives_V1beta1_QueryParamsRequest, Osmosis_Poolincentives_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'lockableDurations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLockableDurationsInterceptors() -> [ServerInterceptor<Osmosis_Poolincentives_V1beta1_QueryLockableDurationsRequest, Osmosis_Poolincentives_V1beta1_QueryLockableDurationsResponse>]

  /// - Returns: Interceptors to use when handling 'incentivizedPools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentivizedPoolsInterceptors() -> [ServerInterceptor<Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsRequest, Osmosis_Poolincentives_V1beta1_QueryIncentivizedPoolsResponse>]
}
