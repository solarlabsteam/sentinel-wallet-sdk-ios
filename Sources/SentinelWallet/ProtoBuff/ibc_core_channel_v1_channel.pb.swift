// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/core/channel/v1/channel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// State defines if a channel is in one of the following states:
/// CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
enum Ibc_Core_Channel_V1_State: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Default State
  case uninitializedUnspecified // = 0

  /// A channel has just started the opening handshake.
  case init_ // = 1

  /// A channel has acknowledged the handshake step on the counterparty chain.
  case tryopen // = 2

  /// A channel has completed the handshake. Open channels are
  /// ready to send and receive packets.
  case `open` // = 3

  /// A channel has been closed and can no longer be used to send or receive
  /// packets.
  case closed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .uninitializedUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .uninitializedUnspecified
    case 1: self = .init_
    case 2: self = .tryopen
    case 3: self = .open
    case 4: self = .closed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .uninitializedUnspecified: return 0
    case .init_: return 1
    case .tryopen: return 2
    case .open: return 3
    case .closed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Ibc_Core_Channel_V1_State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Ibc_Core_Channel_V1_State] = [
    .uninitializedUnspecified,
    .init_,
    .tryopen,
    .open,
    .closed,
  ]
}

#endif  // swift(>=4.2)

/// Order defines if a channel is ORDERED or UNORDERED
enum Ibc_Core_Channel_V1_Order: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// zero-value for channel ordering
  case noneUnspecified // = 0

  /// packets can be delivered in any order, which may differ from the order in
  /// which they were sent.
  case unordered // = 1

  /// packets are delivered exactly in the order which they were sent
  case ordered // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .noneUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noneUnspecified
    case 1: self = .unordered
    case 2: self = .ordered
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noneUnspecified: return 0
    case .unordered: return 1
    case .ordered: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Ibc_Core_Channel_V1_Order: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Ibc_Core_Channel_V1_Order] = [
    .noneUnspecified,
    .unordered,
    .ordered,
  ]
}

#endif  // swift(>=4.2)

/// Channel defines pipeline for exactly-once packet delivery between specific
/// modules on separate blockchains, which has at least one end capable of
/// sending packets and one end capable of receiving packets.
struct Ibc_Core_Channel_V1_Channel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// current state of the channel end
  var state: Ibc_Core_Channel_V1_State = .uninitializedUnspecified

  /// whether the channel is ordered or unordered
  var ordering: Ibc_Core_Channel_V1_Order = .noneUnspecified

  /// counterparty channel end
  var counterparty: Ibc_Core_Channel_V1_Counterparty {
    get {return _counterparty ?? Ibc_Core_Channel_V1_Counterparty()}
    set {_counterparty = newValue}
  }
  /// Returns true if `counterparty` has been explicitly set.
  var hasCounterparty: Bool {return self._counterparty != nil}
  /// Clears the value of `counterparty`. Subsequent reads from it will return its default value.
  mutating func clearCounterparty() {self._counterparty = nil}

  /// list of connection identifiers, in order, along which packets sent on
  /// this channel will travel
  var connectionHops: [String] = []

  /// opaque channel version, which is agreed upon during the handshake
  var version: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _counterparty: Ibc_Core_Channel_V1_Counterparty? = nil
}

/// IdentifiedChannel defines a channel with additional port and channel
/// identifier fields.
struct Ibc_Core_Channel_V1_IdentifiedChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// current state of the channel end
  var state: Ibc_Core_Channel_V1_State = .uninitializedUnspecified

  /// whether the channel is ordered or unordered
  var ordering: Ibc_Core_Channel_V1_Order = .noneUnspecified

  /// counterparty channel end
  var counterparty: Ibc_Core_Channel_V1_Counterparty {
    get {return _counterparty ?? Ibc_Core_Channel_V1_Counterparty()}
    set {_counterparty = newValue}
  }
  /// Returns true if `counterparty` has been explicitly set.
  var hasCounterparty: Bool {return self._counterparty != nil}
  /// Clears the value of `counterparty`. Subsequent reads from it will return its default value.
  mutating func clearCounterparty() {self._counterparty = nil}

  /// list of connection identifiers, in order, along which packets sent on
  /// this channel will travel
  var connectionHops: [String] = []

  /// opaque channel version, which is agreed upon during the handshake
  var version: String = String()

  /// port identifier
  var portID: String = String()

  /// channel identifier
  var channelID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _counterparty: Ibc_Core_Channel_V1_Counterparty? = nil
}

/// Counterparty defines a channel end counterparty
struct Ibc_Core_Channel_V1_Counterparty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// port on the counterparty chain which owns the other end of the channel.
  var portID: String = String()

  /// channel end on the counterparty chain
  var channelID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Packet defines a type that carries data across different chains through IBC
struct Ibc_Core_Channel_V1_Packet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// number corresponds to the order of sends and receives, where a Packet
  /// with an earlier sequence number must be sent and received before a Packet
  /// with a later sequence number.
  var sequence: UInt64 = 0

  /// identifies the port on the sending chain.
  var sourcePort: String = String()

  /// identifies the channel end on the sending chain.
  var sourceChannel: String = String()

  /// identifies the port on the receiving chain.
  var destinationPort: String = String()

  /// identifies the channel end on the receiving chain.
  var destinationChannel: String = String()

  /// actual opaque bytes transferred directly to the application module
  var data: Data = SwiftProtobuf.Internal.emptyData

  /// block height after which the packet times out
  var timeoutHeight: Ibc_Core_Client_V1_Height {
    get {return _timeoutHeight ?? Ibc_Core_Client_V1_Height()}
    set {_timeoutHeight = newValue}
  }
  /// Returns true if `timeoutHeight` has been explicitly set.
  var hasTimeoutHeight: Bool {return self._timeoutHeight != nil}
  /// Clears the value of `timeoutHeight`. Subsequent reads from it will return its default value.
  mutating func clearTimeoutHeight() {self._timeoutHeight = nil}

  /// block timestamp (in nanoseconds) after which the packet times out
  var timeoutTimestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeoutHeight: Ibc_Core_Client_V1_Height? = nil
}

/// PacketState defines the generic type necessary to retrieve and store
/// packet commitments, acknowledgements, and receipts.
/// Caller is responsible for knowing the context necessary to interpret this
/// state as a commitment, acknowledgement, or a receipt.
struct Ibc_Core_Channel_V1_PacketState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// channel port identifier.
  var portID: String = String()

  /// channel unique identifier.
  var channelID: String = String()

  /// packet sequence.
  var sequence: UInt64 = 0

  /// embedded data that represents packet state.
  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Acknowledgement is the recommended acknowledgement format to be used by
/// app-specific protocols.
/// NOTE: The field numbers 21 and 22 were explicitly chosen to avoid accidental
/// conflicts with other protobuf message formats used for acknowledgements.
/// The first byte of any message with this format will be the non-ASCII values
/// `0xaa` (result) or `0xb2` (error). Implemented as defined by ICS:
/// https://github.com/cosmos/ics/tree/master/spec/ics-004-channel-and-packet-semantics#acknowledgement-envelope
struct Ibc_Core_Channel_V1_Acknowledgement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// response contains either a result or an error and must be non-empty
  var response: Ibc_Core_Channel_V1_Acknowledgement.OneOf_Response? = nil

  var result: Data {
    get {
      if case .result(let v)? = response {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {response = .result(newValue)}
  }

  var error: String {
    get {
      if case .error(let v)? = response {return v}
      return String()
    }
    set {response = .error(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// response contains either a result or an error and must be non-empty
  enum OneOf_Response: Equatable {
    case result(Data)
    case error(String)

  #if !swift(>=4.1)
    static func ==(lhs: Ibc_Core_Channel_V1_Acknowledgement.OneOf_Response, rhs: Ibc_Core_Channel_V1_Acknowledgement.OneOf_Response) -> Bool {
      switch (lhs, rhs) {
      case (.result(let l), .result(let r)): return l == r
      case (.error(let l), .error(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.core.channel.v1"

extension Ibc_Core_Channel_V1_State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNINITIALIZED_UNSPECIFIED"),
    1: .same(proto: "STATE_INIT"),
    2: .same(proto: "STATE_TRYOPEN"),
    3: .same(proto: "STATE_OPEN"),
    4: .same(proto: "STATE_CLOSED"),
  ]
}

extension Ibc_Core_Channel_V1_Order: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORDER_NONE_UNSPECIFIED"),
    1: .same(proto: "ORDER_UNORDERED"),
    2: .same(proto: "ORDER_ORDERED"),
  ]
}

extension Ibc_Core_Channel_V1_Channel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Channel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "ordering"),
    3: .same(proto: "counterparty"),
    4: .standard(proto: "connection_hops"),
    5: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.state)
      case 2: try decoder.decodeSingularEnumField(value: &self.ordering)
      case 3: try decoder.decodeSingularMessageField(value: &self._counterparty)
      case 4: try decoder.decodeRepeatedStringField(value: &self.connectionHops)
      case 5: try decoder.decodeSingularStringField(value: &self.version)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .uninitializedUnspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if self.ordering != .noneUnspecified {
      try visitor.visitSingularEnumField(value: self.ordering, fieldNumber: 2)
    }
    if let v = self._counterparty {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.connectionHops.isEmpty {
      try visitor.visitRepeatedStringField(value: self.connectionHops, fieldNumber: 4)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_Channel, rhs: Ibc_Core_Channel_V1_Channel) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.ordering != rhs.ordering {return false}
    if lhs._counterparty != rhs._counterparty {return false}
    if lhs.connectionHops != rhs.connectionHops {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_IdentifiedChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdentifiedChannel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "ordering"),
    3: .same(proto: "counterparty"),
    4: .standard(proto: "connection_hops"),
    5: .same(proto: "version"),
    6: .standard(proto: "port_id"),
    7: .standard(proto: "channel_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.state)
      case 2: try decoder.decodeSingularEnumField(value: &self.ordering)
      case 3: try decoder.decodeSingularMessageField(value: &self._counterparty)
      case 4: try decoder.decodeRepeatedStringField(value: &self.connectionHops)
      case 5: try decoder.decodeSingularStringField(value: &self.version)
      case 6: try decoder.decodeSingularStringField(value: &self.portID)
      case 7: try decoder.decodeSingularStringField(value: &self.channelID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .uninitializedUnspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if self.ordering != .noneUnspecified {
      try visitor.visitSingularEnumField(value: self.ordering, fieldNumber: 2)
    }
    if let v = self._counterparty {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.connectionHops.isEmpty {
      try visitor.visitRepeatedStringField(value: self.connectionHops, fieldNumber: 4)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 5)
    }
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 6)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_IdentifiedChannel, rhs: Ibc_Core_Channel_V1_IdentifiedChannel) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.ordering != rhs.ordering {return false}
    if lhs._counterparty != rhs._counterparty {return false}
    if lhs.connectionHops != rhs.connectionHops {return false}
    if lhs.version != rhs.version {return false}
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_Counterparty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Counterparty"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .standard(proto: "channel_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularStringField(value: &self.channelID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_Counterparty, rhs: Ibc_Core_Channel_V1_Counterparty) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_Packet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Packet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequence"),
    2: .standard(proto: "source_port"),
    3: .standard(proto: "source_channel"),
    4: .standard(proto: "destination_port"),
    5: .standard(proto: "destination_channel"),
    6: .same(proto: "data"),
    7: .standard(proto: "timeout_height"),
    8: .standard(proto: "timeout_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.sequence)
      case 2: try decoder.decodeSingularStringField(value: &self.sourcePort)
      case 3: try decoder.decodeSingularStringField(value: &self.sourceChannel)
      case 4: try decoder.decodeSingularStringField(value: &self.destinationPort)
      case 5: try decoder.decodeSingularStringField(value: &self.destinationChannel)
      case 6: try decoder.decodeSingularBytesField(value: &self.data)
      case 7: try decoder.decodeSingularMessageField(value: &self._timeoutHeight)
      case 8: try decoder.decodeSingularUInt64Field(value: &self.timeoutTimestamp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 1)
    }
    if !self.sourcePort.isEmpty {
      try visitor.visitSingularStringField(value: self.sourcePort, fieldNumber: 2)
    }
    if !self.sourceChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceChannel, fieldNumber: 3)
    }
    if !self.destinationPort.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationPort, fieldNumber: 4)
    }
    if !self.destinationChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationChannel, fieldNumber: 5)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 6)
    }
    if let v = self._timeoutHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.timeoutTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeoutTimestamp, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_Packet, rhs: Ibc_Core_Channel_V1_Packet) -> Bool {
    if lhs.sequence != rhs.sequence {return false}
    if lhs.sourcePort != rhs.sourcePort {return false}
    if lhs.sourceChannel != rhs.sourceChannel {return false}
    if lhs.destinationPort != rhs.destinationPort {return false}
    if lhs.destinationChannel != rhs.destinationChannel {return false}
    if lhs.data != rhs.data {return false}
    if lhs._timeoutHeight != rhs._timeoutHeight {return false}
    if lhs.timeoutTimestamp != rhs.timeoutTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_PacketState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .standard(proto: "channel_id"),
    3: .same(proto: "sequence"),
    4: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularStringField(value: &self.channelID)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.sequence)
      case 4: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 2)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_PacketState, rhs: Ibc_Core_Channel_V1_PacketState) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_Acknowledgement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Acknowledgement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    21: .same(proto: "result"),
    22: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 21:
        if self.response != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.response = .result(v)}
      case 22:
        if self.response != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.response = .error(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.response {
    case .result(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 21)
    case .error(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 22)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_Acknowledgement, rhs: Ibc_Core_Channel_V1_Acknowledgement) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
