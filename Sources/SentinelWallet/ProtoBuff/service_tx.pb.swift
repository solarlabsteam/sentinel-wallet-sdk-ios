// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: service/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgDefineService defines an SDK message for defining a new service
struct Irismod_Service_MsgDefineService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var description_p: String = String()

  var tags: [String] = []

  var author: String = String()

  var authorDescription: String = String()

  var schemas: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDefineServiceResponse defines the Msg/DefineService response type
struct Irismod_Service_MsgDefineServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgBindService defines an SDK message for binding to an existing service
struct Irismod_Service_MsgBindService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var provider: String = String()

  var deposit: [Cosmos_Base_V1beta1_Coin] = []

  var pricing: String = String()

  var qos: UInt64 = 0

  var options: String = String()

  var owner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgBindServiceResponse defines the Msg/BindService response type
struct Irismod_Service_MsgBindServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateServiceBinding defines an SDK message for updating an existing service binding
struct Irismod_Service_MsgUpdateServiceBinding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var provider: String = String()

  var deposit: [Cosmos_Base_V1beta1_Coin] = []

  var pricing: String = String()

  var qos: UInt64 = 0

  var options: String = String()

  var owner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateServiceBindingResponse defines the Msg/UpdateServiceBinding response type
struct Irismod_Service_MsgUpdateServiceBindingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetWithdrawAddress defines an SDK message to set the withdrawal address for a provider
struct Irismod_Service_MsgSetWithdrawAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var withdrawAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response type
struct Irismod_Service_MsgSetWithdrawAddressResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDisableServiceBinding defines an SDK message to disable a service binding
struct Irismod_Service_MsgDisableServiceBinding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var provider: String = String()

  var owner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDisableServiceBindingResponse defines the Msg/DisableServiceBinding response type
struct Irismod_Service_MsgDisableServiceBindingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEnableServiceBinding defines an SDK message to enable a service binding
struct Irismod_Service_MsgEnableServiceBinding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var provider: String = String()

  var deposit: [Cosmos_Base_V1beta1_Coin] = []

  var owner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEnableServiceBindingResponse defines the Msg/EnableServiceBinding response type
struct Irismod_Service_MsgEnableServiceBindingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRefundServiceDeposit defines an SDK message to refund deposit from a service binding
struct Irismod_Service_MsgRefundServiceDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var provider: String = String()

  var owner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRefundServiceDepositResponse defines the Msg/RefundServiceDeposit response type
struct Irismod_Service_MsgRefundServiceDepositResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCallService defines an SDK message to initiate a service request context
struct Irismod_Service_MsgCallService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var providers: [String] = []

  var consumer: String = String()

  var input: String = String()

  var serviceFeeCap: [Cosmos_Base_V1beta1_Coin] = []

  var timeout: Int64 = 0

  var repeated: Bool = false

  var repeatedFrequency: UInt64 = 0

  var repeatedTotal: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCallServiceResponse defines the Msg/CallService response type
struct Irismod_Service_MsgCallServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestContextID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRespondService defines an SDK message to respond a service request
struct Irismod_Service_MsgRespondService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var provider: String = String()

  var result: String = String()

  var output: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRespondServiceResponse defines the Msg/RespondService response type
struct Irismod_Service_MsgRespondServiceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgPauseRequestContext defines an SDK message to pause a service request
struct Irismod_Service_MsgPauseRequestContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestContextID: String = String()

  var consumer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgPauseRequestContextResponse defines the Msg/PauseRequestContext response type
struct Irismod_Service_MsgPauseRequestContextResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgStartRequestContext defines an SDK message to resume a service request
struct Irismod_Service_MsgStartRequestContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestContextID: String = String()

  var consumer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgStartRequestContextResponse defines the Msg/StartRequestContext response type
struct Irismod_Service_MsgStartRequestContextResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgKillRequestContext defines an SDK message to terminate a service request
struct Irismod_Service_MsgKillRequestContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestContextID: String = String()

  var consumer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgKillRequestContextResponse defines the Msg/KillRequestContext response type
struct Irismod_Service_MsgKillRequestContextResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateRequestContext defines an SDK message to update a service request context
struct Irismod_Service_MsgUpdateRequestContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestContextID: String = String()

  var providers: [String] = []

  var consumer: String = String()

  var serviceFeeCap: [Cosmos_Base_V1beta1_Coin] = []

  var timeout: Int64 = 0

  var repeatedFrequency: UInt64 = 0

  var repeatedTotal: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateRequestContextResponse defines the Msg/UpdateRequestContext response type
struct Irismod_Service_MsgUpdateRequestContextResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdrawEarnedFees defines an SDK message to withdraw the fees earned by the provider or owner
struct Irismod_Service_MsgWithdrawEarnedFees {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var provider: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdrawEarnedFeesResponse defines the Msg/WithdrawEarnedFees response type
struct Irismod_Service_MsgWithdrawEarnedFeesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.service"

extension Irismod_Service_MsgDefineService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDefineService"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .same(proto: "tags"),
    4: .same(proto: "author"),
    5: .standard(proto: "author_description"),
    6: .same(proto: "schemas"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeRepeatedStringField(value: &self.tags)
      case 4: try decoder.decodeSingularStringField(value: &self.author)
      case 5: try decoder.decodeSingularStringField(value: &self.authorDescription)
      case 6: try decoder.decodeSingularStringField(value: &self.schemas)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 3)
    }
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 4)
    }
    if !self.authorDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.authorDescription, fieldNumber: 5)
    }
    if !self.schemas.isEmpty {
      try visitor.visitSingularStringField(value: self.schemas, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgDefineService, rhs: Irismod_Service_MsgDefineService) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.author != rhs.author {return false}
    if lhs.authorDescription != rhs.authorDescription {return false}
    if lhs.schemas != rhs.schemas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgDefineServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDefineServiceResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgDefineServiceResponse, rhs: Irismod_Service_MsgDefineServiceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgBindService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBindService"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "provider"),
    3: .same(proto: "deposit"),
    4: .same(proto: "pricing"),
    5: .same(proto: "qos"),
    6: .same(proto: "options"),
    7: .same(proto: "owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.provider)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.deposit)
      case 4: try decoder.decodeSingularStringField(value: &self.pricing)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.qos)
      case 6: try decoder.decodeSingularStringField(value: &self.options)
      case 7: try decoder.decodeSingularStringField(value: &self.owner)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    if !self.deposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deposit, fieldNumber: 3)
    }
    if !self.pricing.isEmpty {
      try visitor.visitSingularStringField(value: self.pricing, fieldNumber: 4)
    }
    if self.qos != 0 {
      try visitor.visitSingularUInt64Field(value: self.qos, fieldNumber: 5)
    }
    if !self.options.isEmpty {
      try visitor.visitSingularStringField(value: self.options, fieldNumber: 6)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgBindService, rhs: Irismod_Service_MsgBindService) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.pricing != rhs.pricing {return false}
    if lhs.qos != rhs.qos {return false}
    if lhs.options != rhs.options {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgBindServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBindServiceResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgBindServiceResponse, rhs: Irismod_Service_MsgBindServiceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgUpdateServiceBinding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateServiceBinding"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "provider"),
    3: .same(proto: "deposit"),
    4: .same(proto: "pricing"),
    5: .same(proto: "qos"),
    6: .same(proto: "options"),
    7: .same(proto: "owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.provider)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.deposit)
      case 4: try decoder.decodeSingularStringField(value: &self.pricing)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.qos)
      case 6: try decoder.decodeSingularStringField(value: &self.options)
      case 7: try decoder.decodeSingularStringField(value: &self.owner)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    if !self.deposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deposit, fieldNumber: 3)
    }
    if !self.pricing.isEmpty {
      try visitor.visitSingularStringField(value: self.pricing, fieldNumber: 4)
    }
    if self.qos != 0 {
      try visitor.visitSingularUInt64Field(value: self.qos, fieldNumber: 5)
    }
    if !self.options.isEmpty {
      try visitor.visitSingularStringField(value: self.options, fieldNumber: 6)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgUpdateServiceBinding, rhs: Irismod_Service_MsgUpdateServiceBinding) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.pricing != rhs.pricing {return false}
    if lhs.qos != rhs.qos {return false}
    if lhs.options != rhs.options {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgUpdateServiceBindingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateServiceBindingResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgUpdateServiceBindingResponse, rhs: Irismod_Service_MsgUpdateServiceBindingResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgSetWithdrawAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetWithdrawAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "withdraw_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.owner)
      case 2: try decoder.decodeSingularStringField(value: &self.withdrawAddress)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.withdrawAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.withdrawAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgSetWithdrawAddress, rhs: Irismod_Service_MsgSetWithdrawAddress) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.withdrawAddress != rhs.withdrawAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgSetWithdrawAddressResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetWithdrawAddressResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgSetWithdrawAddressResponse, rhs: Irismod_Service_MsgSetWithdrawAddressResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgDisableServiceBinding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDisableServiceBinding"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "provider"),
    3: .same(proto: "owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.provider)
      case 3: try decoder.decodeSingularStringField(value: &self.owner)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgDisableServiceBinding, rhs: Irismod_Service_MsgDisableServiceBinding) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgDisableServiceBindingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDisableServiceBindingResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgDisableServiceBindingResponse, rhs: Irismod_Service_MsgDisableServiceBindingResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgEnableServiceBinding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEnableServiceBinding"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "provider"),
    3: .same(proto: "deposit"),
    4: .same(proto: "owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.provider)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.deposit)
      case 4: try decoder.decodeSingularStringField(value: &self.owner)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    if !self.deposit.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deposit, fieldNumber: 3)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgEnableServiceBinding, rhs: Irismod_Service_MsgEnableServiceBinding) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.deposit != rhs.deposit {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgEnableServiceBindingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEnableServiceBindingResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgEnableServiceBindingResponse, rhs: Irismod_Service_MsgEnableServiceBindingResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgRefundServiceDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRefundServiceDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "provider"),
    3: .same(proto: "owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeSingularStringField(value: &self.provider)
      case 3: try decoder.decodeSingularStringField(value: &self.owner)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgRefundServiceDeposit, rhs: Irismod_Service_MsgRefundServiceDeposit) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgRefundServiceDepositResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRefundServiceDepositResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgRefundServiceDepositResponse, rhs: Irismod_Service_MsgRefundServiceDepositResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgCallService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCallService"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "providers"),
    3: .same(proto: "consumer"),
    4: .same(proto: "input"),
    5: .standard(proto: "service_fee_cap"),
    6: .same(proto: "timeout"),
    7: .same(proto: "repeated"),
    8: .standard(proto: "repeated_frequency"),
    9: .standard(proto: "repeated_total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 2: try decoder.decodeRepeatedStringField(value: &self.providers)
      case 3: try decoder.decodeSingularStringField(value: &self.consumer)
      case 4: try decoder.decodeSingularStringField(value: &self.input)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.serviceFeeCap)
      case 6: try decoder.decodeSingularInt64Field(value: &self.timeout)
      case 7: try decoder.decodeSingularBoolField(value: &self.repeated)
      case 8: try decoder.decodeSingularUInt64Field(value: &self.repeatedFrequency)
      case 9: try decoder.decodeSingularInt64Field(value: &self.repeatedTotal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.providers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.providers, fieldNumber: 2)
    }
    if !self.consumer.isEmpty {
      try visitor.visitSingularStringField(value: self.consumer, fieldNumber: 3)
    }
    if !self.input.isEmpty {
      try visitor.visitSingularStringField(value: self.input, fieldNumber: 4)
    }
    if !self.serviceFeeCap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceFeeCap, fieldNumber: 5)
    }
    if self.timeout != 0 {
      try visitor.visitSingularInt64Field(value: self.timeout, fieldNumber: 6)
    }
    if self.repeated != false {
      try visitor.visitSingularBoolField(value: self.repeated, fieldNumber: 7)
    }
    if self.repeatedFrequency != 0 {
      try visitor.visitSingularUInt64Field(value: self.repeatedFrequency, fieldNumber: 8)
    }
    if self.repeatedTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.repeatedTotal, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgCallService, rhs: Irismod_Service_MsgCallService) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.providers != rhs.providers {return false}
    if lhs.consumer != rhs.consumer {return false}
    if lhs.input != rhs.input {return false}
    if lhs.serviceFeeCap != rhs.serviceFeeCap {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.repeated != rhs.repeated {return false}
    if lhs.repeatedFrequency != rhs.repeatedFrequency {return false}
    if lhs.repeatedTotal != rhs.repeatedTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgCallServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCallServiceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_context_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestContextID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestContextID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgCallServiceResponse, rhs: Irismod_Service_MsgCallServiceResponse) -> Bool {
    if lhs.requestContextID != rhs.requestContextID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgRespondService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRespondService"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "provider"),
    3: .same(proto: "result"),
    4: .same(proto: "output"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestID)
      case 2: try decoder.decodeSingularStringField(value: &self.provider)
      case 3: try decoder.decodeSingularStringField(value: &self.result)
      case 4: try decoder.decodeSingularStringField(value: &self.output)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    if !self.result.isEmpty {
      try visitor.visitSingularStringField(value: self.result, fieldNumber: 3)
    }
    if !self.output.isEmpty {
      try visitor.visitSingularStringField(value: self.output, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgRespondService, rhs: Irismod_Service_MsgRespondService) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.result != rhs.result {return false}
    if lhs.output != rhs.output {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgRespondServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRespondServiceResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgRespondServiceResponse, rhs: Irismod_Service_MsgRespondServiceResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgPauseRequestContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgPauseRequestContext"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_context_id"),
    2: .same(proto: "consumer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestContextID)
      case 2: try decoder.decodeSingularStringField(value: &self.consumer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestContextID, fieldNumber: 1)
    }
    if !self.consumer.isEmpty {
      try visitor.visitSingularStringField(value: self.consumer, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgPauseRequestContext, rhs: Irismod_Service_MsgPauseRequestContext) -> Bool {
    if lhs.requestContextID != rhs.requestContextID {return false}
    if lhs.consumer != rhs.consumer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgPauseRequestContextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgPauseRequestContextResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgPauseRequestContextResponse, rhs: Irismod_Service_MsgPauseRequestContextResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgStartRequestContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgStartRequestContext"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_context_id"),
    2: .same(proto: "consumer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestContextID)
      case 2: try decoder.decodeSingularStringField(value: &self.consumer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestContextID, fieldNumber: 1)
    }
    if !self.consumer.isEmpty {
      try visitor.visitSingularStringField(value: self.consumer, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgStartRequestContext, rhs: Irismod_Service_MsgStartRequestContext) -> Bool {
    if lhs.requestContextID != rhs.requestContextID {return false}
    if lhs.consumer != rhs.consumer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgStartRequestContextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgStartRequestContextResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgStartRequestContextResponse, rhs: Irismod_Service_MsgStartRequestContextResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgKillRequestContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgKillRequestContext"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_context_id"),
    2: .same(proto: "consumer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestContextID)
      case 2: try decoder.decodeSingularStringField(value: &self.consumer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestContextID, fieldNumber: 1)
    }
    if !self.consumer.isEmpty {
      try visitor.visitSingularStringField(value: self.consumer, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgKillRequestContext, rhs: Irismod_Service_MsgKillRequestContext) -> Bool {
    if lhs.requestContextID != rhs.requestContextID {return false}
    if lhs.consumer != rhs.consumer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgKillRequestContextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgKillRequestContextResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgKillRequestContextResponse, rhs: Irismod_Service_MsgKillRequestContextResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgUpdateRequestContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateRequestContext"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_context_id"),
    2: .same(proto: "providers"),
    3: .same(proto: "consumer"),
    4: .standard(proto: "service_fee_cap"),
    5: .same(proto: "timeout"),
    6: .standard(proto: "repeated_frequency"),
    7: .standard(proto: "repeated_total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.requestContextID)
      case 2: try decoder.decodeRepeatedStringField(value: &self.providers)
      case 3: try decoder.decodeSingularStringField(value: &self.consumer)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.serviceFeeCap)
      case 5: try decoder.decodeSingularInt64Field(value: &self.timeout)
      case 6: try decoder.decodeSingularUInt64Field(value: &self.repeatedFrequency)
      case 7: try decoder.decodeSingularInt64Field(value: &self.repeatedTotal)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestContextID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestContextID, fieldNumber: 1)
    }
    if !self.providers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.providers, fieldNumber: 2)
    }
    if !self.consumer.isEmpty {
      try visitor.visitSingularStringField(value: self.consumer, fieldNumber: 3)
    }
    if !self.serviceFeeCap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceFeeCap, fieldNumber: 4)
    }
    if self.timeout != 0 {
      try visitor.visitSingularInt64Field(value: self.timeout, fieldNumber: 5)
    }
    if self.repeatedFrequency != 0 {
      try visitor.visitSingularUInt64Field(value: self.repeatedFrequency, fieldNumber: 6)
    }
    if self.repeatedTotal != 0 {
      try visitor.visitSingularInt64Field(value: self.repeatedTotal, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgUpdateRequestContext, rhs: Irismod_Service_MsgUpdateRequestContext) -> Bool {
    if lhs.requestContextID != rhs.requestContextID {return false}
    if lhs.providers != rhs.providers {return false}
    if lhs.consumer != rhs.consumer {return false}
    if lhs.serviceFeeCap != rhs.serviceFeeCap {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.repeatedFrequency != rhs.repeatedFrequency {return false}
    if lhs.repeatedTotal != rhs.repeatedTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgUpdateRequestContextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateRequestContextResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgUpdateRequestContextResponse, rhs: Irismod_Service_MsgUpdateRequestContextResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgWithdrawEarnedFees: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawEarnedFees"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .same(proto: "provider"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.owner)
      case 2: try decoder.decodeSingularStringField(value: &self.provider)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgWithdrawEarnedFees, rhs: Irismod_Service_MsgWithdrawEarnedFees) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Service_MsgWithdrawEarnedFeesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawEarnedFeesResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Service_MsgWithdrawEarnedFeesResponse, rhs: Irismod_Service_MsgWithdrawEarnedFeesResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
