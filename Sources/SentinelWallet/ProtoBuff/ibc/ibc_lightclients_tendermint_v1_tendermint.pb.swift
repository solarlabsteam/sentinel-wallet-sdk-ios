// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/lightclients/tendermint/v1/tendermint.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ClientState from Tendermint tracks the current validator set, latest height,
/// and a possible frozen height.
struct Ibc_Lightclients_Tendermint_V1_ClientState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chainID: String = String()

  var trustLevel: Ibc_Lightclients_Tendermint_V1_Fraction {
    get {return _trustLevel ?? Ibc_Lightclients_Tendermint_V1_Fraction()}
    set {_trustLevel = newValue}
  }
  /// Returns true if `trustLevel` has been explicitly set.
  var hasTrustLevel: Bool {return self._trustLevel != nil}
  /// Clears the value of `trustLevel`. Subsequent reads from it will return its default value.
  mutating func clearTrustLevel() {self._trustLevel = nil}

  /// duration of the period since the LastestTimestamp during which the
  /// submitted headers are valid for upgrade
  var trustingPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _trustingPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_trustingPeriod = newValue}
  }
  /// Returns true if `trustingPeriod` has been explicitly set.
  var hasTrustingPeriod: Bool {return self._trustingPeriod != nil}
  /// Clears the value of `trustingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearTrustingPeriod() {self._trustingPeriod = nil}

  /// duration of the staking unbonding period
  var unbondingPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _unbondingPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_unbondingPeriod = newValue}
  }
  /// Returns true if `unbondingPeriod` has been explicitly set.
  var hasUnbondingPeriod: Bool {return self._unbondingPeriod != nil}
  /// Clears the value of `unbondingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearUnbondingPeriod() {self._unbondingPeriod = nil}

  /// defines how much new (untrusted) header's Time can drift into the future.
  var maxClockDrift: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxClockDrift ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxClockDrift = newValue}
  }
  /// Returns true if `maxClockDrift` has been explicitly set.
  var hasMaxClockDrift: Bool {return self._maxClockDrift != nil}
  /// Clears the value of `maxClockDrift`. Subsequent reads from it will return its default value.
  mutating func clearMaxClockDrift() {self._maxClockDrift = nil}

  /// Block height when the client was frozen due to a misbehaviour
  var frozenHeight: Ibc_Core_Client_V1_Height {
    get {return _frozenHeight ?? Ibc_Core_Client_V1_Height()}
    set {_frozenHeight = newValue}
  }
  /// Returns true if `frozenHeight` has been explicitly set.
  var hasFrozenHeight: Bool {return self._frozenHeight != nil}
  /// Clears the value of `frozenHeight`. Subsequent reads from it will return its default value.
  mutating func clearFrozenHeight() {self._frozenHeight = nil}

  /// Latest height the client was updated to
  var latestHeight: Ibc_Core_Client_V1_Height {
    get {return _latestHeight ?? Ibc_Core_Client_V1_Height()}
    set {_latestHeight = newValue}
  }
  /// Returns true if `latestHeight` has been explicitly set.
  var hasLatestHeight: Bool {return self._latestHeight != nil}
  /// Clears the value of `latestHeight`. Subsequent reads from it will return its default value.
  mutating func clearLatestHeight() {self._latestHeight = nil}

  /// Proof specifications used in verifying counterparty state
  var proofSpecs: [Ics23_ProofSpec] = []

  /// Path at which next upgraded client will be committed.
  /// Each element corresponds to the key for a single CommitmentProof in the chained proof.
  /// NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState`
  /// ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState`
  /// For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
  var upgradePath: [String] = []

  /// This flag, when set to true, will allow governance to recover a client
  /// which has expired
  var allowUpdateAfterExpiry: Bool = false

  /// This flag, when set to true, will allow governance to unfreeze a client
  /// whose chain has experienced a misbehaviour event
  var allowUpdateAfterMisbehaviour: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trustLevel: Ibc_Lightclients_Tendermint_V1_Fraction? = nil
  fileprivate var _trustingPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _unbondingPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _maxClockDrift: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _frozenHeight: Ibc_Core_Client_V1_Height? = nil
  fileprivate var _latestHeight: Ibc_Core_Client_V1_Height? = nil
}

/// ConsensusState defines the consensus state from Tendermint.
struct Ibc_Lightclients_Tendermint_V1_ConsensusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// timestamp that corresponds to the block height in which the ConsensusState
  /// was stored.
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  /// commitment root (i.e app hash)
  var root: Ibc_Core_Commitment_V1_MerkleRoot {
    get {return _root ?? Ibc_Core_Commitment_V1_MerkleRoot()}
    set {_root = newValue}
  }
  /// Returns true if `root` has been explicitly set.
  var hasRoot: Bool {return self._root != nil}
  /// Clears the value of `root`. Subsequent reads from it will return its default value.
  mutating func clearRoot() {self._root = nil}

  var nextValidatorsHash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _root: Ibc_Core_Commitment_V1_MerkleRoot? = nil
}

/// Misbehaviour is a wrapper over two conflicting Headers
/// that implements Misbehaviour interface expected by ICS-02
struct Ibc_Lightclients_Tendermint_V1_Misbehaviour {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var header1: Ibc_Lightclients_Tendermint_V1_Header {
    get {return _header1 ?? Ibc_Lightclients_Tendermint_V1_Header()}
    set {_header1 = newValue}
  }
  /// Returns true if `header1` has been explicitly set.
  var hasHeader1: Bool {return self._header1 != nil}
  /// Clears the value of `header1`. Subsequent reads from it will return its default value.
  mutating func clearHeader1() {self._header1 = nil}

  var header2: Ibc_Lightclients_Tendermint_V1_Header {
    get {return _header2 ?? Ibc_Lightclients_Tendermint_V1_Header()}
    set {_header2 = newValue}
  }
  /// Returns true if `header2` has been explicitly set.
  var hasHeader2: Bool {return self._header2 != nil}
  /// Clears the value of `header2`. Subsequent reads from it will return its default value.
  mutating func clearHeader2() {self._header2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header1: Ibc_Lightclients_Tendermint_V1_Header? = nil
  fileprivate var _header2: Ibc_Lightclients_Tendermint_V1_Header? = nil
}

/// Header defines the Tendermint client consensus Header.
/// It encapsulates all the information necessary to update from a trusted
/// Tendermint ConsensusState. The inclusion of TrustedHeight and
/// TrustedValidators allows this update to process correctly, so long as the
/// ConsensusState for the TrustedHeight exists, this removes race conditions
/// among relayers The SignedHeader and ValidatorSet are the new untrusted update
/// fields for the client. The TrustedHeight is the height of a stored
/// ConsensusState on the client that will be used to verify the new untrusted
/// header. The Trusted ConsensusState must be within the unbonding period of
/// current time in order to correctly verify, and the TrustedValidators must
/// hash to TrustedConsensusState.NextValidatorsHash since that is the last
/// trusted validator set at the TrustedHeight.
struct Ibc_Lightclients_Tendermint_V1_Header {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signedHeader: Tendermint_Types_SignedHeader {
    get {return _signedHeader ?? Tendermint_Types_SignedHeader()}
    set {_signedHeader = newValue}
  }
  /// Returns true if `signedHeader` has been explicitly set.
  var hasSignedHeader: Bool {return self._signedHeader != nil}
  /// Clears the value of `signedHeader`. Subsequent reads from it will return its default value.
  mutating func clearSignedHeader() {self._signedHeader = nil}

  var validatorSet: Tendermint_Types_ValidatorSet {
    get {return _validatorSet ?? Tendermint_Types_ValidatorSet()}
    set {_validatorSet = newValue}
  }
  /// Returns true if `validatorSet` has been explicitly set.
  var hasValidatorSet: Bool {return self._validatorSet != nil}
  /// Clears the value of `validatorSet`. Subsequent reads from it will return its default value.
  mutating func clearValidatorSet() {self._validatorSet = nil}

  var trustedHeight: Ibc_Core_Client_V1_Height {
    get {return _trustedHeight ?? Ibc_Core_Client_V1_Height()}
    set {_trustedHeight = newValue}
  }
  /// Returns true if `trustedHeight` has been explicitly set.
  var hasTrustedHeight: Bool {return self._trustedHeight != nil}
  /// Clears the value of `trustedHeight`. Subsequent reads from it will return its default value.
  mutating func clearTrustedHeight() {self._trustedHeight = nil}

  var trustedValidators: Tendermint_Types_ValidatorSet {
    get {return _trustedValidators ?? Tendermint_Types_ValidatorSet()}
    set {_trustedValidators = newValue}
  }
  /// Returns true if `trustedValidators` has been explicitly set.
  var hasTrustedValidators: Bool {return self._trustedValidators != nil}
  /// Clears the value of `trustedValidators`. Subsequent reads from it will return its default value.
  mutating func clearTrustedValidators() {self._trustedValidators = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _signedHeader: Tendermint_Types_SignedHeader? = nil
  fileprivate var _validatorSet: Tendermint_Types_ValidatorSet? = nil
  fileprivate var _trustedHeight: Ibc_Core_Client_V1_Height? = nil
  fileprivate var _trustedValidators: Tendermint_Types_ValidatorSet? = nil
}

/// Fraction defines the protobuf message type for tmmath.Fraction that only supports positive values.
struct Ibc_Lightclients_Tendermint_V1_Fraction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var numerator: UInt64 = 0

  var denominator: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.lightclients.tendermint.v1"

extension Ibc_Lightclients_Tendermint_V1_ClientState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "trust_level"),
    3: .standard(proto: "trusting_period"),
    4: .standard(proto: "unbonding_period"),
    5: .standard(proto: "max_clock_drift"),
    6: .standard(proto: "frozen_height"),
    7: .standard(proto: "latest_height"),
    8: .standard(proto: "proof_specs"),
    9: .standard(proto: "upgrade_path"),
    10: .standard(proto: "allow_update_after_expiry"),
    11: .standard(proto: "allow_update_after_misbehaviour"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.chainID)
      case 2: try decoder.decodeSingularMessageField(value: &self._trustLevel)
      case 3: try decoder.decodeSingularMessageField(value: &self._trustingPeriod)
      case 4: try decoder.decodeSingularMessageField(value: &self._unbondingPeriod)
      case 5: try decoder.decodeSingularMessageField(value: &self._maxClockDrift)
      case 6: try decoder.decodeSingularMessageField(value: &self._frozenHeight)
      case 7: try decoder.decodeSingularMessageField(value: &self._latestHeight)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.proofSpecs)
      case 9: try decoder.decodeRepeatedStringField(value: &self.upgradePath)
      case 10: try decoder.decodeSingularBoolField(value: &self.allowUpdateAfterExpiry)
      case 11: try decoder.decodeSingularBoolField(value: &self.allowUpdateAfterMisbehaviour)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if let v = self._trustLevel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._trustingPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._unbondingPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._maxClockDrift {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._frozenHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._latestHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.proofSpecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.proofSpecs, fieldNumber: 8)
    }
    if !self.upgradePath.isEmpty {
      try visitor.visitRepeatedStringField(value: self.upgradePath, fieldNumber: 9)
    }
    if self.allowUpdateAfterExpiry != false {
      try visitor.visitSingularBoolField(value: self.allowUpdateAfterExpiry, fieldNumber: 10)
    }
    if self.allowUpdateAfterMisbehaviour != false {
      try visitor.visitSingularBoolField(value: self.allowUpdateAfterMisbehaviour, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Tendermint_V1_ClientState, rhs: Ibc_Lightclients_Tendermint_V1_ClientState) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs._trustLevel != rhs._trustLevel {return false}
    if lhs._trustingPeriod != rhs._trustingPeriod {return false}
    if lhs._unbondingPeriod != rhs._unbondingPeriod {return false}
    if lhs._maxClockDrift != rhs._maxClockDrift {return false}
    if lhs._frozenHeight != rhs._frozenHeight {return false}
    if lhs._latestHeight != rhs._latestHeight {return false}
    if lhs.proofSpecs != rhs.proofSpecs {return false}
    if lhs.upgradePath != rhs.upgradePath {return false}
    if lhs.allowUpdateAfterExpiry != rhs.allowUpdateAfterExpiry {return false}
    if lhs.allowUpdateAfterMisbehaviour != rhs.allowUpdateAfterMisbehaviour {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Tendermint_V1_ConsensusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsensusState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "root"),
    3: .standard(proto: "next_validators_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._timestamp)
      case 2: try decoder.decodeSingularMessageField(value: &self._root)
      case 3: try decoder.decodeSingularBytesField(value: &self.nextValidatorsHash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._root {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.nextValidatorsHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.nextValidatorsHash, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Tendermint_V1_ConsensusState, rhs: Ibc_Lightclients_Tendermint_V1_ConsensusState) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._root != rhs._root {return false}
    if lhs.nextValidatorsHash != rhs.nextValidatorsHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Tendermint_V1_Misbehaviour: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Misbehaviour"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "header_1"),
    3: .standard(proto: "header_2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.clientID)
      case 2: try decoder.decodeSingularMessageField(value: &self._header1)
      case 3: try decoder.decodeSingularMessageField(value: &self._header2)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if let v = self._header1 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._header2 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Tendermint_V1_Misbehaviour, rhs: Ibc_Lightclients_Tendermint_V1_Misbehaviour) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs._header1 != rhs._header1 {return false}
    if lhs._header2 != rhs._header2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Tendermint_V1_Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Header"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_header"),
    2: .standard(proto: "validator_set"),
    3: .standard(proto: "trusted_height"),
    4: .standard(proto: "trusted_validators"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._signedHeader)
      case 2: try decoder.decodeSingularMessageField(value: &self._validatorSet)
      case 3: try decoder.decodeSingularMessageField(value: &self._trustedHeight)
      case 4: try decoder.decodeSingularMessageField(value: &self._trustedValidators)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._signedHeader {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._validatorSet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._trustedHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._trustedValidators {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Tendermint_V1_Header, rhs: Ibc_Lightclients_Tendermint_V1_Header) -> Bool {
    if lhs._signedHeader != rhs._signedHeader {return false}
    if lhs._validatorSet != rhs._validatorSet {return false}
    if lhs._trustedHeight != rhs._trustedHeight {return false}
    if lhs._trustedValidators != rhs._trustedValidators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Tendermint_V1_Fraction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Fraction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "numerator"),
    2: .same(proto: "denominator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.numerator)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.denominator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numerator != 0 {
      try visitor.visitSingularUInt64Field(value: self.numerator, fieldNumber: 1)
    }
    if self.denominator != 0 {
      try visitor.visitSingularUInt64Field(value: self.denominator, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Tendermint_V1_Fraction, rhs: Ibc_Lightclients_Tendermint_V1_Fraction) -> Bool {
    if lhs.numerator != rhs.numerator {return false}
    if lhs.denominator != rhs.denominator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
