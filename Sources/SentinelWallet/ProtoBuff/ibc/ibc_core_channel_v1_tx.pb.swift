// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/core/channel/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
/// is called by a relayer on Chain A.
struct Ibc_Core_Channel_V1_MsgChannelOpenInit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portID: String = String()

  var channel: Ibc_Core_Channel_V1_Channel {
    get {return _channel ?? Ibc_Core_Channel_V1_Channel()}
    set {_channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  var hasChannel: Bool {return self._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  mutating func clearChannel() {self._channel = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _channel: Ibc_Core_Channel_V1_Channel? = nil
}

/// MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
struct Ibc_Core_Channel_V1_MsgChannelOpenInitResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
/// on Chain B.
struct Ibc_Core_Channel_V1_MsgChannelOpenTry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portID: String = String()

  /// in the case of crossing hello's, when both chains call OpenInit, we need the channel identifier
  /// of the previous channel in state INIT
  var previousChannelID: String = String()

  var channel: Ibc_Core_Channel_V1_Channel {
    get {return _channel ?? Ibc_Core_Channel_V1_Channel()}
    set {_channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  var hasChannel: Bool {return self._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  mutating func clearChannel() {self._channel = nil}

  var counterpartyVersion: String = String()

  var proofInit: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _channel: Ibc_Core_Channel_V1_Channel? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
struct Ibc_Core_Channel_V1_MsgChannelOpenTryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
/// the change of channel state to TRYOPEN on Chain B.
struct Ibc_Core_Channel_V1_MsgChannelOpenAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portID: String = String()

  var channelID: String = String()

  var counterpartyChannelID: String = String()

  var counterpartyVersion: String = String()

  var proofTry: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
struct Ibc_Core_Channel_V1_MsgChannelOpenAckResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
/// acknowledge the change of channel state to OPEN on Chain A.
struct Ibc_Core_Channel_V1_MsgChannelOpenConfirm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portID: String = String()

  var channelID: String = String()

  var proofAck: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response type.
struct Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
/// to close a channel with Chain B.
struct Ibc_Core_Channel_V1_MsgChannelCloseInit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portID: String = String()

  var channelID: String = String()

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response type.
struct Ibc_Core_Channel_V1_MsgChannelCloseInitResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
/// to acknowledge the change of channel state to CLOSED on Chain A.
struct Ibc_Core_Channel_V1_MsgChannelCloseConfirm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portID: String = String()

  var channelID: String = String()

  var proofInit: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm response type.
struct Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRecvPacket receives incoming IBC packet
struct Ibc_Core_Channel_V1_MsgRecvPacket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packet: Ibc_Core_Channel_V1_Packet {
    get {return _packet ?? Ibc_Core_Channel_V1_Packet()}
    set {_packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  var hasPacket: Bool {return self._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
  mutating func clearPacket() {self._packet = nil}

  var proofCommitment: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packet: Ibc_Core_Channel_V1_Packet? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgRecvPacketResponse defines the Msg/RecvPacket response type.
struct Ibc_Core_Channel_V1_MsgRecvPacketResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgTimeout receives timed-out packet
struct Ibc_Core_Channel_V1_MsgTimeout {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packet: Ibc_Core_Channel_V1_Packet {
    get {return _packet ?? Ibc_Core_Channel_V1_Packet()}
    set {_packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  var hasPacket: Bool {return self._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
  mutating func clearPacket() {self._packet = nil}

  var proofUnreceived: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var nextSequenceRecv: UInt64 = 0

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packet: Ibc_Core_Channel_V1_Packet? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgTimeoutResponse defines the Msg/Timeout response type.
struct Ibc_Core_Channel_V1_MsgTimeoutResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
struct Ibc_Core_Channel_V1_MsgTimeoutOnClose {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packet: Ibc_Core_Channel_V1_Packet {
    get {return _packet ?? Ibc_Core_Channel_V1_Packet()}
    set {_packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  var hasPacket: Bool {return self._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
  mutating func clearPacket() {self._packet = nil}

  var proofUnreceived: Data = SwiftProtobuf.Internal.emptyData

  var proofClose: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var nextSequenceRecv: UInt64 = 0

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packet: Ibc_Core_Channel_V1_Packet? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
struct Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAcknowledgement receives incoming IBC acknowledgement
struct Ibc_Core_Channel_V1_MsgAcknowledgement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packet: Ibc_Core_Channel_V1_Packet {
    get {return _packet ?? Ibc_Core_Channel_V1_Packet()}
    set {_packet = newValue}
  }
  /// Returns true if `packet` has been explicitly set.
  var hasPacket: Bool {return self._packet != nil}
  /// Clears the value of `packet`. Subsequent reads from it will return its default value.
  mutating func clearPacket() {self._packet = nil}

  var acknowledgement: Data = SwiftProtobuf.Internal.emptyData

  var proofAcked: Data = SwiftProtobuf.Internal.emptyData

  var proofHeight: Ibc_Core_Client_V1_Height {
    get {return _proofHeight ?? Ibc_Core_Client_V1_Height()}
    set {_proofHeight = newValue}
  }
  /// Returns true if `proofHeight` has been explicitly set.
  var hasProofHeight: Bool {return self._proofHeight != nil}
  /// Clears the value of `proofHeight`. Subsequent reads from it will return its default value.
  mutating func clearProofHeight() {self._proofHeight = nil}

  var signer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packet: Ibc_Core_Channel_V1_Packet? = nil
  fileprivate var _proofHeight: Ibc_Core_Client_V1_Height? = nil
}

/// MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
struct Ibc_Core_Channel_V1_MsgAcknowledgementResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.core.channel.v1"

extension Ibc_Core_Channel_V1_MsgChannelOpenInit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenInit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .same(proto: "channel"),
    3: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularMessageField(value: &self._channel)
      case 3: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if let v = self._channel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenInit, rhs: Ibc_Core_Channel_V1_MsgChannelOpenInit) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs._channel != rhs._channel {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelOpenInitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenInitResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenInitResponse, rhs: Ibc_Core_Channel_V1_MsgChannelOpenInitResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelOpenTry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenTry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .standard(proto: "previous_channel_id"),
    3: .same(proto: "channel"),
    4: .standard(proto: "counterparty_version"),
    5: .standard(proto: "proof_init"),
    6: .standard(proto: "proof_height"),
    7: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularStringField(value: &self.previousChannelID)
      case 3: try decoder.decodeSingularMessageField(value: &self._channel)
      case 4: try decoder.decodeSingularStringField(value: &self.counterpartyVersion)
      case 5: try decoder.decodeSingularBytesField(value: &self.proofInit)
      case 6: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 7: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if !self.previousChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.previousChannelID, fieldNumber: 2)
    }
    if let v = self._channel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.counterpartyVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.counterpartyVersion, fieldNumber: 4)
    }
    if !self.proofInit.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofInit, fieldNumber: 5)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenTry, rhs: Ibc_Core_Channel_V1_MsgChannelOpenTry) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs.previousChannelID != rhs.previousChannelID {return false}
    if lhs._channel != rhs._channel {return false}
    if lhs.counterpartyVersion != rhs.counterpartyVersion {return false}
    if lhs.proofInit != rhs.proofInit {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelOpenTryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenTryResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenTryResponse, rhs: Ibc_Core_Channel_V1_MsgChannelOpenTryResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelOpenAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .standard(proto: "channel_id"),
    3: .standard(proto: "counterparty_channel_id"),
    4: .standard(proto: "counterparty_version"),
    5: .standard(proto: "proof_try"),
    6: .standard(proto: "proof_height"),
    7: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularStringField(value: &self.channelID)
      case 3: try decoder.decodeSingularStringField(value: &self.counterpartyChannelID)
      case 4: try decoder.decodeSingularStringField(value: &self.counterpartyVersion)
      case 5: try decoder.decodeSingularBytesField(value: &self.proofTry)
      case 6: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 7: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 2)
    }
    if !self.counterpartyChannelID.isEmpty {
      try visitor.visitSingularStringField(value: self.counterpartyChannelID, fieldNumber: 3)
    }
    if !self.counterpartyVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.counterpartyVersion, fieldNumber: 4)
    }
    if !self.proofTry.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofTry, fieldNumber: 5)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenAck, rhs: Ibc_Core_Channel_V1_MsgChannelOpenAck) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.counterpartyChannelID != rhs.counterpartyChannelID {return false}
    if lhs.counterpartyVersion != rhs.counterpartyVersion {return false}
    if lhs.proofTry != rhs.proofTry {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelOpenAckResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenAckResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenAckResponse, rhs: Ibc_Core_Channel_V1_MsgChannelOpenAckResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelOpenConfirm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenConfirm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .standard(proto: "channel_id"),
    3: .standard(proto: "proof_ack"),
    4: .standard(proto: "proof_height"),
    5: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularStringField(value: &self.channelID)
      case 3: try decoder.decodeSingularBytesField(value: &self.proofAck)
      case 4: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 5: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 2)
    }
    if !self.proofAck.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofAck, fieldNumber: 3)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenConfirm, rhs: Ibc_Core_Channel_V1_MsgChannelOpenConfirm) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.proofAck != rhs.proofAck {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelOpenConfirmResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse, rhs: Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelCloseInit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelCloseInit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .standard(proto: "channel_id"),
    3: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularStringField(value: &self.channelID)
      case 3: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 2)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelCloseInit, rhs: Ibc_Core_Channel_V1_MsgChannelCloseInit) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelCloseInitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelCloseInitResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelCloseInitResponse, rhs: Ibc_Core_Channel_V1_MsgChannelCloseInitResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelCloseConfirm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelCloseConfirm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "port_id"),
    2: .standard(proto: "channel_id"),
    3: .standard(proto: "proof_init"),
    4: .standard(proto: "proof_height"),
    5: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.portID)
      case 2: try decoder.decodeSingularStringField(value: &self.channelID)
      case 3: try decoder.decodeSingularBytesField(value: &self.proofInit)
      case 4: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 5: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 1)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 2)
    }
    if !self.proofInit.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofInit, fieldNumber: 3)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelCloseConfirm, rhs: Ibc_Core_Channel_V1_MsgChannelCloseConfirm) -> Bool {
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.proofInit != rhs.proofInit {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChannelCloseConfirmResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse, rhs: Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgRecvPacket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRecvPacket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    2: .standard(proto: "proof_commitment"),
    3: .standard(proto: "proof_height"),
    4: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._packet)
      case 2: try decoder.decodeSingularBytesField(value: &self.proofCommitment)
      case 3: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 4: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.proofCommitment.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofCommitment, fieldNumber: 2)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgRecvPacket, rhs: Ibc_Core_Channel_V1_MsgRecvPacket) -> Bool {
    if lhs._packet != rhs._packet {return false}
    if lhs.proofCommitment != rhs.proofCommitment {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgRecvPacketResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRecvPacketResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgRecvPacketResponse, rhs: Ibc_Core_Channel_V1_MsgRecvPacketResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgTimeout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTimeout"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    2: .standard(proto: "proof_unreceived"),
    3: .standard(proto: "proof_height"),
    4: .standard(proto: "next_sequence_recv"),
    5: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._packet)
      case 2: try decoder.decodeSingularBytesField(value: &self.proofUnreceived)
      case 3: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.nextSequenceRecv)
      case 5: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.proofUnreceived.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofUnreceived, fieldNumber: 2)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.nextSequenceRecv != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextSequenceRecv, fieldNumber: 4)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgTimeout, rhs: Ibc_Core_Channel_V1_MsgTimeout) -> Bool {
    if lhs._packet != rhs._packet {return false}
    if lhs.proofUnreceived != rhs.proofUnreceived {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.nextSequenceRecv != rhs.nextSequenceRecv {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgTimeoutResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTimeoutResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgTimeoutResponse, rhs: Ibc_Core_Channel_V1_MsgTimeoutResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgTimeoutOnClose: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTimeoutOnClose"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    2: .standard(proto: "proof_unreceived"),
    3: .standard(proto: "proof_close"),
    4: .standard(proto: "proof_height"),
    5: .standard(proto: "next_sequence_recv"),
    6: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._packet)
      case 2: try decoder.decodeSingularBytesField(value: &self.proofUnreceived)
      case 3: try decoder.decodeSingularBytesField(value: &self.proofClose)
      case 4: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.nextSequenceRecv)
      case 6: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.proofUnreceived.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofUnreceived, fieldNumber: 2)
    }
    if !self.proofClose.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofClose, fieldNumber: 3)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.nextSequenceRecv != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextSequenceRecv, fieldNumber: 5)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgTimeoutOnClose, rhs: Ibc_Core_Channel_V1_MsgTimeoutOnClose) -> Bool {
    if lhs._packet != rhs._packet {return false}
    if lhs.proofUnreceived != rhs.proofUnreceived {return false}
    if lhs.proofClose != rhs.proofClose {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.nextSequenceRecv != rhs.nextSequenceRecv {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgTimeoutOnCloseResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse, rhs: Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgAcknowledgement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAcknowledgement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    2: .same(proto: "acknowledgement"),
    3: .standard(proto: "proof_acked"),
    4: .standard(proto: "proof_height"),
    5: .same(proto: "signer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._packet)
      case 2: try decoder.decodeSingularBytesField(value: &self.acknowledgement)
      case 3: try decoder.decodeSingularBytesField(value: &self.proofAcked)
      case 4: try decoder.decodeSingularMessageField(value: &self._proofHeight)
      case 5: try decoder.decodeSingularStringField(value: &self.signer)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._packet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.acknowledgement.isEmpty {
      try visitor.visitSingularBytesField(value: self.acknowledgement, fieldNumber: 2)
    }
    if !self.proofAcked.isEmpty {
      try visitor.visitSingularBytesField(value: self.proofAcked, fieldNumber: 3)
    }
    if let v = self._proofHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.signer.isEmpty {
      try visitor.visitSingularStringField(value: self.signer, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgAcknowledgement, rhs: Ibc_Core_Channel_V1_MsgAcknowledgement) -> Bool {
    if lhs._packet != rhs._packet {return false}
    if lhs.acknowledgement != rhs.acknowledgement {return false}
    if lhs.proofAcked != rhs.proofAcked {return false}
    if lhs._proofHeight != rhs._proofHeight {return false}
    if lhs.signer != rhs.signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Channel_V1_MsgAcknowledgementResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAcknowledgementResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Channel_V1_MsgAcknowledgementResponse, rhs: Ibc_Core_Channel_V1_MsgAcknowledgementResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
