// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: htlc/htlc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// HTLCState defines the state of an HTLC
enum Irismod_Htlc_HTLCState: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// HTLC_STATE_OPEN defines an open state.
  case `open` // = 0

  /// HTLC_STATE_COMPLETED defines a completed state.
  case completed // = 1

  /// HTLC_STATE_EXPIRED defines an expired state.
  case expired // = 2

  /// HTLC_STATE_REFUNDED defines a refunded state.
  case refunded // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .open
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .open
    case 1: self = .completed
    case 2: self = .expired
    case 3: self = .refunded
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .open: return 0
    case .completed: return 1
    case .expired: return 2
    case .refunded: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Irismod_Htlc_HTLCState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Irismod_Htlc_HTLCState] = [
    .open,
    .completed,
    .expired,
    .refunded,
  ]
}

#endif  // swift(>=4.2)

/// HTLC defines the struct of an HTLC
struct Irismod_Htlc_HTLC {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var to: String = String()

  var receiverOnOtherChain: String = String()

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var secret: String = String()

  var timestamp: UInt64 = 0

  var expirationHeight: UInt64 = 0

  var state: Irismod_Htlc_HTLCState = .open

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.htlc"

extension Irismod_Htlc_HTLCState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HTLC_STATE_OPEN"),
    1: .same(proto: "HTLC_STATE_COMPLETED"),
    2: .same(proto: "HTLC_STATE_EXPIRED"),
    3: .same(proto: "HTLC_STATE_REFUNDED"),
  ]
}

extension Irismod_Htlc_HTLC: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HTLC"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "to"),
    3: .standard(proto: "receiver_on_other_chain"),
    4: .same(proto: "amount"),
    5: .same(proto: "secret"),
    6: .same(proto: "timestamp"),
    7: .standard(proto: "expiration_height"),
    8: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sender)
      case 2: try decoder.decodeSingularStringField(value: &self.to)
      case 3: try decoder.decodeSingularStringField(value: &self.receiverOnOtherChain)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.amount)
      case 5: try decoder.decodeSingularStringField(value: &self.secret)
      case 6: try decoder.decodeSingularUInt64Field(value: &self.timestamp)
      case 7: try decoder.decodeSingularUInt64Field(value: &self.expirationHeight)
      case 8: try decoder.decodeSingularEnumField(value: &self.state)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.receiverOnOtherChain.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverOnOtherChain, fieldNumber: 3)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 4)
    }
    if !self.secret.isEmpty {
      try visitor.visitSingularStringField(value: self.secret, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    if self.expirationHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.expirationHeight, fieldNumber: 7)
    }
    if self.state != .open {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Htlc_HTLC, rhs: Irismod_Htlc_HTLC) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.to != rhs.to {return false}
    if lhs.receiverOnOtherChain != rhs.receiverOnOtherChain {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.secret != rhs.secret {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.expirationHeight != rhs.expirationHeight {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
