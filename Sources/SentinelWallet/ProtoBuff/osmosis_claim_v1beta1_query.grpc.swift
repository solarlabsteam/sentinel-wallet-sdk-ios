//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/claim/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Osmosis_Claim_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Claim_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Claim_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func moduleAccountBalance(
    _ request: Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest, Osmosis_Claim_V1beta1_QueryModuleAccountBalanceResponse>

  func params(
    _ request: Osmosis_Claim_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryParamsRequest, Osmosis_Claim_V1beta1_QueryParamsResponse>

  func claimRecord(
    _ request: Osmosis_Claim_V1beta1_QueryClaimRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryClaimRecordRequest, Osmosis_Claim_V1beta1_QueryClaimRecordResponse>

  func claimableForAction(
    _ request: Osmosis_Claim_V1beta1_QueryClaimableForActionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryClaimableForActionRequest, Osmosis_Claim_V1beta1_QueryClaimableForActionResponse>

  func totalClaimable(
    _ request: Osmosis_Claim_V1beta1_QueryTotalClaimableRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryTotalClaimableRequest, Osmosis_Claim_V1beta1_QueryTotalClaimableResponse>
}

extension Osmosis_Claim_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.claim.v1beta1.Query"
  }

  /// Unary call to ModuleAccountBalance
  ///
  /// - Parameters:
  ///   - request: Request to send to ModuleAccountBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func moduleAccountBalance(
    _ request: Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest, Osmosis_Claim_V1beta1_QueryModuleAccountBalanceResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.claim.v1beta1.Query/ModuleAccountBalance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeModuleAccountBalanceInterceptors() ?? []
    )
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Claim_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryParamsRequest, Osmosis_Claim_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.claim.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to ClaimRecord
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimRecord(
    _ request: Osmosis_Claim_V1beta1_QueryClaimRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryClaimRecordRequest, Osmosis_Claim_V1beta1_QueryClaimRecordResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.claim.v1beta1.Query/ClaimRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? []
    )
  }

  /// Unary call to ClaimableForAction
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimableForAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimableForAction(
    _ request: Osmosis_Claim_V1beta1_QueryClaimableForActionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryClaimableForActionRequest, Osmosis_Claim_V1beta1_QueryClaimableForActionResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.claim.v1beta1.Query/ClaimableForAction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? []
    )
  }

  /// Unary call to TotalClaimable
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalClaimable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalClaimable(
    _ request: Osmosis_Claim_V1beta1_QueryTotalClaimableRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Claim_V1beta1_QueryTotalClaimableRequest, Osmosis_Claim_V1beta1_QueryTotalClaimableResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.claim.v1beta1.Query/TotalClaimable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? []
    )
  }
}

internal protocol Osmosis_Claim_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'moduleAccountBalance'.
  func makeModuleAccountBalanceInterceptors() -> [ClientInterceptor<Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest, Osmosis_Claim_V1beta1_QueryModuleAccountBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Claim_V1beta1_QueryParamsRequest, Osmosis_Claim_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimRecord'.
  func makeClaimRecordInterceptors() -> [ClientInterceptor<Osmosis_Claim_V1beta1_QueryClaimRecordRequest, Osmosis_Claim_V1beta1_QueryClaimRecordResponse>]

  /// - Returns: Interceptors to use when invoking 'claimableForAction'.
  func makeClaimableForActionInterceptors() -> [ClientInterceptor<Osmosis_Claim_V1beta1_QueryClaimableForActionRequest, Osmosis_Claim_V1beta1_QueryClaimableForActionResponse>]

  /// - Returns: Interceptors to use when invoking 'totalClaimable'.
  func makeTotalClaimableInterceptors() -> [ClientInterceptor<Osmosis_Claim_V1beta1_QueryTotalClaimableRequest, Osmosis_Claim_V1beta1_QueryTotalClaimableResponse>]
}

internal final class Osmosis_Claim_V1beta1_QueryClient: Osmosis_Claim_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Claim_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.claim.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Claim_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Claim_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Claim_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  func moduleAccountBalance(request: Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Claim_V1beta1_QueryModuleAccountBalanceResponse>

  func params(request: Osmosis_Claim_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Claim_V1beta1_QueryParamsResponse>

  func claimRecord(request: Osmosis_Claim_V1beta1_QueryClaimRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Claim_V1beta1_QueryClaimRecordResponse>

  func claimableForAction(request: Osmosis_Claim_V1beta1_QueryClaimableForActionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Claim_V1beta1_QueryClaimableForActionResponse>

  func totalClaimable(request: Osmosis_Claim_V1beta1_QueryTotalClaimableRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Claim_V1beta1_QueryTotalClaimableResponse>
}

extension Osmosis_Claim_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "osmosis.claim.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ModuleAccountBalance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Claim_V1beta1_QueryModuleAccountBalanceResponse>(),
        interceptors: self.interceptors?.makeModuleAccountBalanceInterceptors() ?? [],
        userFunction: self.moduleAccountBalance(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Claim_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Claim_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "ClaimRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Claim_V1beta1_QueryClaimRecordRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Claim_V1beta1_QueryClaimRecordResponse>(),
        interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? [],
        userFunction: self.claimRecord(request:context:)
      )

    case "ClaimableForAction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Claim_V1beta1_QueryClaimableForActionRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Claim_V1beta1_QueryClaimableForActionResponse>(),
        interceptors: self.interceptors?.makeClaimableForActionInterceptors() ?? [],
        userFunction: self.claimableForAction(request:context:)
      )

    case "TotalClaimable":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Claim_V1beta1_QueryTotalClaimableRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Claim_V1beta1_QueryTotalClaimableResponse>(),
        interceptors: self.interceptors?.makeTotalClaimableInterceptors() ?? [],
        userFunction: self.totalClaimable(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Claim_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'moduleAccountBalance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeModuleAccountBalanceInterceptors() -> [ServerInterceptor<Osmosis_Claim_V1beta1_QueryModuleAccountBalanceRequest, Osmosis_Claim_V1beta1_QueryModuleAccountBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Claim_V1beta1_QueryParamsRequest, Osmosis_Claim_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'claimRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimRecordInterceptors() -> [ServerInterceptor<Osmosis_Claim_V1beta1_QueryClaimRecordRequest, Osmosis_Claim_V1beta1_QueryClaimRecordResponse>]

  /// - Returns: Interceptors to use when handling 'claimableForAction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimableForActionInterceptors() -> [ServerInterceptor<Osmosis_Claim_V1beta1_QueryClaimableForActionRequest, Osmosis_Claim_V1beta1_QueryClaimableForActionResponse>]

  /// - Returns: Interceptors to use when handling 'totalClaimable'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalClaimableInterceptors() -> [ServerInterceptor<Osmosis_Claim_V1beta1_QueryTotalClaimableRequest, Osmosis_Claim_V1beta1_QueryTotalClaimableResponse>]
}
