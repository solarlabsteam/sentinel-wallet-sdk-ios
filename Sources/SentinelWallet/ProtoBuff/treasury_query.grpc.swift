//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: treasury/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Rizonworld_Rizon_Treasury_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Rizonworld_Rizon_Treasury_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? { get }

  func currencies(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>

  func currency(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse>

  func params(
    _ request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse>
}

extension Rizonworld_Rizon_Treasury_QueryClientProtocol {
  internal var serviceName: String {
    return "rizonworld.rizon.treasury.Query"
  }

  /// Currencies queries all supported currency denom list
  ///
  /// - Parameters:
  ///   - request: Request to send to Currencies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currencies(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse> {
    return self.makeUnaryCall(
      path: "/rizonworld.rizon.treasury.Query/Currencies",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? []
    )
  }

  /// Currency queries a currency info
  ///
  /// - Parameters:
  ///   - request: Request to send to Currency.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currency(
    _ request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse> {
    return self.makeUnaryCall(
      path: "/rizonworld.rizon.treasury.Query/Currency",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrencyInterceptors() ?? []
    )
  }

  /// Params queries parameters of treasury
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Rizonworld_Rizon_Treasury_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/rizonworld.rizon.treasury.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'currencies'.
  func makeCurrenciesInterceptors() -> [ClientInterceptor<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>]

  /// - Returns: Interceptors to use when invoking 'currency'.
  func makeCurrencyInterceptors() -> [ClientInterceptor<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse>]
}

internal final class Rizonworld_Rizon_Treasury_QueryClient: Rizonworld_Rizon_Treasury_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the rizonworld.rizon.treasury.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Rizonworld_Rizon_Treasury_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Rizonworld_Rizon_Treasury_QueryProvider: CallHandlerProvider {
  var interceptors: Rizonworld_Rizon_Treasury_QueryServerInterceptorFactoryProtocol? { get }

  /// Currencies queries all supported currency denom list
  func currencies(request: Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>

  /// Currency queries a currency info
  func currency(request: Rizonworld_Rizon_Treasury_QueryCurrencyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rizonworld_Rizon_Treasury_QueryCurrencyResponse>

  /// Params queries parameters of treasury
  func params(request: Rizonworld_Rizon_Treasury_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Rizonworld_Rizon_Treasury_QueryParamsResponse>
}

extension Rizonworld_Rizon_Treasury_QueryProvider {
  internal var serviceName: Substring { return "rizonworld.rizon.treasury.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Currencies":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>(),
        interceptors: self.interceptors?.makeCurrenciesInterceptors() ?? [],
        userFunction: self.currencies(request:context:)
      )

    case "Currency":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryCurrencyRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryCurrencyResponse>(),
        interceptors: self.interceptors?.makeCurrencyInterceptors() ?? [],
        userFunction: self.currency(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Rizonworld_Rizon_Treasury_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Rizonworld_Rizon_Treasury_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Rizonworld_Rizon_Treasury_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'currencies'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrenciesInterceptors() -> [ServerInterceptor<Rizonworld_Rizon_Treasury_QueryCurrenciesRequest, Rizonworld_Rizon_Treasury_QueryCurrenciesResponse>]

  /// - Returns: Interceptors to use when handling 'currency'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrencyInterceptors() -> [ServerInterceptor<Rizonworld_Rizon_Treasury_QueryCurrencyRequest, Rizonworld_Rizon_Treasury_QueryCurrencyResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Rizonworld_Rizon_Treasury_QueryParamsRequest, Rizonworld_Rizon_Treasury_QueryParamsResponse>]
}
