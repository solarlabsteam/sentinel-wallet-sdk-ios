//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: akash/market/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Akash_Market_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Akash_Market_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Akash_Market_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func orders(
    _ request: Akash_Market_V1beta1_QueryOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_QueryOrdersRequest, Akash_Market_V1beta1_QueryOrdersResponse>

  func order(
    _ request: Akash_Market_V1beta1_QueryOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_QueryOrderRequest, Akash_Market_V1beta1_QueryOrderResponse>

  func bids(
    _ request: Akash_Market_V1beta1_QueryBidsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_QueryBidsRequest, Akash_Market_V1beta1_QueryBidsResponse>

  func bid(
    _ request: Akash_Market_V1beta1_QueryBidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_QueryBidRequest, Akash_Market_V1beta1_QueryBidResponse>

  func leases(
    _ request: Akash_Market_V1beta1_QueryLeasesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_QueryLeasesRequest, Akash_Market_V1beta1_QueryLeasesResponse>

  func lease(
    _ request: Akash_Market_V1beta1_QueryLeaseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Akash_Market_V1beta1_QueryLeaseRequest, Akash_Market_V1beta1_QueryLeaseResponse>
}

extension Akash_Market_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "akash.market.v1beta1.Query"
  }

  /// Orders queries orders with filters
  ///
  /// - Parameters:
  ///   - request: Request to send to Orders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func orders(
    _ request: Akash_Market_V1beta1_QueryOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_QueryOrdersRequest, Akash_Market_V1beta1_QueryOrdersResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Query/Orders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrdersInterceptors() ?? []
    )
  }

  /// Order queries order details
  ///
  /// - Parameters:
  ///   - request: Request to send to Order.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func order(
    _ request: Akash_Market_V1beta1_QueryOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_QueryOrderRequest, Akash_Market_V1beta1_QueryOrderResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Query/Order",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOrderInterceptors() ?? []
    )
  }

  /// Bids queries bids with filters
  ///
  /// - Parameters:
  ///   - request: Request to send to Bids.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bids(
    _ request: Akash_Market_V1beta1_QueryBidsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_QueryBidsRequest, Akash_Market_V1beta1_QueryBidsResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Query/Bids",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidsInterceptors() ?? []
    )
  }

  /// Bid queries bid details
  ///
  /// - Parameters:
  ///   - request: Request to send to Bid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bid(
    _ request: Akash_Market_V1beta1_QueryBidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_QueryBidRequest, Akash_Market_V1beta1_QueryBidResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Query/Bid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBidInterceptors() ?? []
    )
  }

  /// Leases queries leases with filters
  ///
  /// - Parameters:
  ///   - request: Request to send to Leases.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leases(
    _ request: Akash_Market_V1beta1_QueryLeasesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_QueryLeasesRequest, Akash_Market_V1beta1_QueryLeasesResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Query/Leases",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeasesInterceptors() ?? []
    )
  }

  /// Lease queries lease details
  ///
  /// - Parameters:
  ///   - request: Request to send to Lease.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lease(
    _ request: Akash_Market_V1beta1_QueryLeaseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Akash_Market_V1beta1_QueryLeaseRequest, Akash_Market_V1beta1_QueryLeaseResponse> {
    return self.makeUnaryCall(
      path: "/akash.market.v1beta1.Query/Lease",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaseInterceptors() ?? []
    )
  }
}

internal protocol Akash_Market_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'orders'.
  func makeOrdersInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_QueryOrdersRequest, Akash_Market_V1beta1_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'order'.
  func makeOrderInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_QueryOrderRequest, Akash_Market_V1beta1_QueryOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'bids'.
  func makeBidsInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_QueryBidsRequest, Akash_Market_V1beta1_QueryBidsResponse>]

  /// - Returns: Interceptors to use when invoking 'bid'.
  func makeBidInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_QueryBidRequest, Akash_Market_V1beta1_QueryBidResponse>]

  /// - Returns: Interceptors to use when invoking 'leases'.
  func makeLeasesInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_QueryLeasesRequest, Akash_Market_V1beta1_QueryLeasesResponse>]

  /// - Returns: Interceptors to use when invoking 'lease'.
  func makeLeaseInterceptors() -> [ClientInterceptor<Akash_Market_V1beta1_QueryLeaseRequest, Akash_Market_V1beta1_QueryLeaseResponse>]
}

internal final class Akash_Market_V1beta1_QueryClient: Akash_Market_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Akash_Market_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the akash.market.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Akash_Market_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Akash_Market_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Akash_Market_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Orders queries orders with filters
  func orders(request: Akash_Market_V1beta1_QueryOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_QueryOrdersResponse>

  /// Order queries order details
  func order(request: Akash_Market_V1beta1_QueryOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_QueryOrderResponse>

  /// Bids queries bids with filters
  func bids(request: Akash_Market_V1beta1_QueryBidsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_QueryBidsResponse>

  /// Bid queries bid details
  func bid(request: Akash_Market_V1beta1_QueryBidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_QueryBidResponse>

  /// Leases queries leases with filters
  func leases(request: Akash_Market_V1beta1_QueryLeasesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_QueryLeasesResponse>

  /// Lease queries lease details
  func lease(request: Akash_Market_V1beta1_QueryLeaseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Akash_Market_V1beta1_QueryLeaseResponse>
}

extension Akash_Market_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "akash.market.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Orders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_QueryOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_QueryOrdersResponse>(),
        interceptors: self.interceptors?.makeOrdersInterceptors() ?? [],
        userFunction: self.orders(request:context:)
      )

    case "Order":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_QueryOrderRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_QueryOrderResponse>(),
        interceptors: self.interceptors?.makeOrderInterceptors() ?? [],
        userFunction: self.order(request:context:)
      )

    case "Bids":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_QueryBidsRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_QueryBidsResponse>(),
        interceptors: self.interceptors?.makeBidsInterceptors() ?? [],
        userFunction: self.bids(request:context:)
      )

    case "Bid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_QueryBidRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_QueryBidResponse>(),
        interceptors: self.interceptors?.makeBidInterceptors() ?? [],
        userFunction: self.bid(request:context:)
      )

    case "Leases":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_QueryLeasesRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_QueryLeasesResponse>(),
        interceptors: self.interceptors?.makeLeasesInterceptors() ?? [],
        userFunction: self.leases(request:context:)
      )

    case "Lease":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Akash_Market_V1beta1_QueryLeaseRequest>(),
        responseSerializer: ProtobufSerializer<Akash_Market_V1beta1_QueryLeaseResponse>(),
        interceptors: self.interceptors?.makeLeaseInterceptors() ?? [],
        userFunction: self.lease(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Akash_Market_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'orders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrdersInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_QueryOrdersRequest, Akash_Market_V1beta1_QueryOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'order'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOrderInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_QueryOrderRequest, Akash_Market_V1beta1_QueryOrderResponse>]

  /// - Returns: Interceptors to use when handling 'bids'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidsInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_QueryBidsRequest, Akash_Market_V1beta1_QueryBidsResponse>]

  /// - Returns: Interceptors to use when handling 'bid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBidInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_QueryBidRequest, Akash_Market_V1beta1_QueryBidResponse>]

  /// - Returns: Interceptors to use when handling 'leases'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeasesInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_QueryLeasesRequest, Akash_Market_V1beta1_QueryLeasesResponse>]

  /// - Returns: Interceptors to use when handling 'lease'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaseInterceptors() -> [ServerInterceptor<Akash_Market_V1beta1_QueryLeaseRequest, Akash_Market_V1beta1_QueryLeaseResponse>]
}
