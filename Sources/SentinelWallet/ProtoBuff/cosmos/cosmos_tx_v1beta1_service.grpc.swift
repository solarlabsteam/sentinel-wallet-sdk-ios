//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/tx/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service defines a gRPC service for interacting with transactions.
///
/// Usage: instantiate `Cosmos_Tx_V1beta1_ServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Tx_V1beta1_ServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? { get }

  func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>

  func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>

  func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>

  func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>

  func getBlockWithTxs(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>

  func txDecode(
    _ request: Cosmos_Tx_V1beta1_TxDecodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxDecodeRequest, Cosmos_Tx_V1beta1_TxDecodeResponse>

  func txEncode(
    _ request: Cosmos_Tx_V1beta1_TxEncodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxEncodeRequest, Cosmos_Tx_V1beta1_TxEncodeResponse>

  func txEncodeAmino(
    _ request: Cosmos_Tx_V1beta1_TxEncodeAminoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxEncodeAminoRequest, Cosmos_Tx_V1beta1_TxEncodeAminoResponse>

  func txDecodeAmino(
    _ request: Cosmos_Tx_V1beta1_TxDecodeAminoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxDecodeAminoRequest, Cosmos_Tx_V1beta1_TxDecodeAminoResponse>
}

extension Cosmos_Tx_V1beta1_ServiceClientProtocol {
  internal var serviceName: String {
    return "cosmos.tx.v1beta1.Service"
  }

  /// Simulate simulates executing a transaction for estimating gas usage.
  ///
  /// - Parameters:
  ///   - request: Request to send to Simulate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSimulateInterceptors() ?? []
    )
  }

  /// GetTx fetches a tx by hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxInterceptors() ?? []
    )
  }

  /// BroadcastTx broadcast transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to BroadcastTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? []
    )
  }

  /// GetTxsEvent fetches txs by event.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTxsEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? []
    )
  }

  /// GetBlockWithTxs fetches a block with decoded txs.
  ///
  /// Since: cosmos-sdk 0.45.2
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlockWithTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlockWithTxs(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? []
    )
  }

  /// TxDecode decodes the transaction.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to TxDecode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txDecode(
    _ request: Cosmos_Tx_V1beta1_TxDecodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxDecodeRequest, Cosmos_Tx_V1beta1_TxDecodeResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDecodeInterceptors() ?? []
    )
  }

  /// TxEncode encodes the transaction.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to TxEncode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txEncode(
    _ request: Cosmos_Tx_V1beta1_TxEncodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxEncodeRequest, Cosmos_Tx_V1beta1_TxEncodeResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxEncodeInterceptors() ?? []
    )
  }

  /// TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to TxEncodeAmino.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txEncodeAmino(
    _ request: Cosmos_Tx_V1beta1_TxEncodeAminoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxEncodeAminoRequest, Cosmos_Tx_V1beta1_TxEncodeAminoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncodeAmino.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxEncodeAminoInterceptors() ?? []
    )
  }

  /// TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to TxDecodeAmino.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txDecodeAmino(
    _ request: Cosmos_Tx_V1beta1_TxDecodeAminoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Tx_V1beta1_TxDecodeAminoRequest, Cosmos_Tx_V1beta1_TxDecodeAminoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecodeAmino.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDecodeAminoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Tx_V1beta1_ServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Tx_V1beta1_ServiceNIOClient")
internal final class Cosmos_Tx_V1beta1_ServiceClient: Cosmos_Tx_V1beta1_ServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.tx.v1beta1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Tx_V1beta1_ServiceNIOClient: Cosmos_Tx_V1beta1_ServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.tx.v1beta1.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service defines a gRPC service for interacting with transactions.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? { get }

  func makeSimulateCall(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>

  func makeGetTxCall(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>

  func makeBroadcastTxCall(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>

  func makeGetTxsEventCall(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>

  func makeGetBlockWithTxsCall(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>

  func makeTxDecodeCall(
    _ request: Cosmos_Tx_V1beta1_TxDecodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxDecodeRequest, Cosmos_Tx_V1beta1_TxDecodeResponse>

  func makeTxEncodeCall(
    _ request: Cosmos_Tx_V1beta1_TxEncodeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxEncodeRequest, Cosmos_Tx_V1beta1_TxEncodeResponse>

  func makeTxEncodeAminoCall(
    _ request: Cosmos_Tx_V1beta1_TxEncodeAminoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxEncodeAminoRequest, Cosmos_Tx_V1beta1_TxEncodeAminoResponse>

  func makeTxDecodeAminoCall(
    _ request: Cosmos_Tx_V1beta1_TxDecodeAminoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxDecodeAminoRequest, Cosmos_Tx_V1beta1_TxDecodeAminoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Tx_V1beta1_ServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSimulateCall(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSimulateInterceptors() ?? []
    )
  }

  internal func makeGetTxCall(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxInterceptors() ?? []
    )
  }

  internal func makeBroadcastTxCall(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? []
    )
  }

  internal func makeGetTxsEventCall(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? []
    )
  }

  internal func makeGetBlockWithTxsCall(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? []
    )
  }

  internal func makeTxDecodeCall(
    _ request: Cosmos_Tx_V1beta1_TxDecodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxDecodeRequest, Cosmos_Tx_V1beta1_TxDecodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDecodeInterceptors() ?? []
    )
  }

  internal func makeTxEncodeCall(
    _ request: Cosmos_Tx_V1beta1_TxEncodeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxEncodeRequest, Cosmos_Tx_V1beta1_TxEncodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxEncodeInterceptors() ?? []
    )
  }

  internal func makeTxEncodeAminoCall(
    _ request: Cosmos_Tx_V1beta1_TxEncodeAminoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxEncodeAminoRequest, Cosmos_Tx_V1beta1_TxEncodeAminoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncodeAmino.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxEncodeAminoInterceptors() ?? []
    )
  }

  internal func makeTxDecodeAminoCall(
    _ request: Cosmos_Tx_V1beta1_TxDecodeAminoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Tx_V1beta1_TxDecodeAminoRequest, Cosmos_Tx_V1beta1_TxDecodeAminoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecodeAmino.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDecodeAminoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol {
  internal func simulate(
    _ request: Cosmos_Tx_V1beta1_SimulateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_SimulateResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSimulateInterceptors() ?? []
    )
  }

  internal func getTx(
    _ request: Cosmos_Tx_V1beta1_GetTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_GetTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxInterceptors() ?? []
    )
  }

  internal func broadcastTx(
    _ request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_BroadcastTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? []
    )
  }

  internal func getTxsEvent(
    _ request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_GetTxsEventResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? []
    )
  }

  internal func getBlockWithTxs(
    _ request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_GetBlockWithTxsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? []
    )
  }

  internal func txDecode(
    _ request: Cosmos_Tx_V1beta1_TxDecodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_TxDecodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDecodeInterceptors() ?? []
    )
  }

  internal func txEncode(
    _ request: Cosmos_Tx_V1beta1_TxEncodeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_TxEncodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxEncodeInterceptors() ?? []
    )
  }

  internal func txEncodeAmino(
    _ request: Cosmos_Tx_V1beta1_TxEncodeAminoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_TxEncodeAminoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncodeAmino.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxEncodeAminoInterceptors() ?? []
    )
  }

  internal func txDecodeAmino(
    _ request: Cosmos_Tx_V1beta1_TxDecodeAminoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Tx_V1beta1_TxDecodeAminoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecodeAmino.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxDecodeAminoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Tx_V1beta1_ServiceAsyncClient: Cosmos_Tx_V1beta1_ServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Tx_V1beta1_ServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'simulate'.
  func makeSimulateInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>]

  /// - Returns: Interceptors to use when invoking 'getTx'.
  func makeGetTxInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>]

  /// - Returns: Interceptors to use when invoking 'broadcastTx'.
  func makeBroadcastTxInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>]

  /// - Returns: Interceptors to use when invoking 'getTxsEvent'.
  func makeGetTxsEventInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlockWithTxs'.
  func makeGetBlockWithTxsInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'txDecode'.
  func makeTxDecodeInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_TxDecodeRequest, Cosmos_Tx_V1beta1_TxDecodeResponse>]

  /// - Returns: Interceptors to use when invoking 'txEncode'.
  func makeTxEncodeInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_TxEncodeRequest, Cosmos_Tx_V1beta1_TxEncodeResponse>]

  /// - Returns: Interceptors to use when invoking 'txEncodeAmino'.
  func makeTxEncodeAminoInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_TxEncodeAminoRequest, Cosmos_Tx_V1beta1_TxEncodeAminoResponse>]

  /// - Returns: Interceptors to use when invoking 'txDecodeAmino'.
  func makeTxDecodeAminoInterceptors() -> [ClientInterceptor<Cosmos_Tx_V1beta1_TxDecodeAminoRequest, Cosmos_Tx_V1beta1_TxDecodeAminoResponse>]
}

internal enum Cosmos_Tx_V1beta1_ServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Service",
    fullName: "cosmos.tx.v1beta1.Service",
    methods: [
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.simulate,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTx,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.broadcastTx,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getTxsEvent,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.getBlockWithTxs,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecode,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncode,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txEncodeAmino,
      Cosmos_Tx_V1beta1_ServiceClientMetadata.Methods.txDecodeAmino,
    ]
  )

  internal enum Methods {
    internal static let simulate = GRPCMethodDescriptor(
      name: "Simulate",
      path: "/cosmos.tx.v1beta1.Service/Simulate",
      type: GRPCCallType.unary
    )

    internal static let getTx = GRPCMethodDescriptor(
      name: "GetTx",
      path: "/cosmos.tx.v1beta1.Service/GetTx",
      type: GRPCCallType.unary
    )

    internal static let broadcastTx = GRPCMethodDescriptor(
      name: "BroadcastTx",
      path: "/cosmos.tx.v1beta1.Service/BroadcastTx",
      type: GRPCCallType.unary
    )

    internal static let getTxsEvent = GRPCMethodDescriptor(
      name: "GetTxsEvent",
      path: "/cosmos.tx.v1beta1.Service/GetTxsEvent",
      type: GRPCCallType.unary
    )

    internal static let getBlockWithTxs = GRPCMethodDescriptor(
      name: "GetBlockWithTxs",
      path: "/cosmos.tx.v1beta1.Service/GetBlockWithTxs",
      type: GRPCCallType.unary
    )

    internal static let txDecode = GRPCMethodDescriptor(
      name: "TxDecode",
      path: "/cosmos.tx.v1beta1.Service/TxDecode",
      type: GRPCCallType.unary
    )

    internal static let txEncode = GRPCMethodDescriptor(
      name: "TxEncode",
      path: "/cosmos.tx.v1beta1.Service/TxEncode",
      type: GRPCCallType.unary
    )

    internal static let txEncodeAmino = GRPCMethodDescriptor(
      name: "TxEncodeAmino",
      path: "/cosmos.tx.v1beta1.Service/TxEncodeAmino",
      type: GRPCCallType.unary
    )

    internal static let txDecodeAmino = GRPCMethodDescriptor(
      name: "TxDecodeAmino",
      path: "/cosmos.tx.v1beta1.Service/TxDecodeAmino",
      type: GRPCCallType.unary
    )
  }
}

/// Service defines a gRPC service for interacting with transactions.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Tx_V1beta1_ServiceProvider: CallHandlerProvider {
  var interceptors: Cosmos_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol? { get }

  /// Simulate simulates executing a transaction for estimating gas usage.
  func simulate(request: Cosmos_Tx_V1beta1_SimulateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_SimulateResponse>

  /// GetTx fetches a tx by hash.
  func getTx(request: Cosmos_Tx_V1beta1_GetTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_GetTxResponse>

  /// BroadcastTx broadcast transaction.
  func broadcastTx(request: Cosmos_Tx_V1beta1_BroadcastTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_BroadcastTxResponse>

  /// GetTxsEvent fetches txs by event.
  func getTxsEvent(request: Cosmos_Tx_V1beta1_GetTxsEventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_GetTxsEventResponse>

  /// GetBlockWithTxs fetches a block with decoded txs.
  ///
  /// Since: cosmos-sdk 0.45.2
  func getBlockWithTxs(request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>

  /// TxDecode decodes the transaction.
  ///
  /// Since: cosmos-sdk 0.47
  func txDecode(request: Cosmos_Tx_V1beta1_TxDecodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_TxDecodeResponse>

  /// TxEncode encodes the transaction.
  ///
  /// Since: cosmos-sdk 0.47
  func txEncode(request: Cosmos_Tx_V1beta1_TxEncodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_TxEncodeResponse>

  /// TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
  ///
  /// Since: cosmos-sdk 0.47
  func txEncodeAmino(request: Cosmos_Tx_V1beta1_TxEncodeAminoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_TxEncodeAminoResponse>

  /// TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
  ///
  /// Since: cosmos-sdk 0.47
  func txDecodeAmino(request: Cosmos_Tx_V1beta1_TxDecodeAminoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Tx_V1beta1_TxDecodeAminoResponse>
}

extension Cosmos_Tx_V1beta1_ServiceProvider {
  internal var serviceName: Substring {
    return Cosmos_Tx_V1beta1_ServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Simulate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_SimulateRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_SimulateResponse>(),
        interceptors: self.interceptors?.makeSimulateInterceptors() ?? [],
        userFunction: self.simulate(request:context:)
      )

    case "GetTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetTxRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetTxResponse>(),
        interceptors: self.interceptors?.makeGetTxInterceptors() ?? [],
        userFunction: self.getTx(request:context:)
      )

    case "BroadcastTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_BroadcastTxRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_BroadcastTxResponse>(),
        interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? [],
        userFunction: self.broadcastTx(request:context:)
      )

    case "GetTxsEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetTxsEventRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetTxsEventResponse>(),
        interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? [],
        userFunction: self.getTxsEvent(request:context:)
      )

    case "GetBlockWithTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>(),
        interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? [],
        userFunction: self.getBlockWithTxs(request:context:)
      )

    case "TxDecode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxDecodeRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxDecodeResponse>(),
        interceptors: self.interceptors?.makeTxDecodeInterceptors() ?? [],
        userFunction: self.txDecode(request:context:)
      )

    case "TxEncode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxEncodeRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxEncodeResponse>(),
        interceptors: self.interceptors?.makeTxEncodeInterceptors() ?? [],
        userFunction: self.txEncode(request:context:)
      )

    case "TxEncodeAmino":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxEncodeAminoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxEncodeAminoResponse>(),
        interceptors: self.interceptors?.makeTxEncodeAminoInterceptors() ?? [],
        userFunction: self.txEncodeAmino(request:context:)
      )

    case "TxDecodeAmino":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxDecodeAminoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxDecodeAminoResponse>(),
        interceptors: self.interceptors?.makeTxDecodeAminoInterceptors() ?? [],
        userFunction: self.txDecodeAmino(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service defines a gRPC service for interacting with transactions.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Tx_V1beta1_ServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol? { get }

  /// Simulate simulates executing a transaction for estimating gas usage.
  @Sendable func simulate(
    request: Cosmos_Tx_V1beta1_SimulateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_SimulateResponse

  /// GetTx fetches a tx by hash.
  @Sendable func getTx(
    request: Cosmos_Tx_V1beta1_GetTxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_GetTxResponse

  /// BroadcastTx broadcast transaction.
  @Sendable func broadcastTx(
    request: Cosmos_Tx_V1beta1_BroadcastTxRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_BroadcastTxResponse

  /// GetTxsEvent fetches txs by event.
  @Sendable func getTxsEvent(
    request: Cosmos_Tx_V1beta1_GetTxsEventRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_GetTxsEventResponse

  /// GetBlockWithTxs fetches a block with decoded txs.
  ///
  /// Since: cosmos-sdk 0.45.2
  @Sendable func getBlockWithTxs(
    request: Cosmos_Tx_V1beta1_GetBlockWithTxsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_GetBlockWithTxsResponse

  /// TxDecode decodes the transaction.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func txDecode(
    request: Cosmos_Tx_V1beta1_TxDecodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_TxDecodeResponse

  /// TxEncode encodes the transaction.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func txEncode(
    request: Cosmos_Tx_V1beta1_TxEncodeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_TxEncodeResponse

  /// TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func txEncodeAmino(
    request: Cosmos_Tx_V1beta1_TxEncodeAminoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_TxEncodeAminoResponse

  /// TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func txDecodeAmino(
    request: Cosmos_Tx_V1beta1_TxDecodeAminoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Tx_V1beta1_TxDecodeAminoResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Tx_V1beta1_ServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Tx_V1beta1_ServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Tx_V1beta1_ServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Simulate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_SimulateRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_SimulateResponse>(),
        interceptors: self.interceptors?.makeSimulateInterceptors() ?? [],
        wrapping: self.simulate(request:context:)
      )

    case "GetTx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetTxRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetTxResponse>(),
        interceptors: self.interceptors?.makeGetTxInterceptors() ?? [],
        wrapping: self.getTx(request:context:)
      )

    case "BroadcastTx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_BroadcastTxRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_BroadcastTxResponse>(),
        interceptors: self.interceptors?.makeBroadcastTxInterceptors() ?? [],
        wrapping: self.broadcastTx(request:context:)
      )

    case "GetTxsEvent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetTxsEventRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetTxsEventResponse>(),
        interceptors: self.interceptors?.makeGetTxsEventInterceptors() ?? [],
        wrapping: self.getTxsEvent(request:context:)
      )

    case "GetBlockWithTxs":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>(),
        interceptors: self.interceptors?.makeGetBlockWithTxsInterceptors() ?? [],
        wrapping: self.getBlockWithTxs(request:context:)
      )

    case "TxDecode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxDecodeRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxDecodeResponse>(),
        interceptors: self.interceptors?.makeTxDecodeInterceptors() ?? [],
        wrapping: self.txDecode(request:context:)
      )

    case "TxEncode":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxEncodeRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxEncodeResponse>(),
        interceptors: self.interceptors?.makeTxEncodeInterceptors() ?? [],
        wrapping: self.txEncode(request:context:)
      )

    case "TxEncodeAmino":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxEncodeAminoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxEncodeAminoResponse>(),
        interceptors: self.interceptors?.makeTxEncodeAminoInterceptors() ?? [],
        wrapping: self.txEncodeAmino(request:context:)
      )

    case "TxDecodeAmino":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Tx_V1beta1_TxDecodeAminoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Tx_V1beta1_TxDecodeAminoResponse>(),
        interceptors: self.interceptors?.makeTxDecodeAminoInterceptors() ?? [],
        wrapping: self.txDecodeAmino(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Tx_V1beta1_ServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'simulate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSimulateInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_SimulateRequest, Cosmos_Tx_V1beta1_SimulateResponse>]

  /// - Returns: Interceptors to use when handling 'getTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTxInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_GetTxRequest, Cosmos_Tx_V1beta1_GetTxResponse>]

  /// - Returns: Interceptors to use when handling 'broadcastTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBroadcastTxInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_BroadcastTxRequest, Cosmos_Tx_V1beta1_BroadcastTxResponse>]

  /// - Returns: Interceptors to use when handling 'getTxsEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTxsEventInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_GetTxsEventRequest, Cosmos_Tx_V1beta1_GetTxsEventResponse>]

  /// - Returns: Interceptors to use when handling 'getBlockWithTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlockWithTxsInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_GetBlockWithTxsRequest, Cosmos_Tx_V1beta1_GetBlockWithTxsResponse>]

  /// - Returns: Interceptors to use when handling 'txDecode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxDecodeInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_TxDecodeRequest, Cosmos_Tx_V1beta1_TxDecodeResponse>]

  /// - Returns: Interceptors to use when handling 'txEncode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxEncodeInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_TxEncodeRequest, Cosmos_Tx_V1beta1_TxEncodeResponse>]

  /// - Returns: Interceptors to use when handling 'txEncodeAmino'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxEncodeAminoInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_TxEncodeAminoRequest, Cosmos_Tx_V1beta1_TxEncodeAminoResponse>]

  /// - Returns: Interceptors to use when handling 'txDecodeAmino'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxDecodeAminoInterceptors() -> [ServerInterceptor<Cosmos_Tx_V1beta1_TxDecodeAminoRequest, Cosmos_Tx_V1beta1_TxDecodeAminoResponse>]
}

internal enum Cosmos_Tx_V1beta1_ServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Service",
    fullName: "cosmos.tx.v1beta1.Service",
    methods: [
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.simulate,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.getTx,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.broadcastTx,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.getTxsEvent,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.getBlockWithTxs,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.txDecode,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.txEncode,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.txEncodeAmino,
      Cosmos_Tx_V1beta1_ServiceServerMetadata.Methods.txDecodeAmino,
    ]
  )

  internal enum Methods {
    internal static let simulate = GRPCMethodDescriptor(
      name: "Simulate",
      path: "/cosmos.tx.v1beta1.Service/Simulate",
      type: GRPCCallType.unary
    )

    internal static let getTx = GRPCMethodDescriptor(
      name: "GetTx",
      path: "/cosmos.tx.v1beta1.Service/GetTx",
      type: GRPCCallType.unary
    )

    internal static let broadcastTx = GRPCMethodDescriptor(
      name: "BroadcastTx",
      path: "/cosmos.tx.v1beta1.Service/BroadcastTx",
      type: GRPCCallType.unary
    )

    internal static let getTxsEvent = GRPCMethodDescriptor(
      name: "GetTxsEvent",
      path: "/cosmos.tx.v1beta1.Service/GetTxsEvent",
      type: GRPCCallType.unary
    )

    internal static let getBlockWithTxs = GRPCMethodDescriptor(
      name: "GetBlockWithTxs",
      path: "/cosmos.tx.v1beta1.Service/GetBlockWithTxs",
      type: GRPCCallType.unary
    )

    internal static let txDecode = GRPCMethodDescriptor(
      name: "TxDecode",
      path: "/cosmos.tx.v1beta1.Service/TxDecode",
      type: GRPCCallType.unary
    )

    internal static let txEncode = GRPCMethodDescriptor(
      name: "TxEncode",
      path: "/cosmos.tx.v1beta1.Service/TxEncode",
      type: GRPCCallType.unary
    )

    internal static let txEncodeAmino = GRPCMethodDescriptor(
      name: "TxEncodeAmino",
      path: "/cosmos.tx.v1beta1.Service/TxEncodeAmino",
      type: GRPCCallType.unary
    )

    internal static let txDecodeAmino = GRPCMethodDescriptor(
      name: "TxDecodeAmino",
      path: "/cosmos.tx.v1beta1.Service/TxDecodeAmino",
      type: GRPCCallType.unary
    )
  }
}
