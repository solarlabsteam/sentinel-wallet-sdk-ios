//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/bank/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Bank_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Bank_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>

  func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>

  func spendableBalances(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>

  func spendableBalanceByDenom(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest, Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse>

  func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>

  func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>

  func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>

  func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>

  func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>

  func denomOwners(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>

  func sendEnabled(
    _ request: Cosmos_Bank_V1beta1_QuerySendEnabledRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySendEnabledRequest, Cosmos_Bank_V1beta1_QuerySendEnabledResponse>
}

extension Cosmos_Bank_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.bank.v1beta1.Query"
  }

  /// Balance queries the balance of a single coin for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// AllBalances queries the balance of all coins for a single account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? []
    )
  }

  /// SpendableBalances queries the spendable balance of all coins for a single
  /// account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to SpendableBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spendableBalances(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? []
    )
  }

  /// SpendableBalanceByDenom queries the spendable balance of a single denom for
  /// a single account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to SpendableBalanceByDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spendableBalanceByDenom(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest, Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalanceByDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalanceByDenomInterceptors() ?? []
    )
  }

  /// TotalSupply queries the total supply of all coins.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }

  /// SupplyOf queries the supply of a single coin.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to SupplyOf.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? []
    )
  }

  /// Params queries the parameters of x/bank module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// DenomsMetadata queries the client metadata of a given coin denomination.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }

  /// DenomsMetadata queries the client metadata for all registered coin
  /// denominations.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomsMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? []
    )
  }

  /// DenomOwners queries for all account addresses that own a particular token
  /// denomination.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomOwners.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomOwners(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? []
    )
  }

  /// SendEnabled queries for SendEnabled entries.
  ///
  /// This query only returns denominations that have specific SendEnabled settings.
  /// Any denomination that does not have a specific setting will use the default
  /// params.default_send_enabled, and will not be returned by this query.
  ///
  /// Since: cosmos-sdk 0.47
  ///
  /// - Parameters:
  ///   - request: Request to send to SendEnabled.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendEnabled(
    _ request: Cosmos_Bank_V1beta1_QuerySendEnabledRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Bank_V1beta1_QuerySendEnabledRequest, Cosmos_Bank_V1beta1_QuerySendEnabledResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.sendEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendEnabledInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Bank_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Bank_V1beta1_QueryNIOClient")
internal final class Cosmos_Bank_V1beta1_QueryClient: Cosmos_Bank_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.bank.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Bank_V1beta1_QueryNIOClient: Cosmos_Bank_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.bank.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Bank_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeBalanceCall(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>

  func makeAllBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>

  func makeSpendableBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>

  func makeSpendableBalanceByDenomCall(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest, Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse>

  func makeTotalSupplyCall(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>

  func makeSupplyOfCall(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>

  func makeParamsCall(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>

  func makeDenomMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>

  func makeDenomsMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>

  func makeDenomOwnersCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>

  func makeSendEnabledCall(
    _ request: Cosmos_Bank_V1beta1_QuerySendEnabledRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySendEnabledRequest, Cosmos_Bank_V1beta1_QuerySendEnabledResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Bank_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Bank_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeBalanceCall(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func makeAllBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? []
    )
  }

  internal func makeSpendableBalancesCall(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? []
    )
  }

  internal func makeSpendableBalanceByDenomCall(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest, Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalanceByDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalanceByDenomInterceptors() ?? []
    )
  }

  internal func makeTotalSupplyCall(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }

  internal func makeSupplyOfCall(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeDenomMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }

  internal func makeDenomsMetadataCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? []
    )
  }

  internal func makeDenomOwnersCall(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? []
    )
  }

  internal func makeSendEnabledCall(
    _ request: Cosmos_Bank_V1beta1_QuerySendEnabledRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Bank_V1beta1_QuerySendEnabledRequest, Cosmos_Bank_V1beta1_QuerySendEnabledResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.sendEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendEnabledInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Bank_V1beta1_QueryAsyncClientProtocol {
  internal func balance(
    _ request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryBalanceResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  internal func allBalances(
    _ request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryAllBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? []
    )
  }

  internal func spendableBalances(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? []
    )
  }

  internal func spendableBalanceByDenom(
    _ request: Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalanceByDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpendableBalanceByDenomInterceptors() ?? []
    )
  }

  internal func totalSupply(
    _ request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryTotalSupplyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? []
    )
  }

  internal func supplyOf(
    _ request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QuerySupplyOfResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func denomMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }

  internal func denomsMetadata(
    _ request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? []
    )
  }

  internal func denomOwners(
    _ request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomOwnersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? []
    )
  }

  internal func sendEnabled(
    _ request: Cosmos_Bank_V1beta1_QuerySendEnabledRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Bank_V1beta1_QuerySendEnabledResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.sendEnabled.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendEnabledInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Bank_V1beta1_QueryAsyncClient: Cosmos_Bank_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Bank_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'allBalances'.
  func makeAllBalancesInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'spendableBalances'.
  func makeSpendableBalancesInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'spendableBalanceByDenom'.
  func makeSpendableBalanceByDenomInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest, Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'totalSupply'.
  func makeTotalSupplyInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'supplyOf'.
  func makeSupplyOfInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'denomMetadata'.
  func makeDenomMetadataInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'denomsMetadata'.
  func makeDenomsMetadataInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'denomOwners'.
  func makeDenomOwnersInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>]

  /// - Returns: Interceptors to use when invoking 'sendEnabled'.
  func makeSendEnabledInterceptors() -> [ClientInterceptor<Cosmos_Bank_V1beta1_QuerySendEnabledRequest, Cosmos_Bank_V1beta1_QuerySendEnabledResponse>]
}

internal enum Cosmos_Bank_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.bank.v1beta1.Query",
    methods: [
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.balance,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.allBalances,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalances,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.spendableBalanceByDenom,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.totalSupply,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.supplyOf,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.params,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomMetadata,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomsMetadata,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.denomOwners,
      Cosmos_Bank_V1beta1_QueryClientMetadata.Methods.sendEnabled,
    ]
  )

  internal enum Methods {
    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/cosmos.bank.v1beta1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let allBalances = GRPCMethodDescriptor(
      name: "AllBalances",
      path: "/cosmos.bank.v1beta1.Query/AllBalances",
      type: GRPCCallType.unary
    )

    internal static let spendableBalances = GRPCMethodDescriptor(
      name: "SpendableBalances",
      path: "/cosmos.bank.v1beta1.Query/SpendableBalances",
      type: GRPCCallType.unary
    )

    internal static let spendableBalanceByDenom = GRPCMethodDescriptor(
      name: "SpendableBalanceByDenom",
      path: "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
      type: GRPCCallType.unary
    )

    internal static let totalSupply = GRPCMethodDescriptor(
      name: "TotalSupply",
      path: "/cosmos.bank.v1beta1.Query/TotalSupply",
      type: GRPCCallType.unary
    )

    internal static let supplyOf = GRPCMethodDescriptor(
      name: "SupplyOf",
      path: "/cosmos.bank.v1beta1.Query/SupplyOf",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.bank.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let denomMetadata = GRPCMethodDescriptor(
      name: "DenomMetadata",
      path: "/cosmos.bank.v1beta1.Query/DenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let denomsMetadata = GRPCMethodDescriptor(
      name: "DenomsMetadata",
      path: "/cosmos.bank.v1beta1.Query/DenomsMetadata",
      type: GRPCCallType.unary
    )

    internal static let denomOwners = GRPCMethodDescriptor(
      name: "DenomOwners",
      path: "/cosmos.bank.v1beta1.Query/DenomOwners",
      type: GRPCCallType.unary
    )

    internal static let sendEnabled = GRPCMethodDescriptor(
      name: "SendEnabled",
      path: "/cosmos.bank.v1beta1.Query/SendEnabled",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Bank_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Bank_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Balance queries the balance of a single coin for a single account.
  func balance(request: Cosmos_Bank_V1beta1_QueryBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QueryBalanceResponse>

  /// AllBalances queries the balance of all coins for a single account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func allBalances(request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QueryAllBalancesResponse>

  /// SpendableBalances queries the spendable balance of all coins for a single
  /// account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.46
  func spendableBalances(request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>

  /// SpendableBalanceByDenom queries the spendable balance of a single denom for
  /// a single account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.47
  func spendableBalanceByDenom(request: Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse>

  /// TotalSupply queries the total supply of all coins.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func totalSupply(request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>

  /// SupplyOf queries the supply of a single coin.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func supplyOf(request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QuerySupplyOfResponse>

  /// Params queries the parameters of x/bank module.
  func params(request: Cosmos_Bank_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QueryParamsResponse>

  /// DenomsMetadata queries the client metadata of a given coin denomination.
  func denomMetadata(request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>

  /// DenomsMetadata queries the client metadata for all registered coin
  /// denominations.
  func denomsMetadata(request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>

  /// DenomOwners queries for all account addresses that own a particular token
  /// denomination.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.46
  func denomOwners(request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>

  /// SendEnabled queries for SendEnabled entries.
  ///
  /// This query only returns denominations that have specific SendEnabled settings.
  /// Any denomination that does not have a specific setting will use the default
  /// params.default_send_enabled, and will not be returned by this query.
  ///
  /// Since: cosmos-sdk 0.47
  func sendEnabled(request: Cosmos_Bank_V1beta1_QuerySendEnabledRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Bank_V1beta1_QuerySendEnabledResponse>
}

extension Cosmos_Bank_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Cosmos_Bank_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Balance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        userFunction: self.balance(request:context:)
      )

    case "AllBalances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryAllBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryAllBalancesResponse>(),
        interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? [],
        userFunction: self.allBalances(request:context:)
      )

    case "SpendableBalances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>(),
        interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? [],
        userFunction: self.spendableBalances(request:context:)
      )

    case "SpendableBalanceByDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse>(),
        interceptors: self.interceptors?.makeSpendableBalanceByDenomInterceptors() ?? [],
        userFunction: self.spendableBalanceByDenom(request:context:)
      )

    case "TotalSupply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>(),
        interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? [],
        userFunction: self.totalSupply(request:context:)
      )

    case "SupplyOf":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySupplyOfRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySupplyOfResponse>(),
        interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? [],
        userFunction: self.supplyOf(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "DenomMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? [],
        userFunction: self.denomMetadata(request:context:)
      )

    case "DenomsMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>(),
        interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? [],
        userFunction: self.denomsMetadata(request:context:)
      )

    case "DenomOwners":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>(),
        interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? [],
        userFunction: self.denomOwners(request:context:)
      )

    case "SendEnabled":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySendEnabledRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySendEnabledResponse>(),
        interceptors: self.interceptors?.makeSendEnabledInterceptors() ?? [],
        userFunction: self.sendEnabled(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Bank_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Bank_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Balance queries the balance of a single coin for a single account.
  @Sendable func balance(
    request: Cosmos_Bank_V1beta1_QueryBalanceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QueryBalanceResponse

  /// AllBalances queries the balance of all coins for a single account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func allBalances(
    request: Cosmos_Bank_V1beta1_QueryAllBalancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QueryAllBalancesResponse

  /// SpendableBalances queries the spendable balance of all coins for a single
  /// account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.46
  @Sendable func spendableBalances(
    request: Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse

  /// SpendableBalanceByDenom queries the spendable balance of a single denom for
  /// a single account.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func spendableBalanceByDenom(
    request: Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse

  /// TotalSupply queries the total supply of all coins.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func totalSupply(
    request: Cosmos_Bank_V1beta1_QueryTotalSupplyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QueryTotalSupplyResponse

  /// SupplyOf queries the supply of a single coin.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func supplyOf(
    request: Cosmos_Bank_V1beta1_QuerySupplyOfRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QuerySupplyOfResponse

  /// Params queries the parameters of x/bank module.
  @Sendable func params(
    request: Cosmos_Bank_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QueryParamsResponse

  /// DenomsMetadata queries the client metadata of a given coin denomination.
  @Sendable func denomMetadata(
    request: Cosmos_Bank_V1beta1_QueryDenomMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomMetadataResponse

  /// DenomsMetadata queries the client metadata for all registered coin
  /// denominations.
  @Sendable func denomsMetadata(
    request: Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse

  /// DenomOwners queries for all account addresses that own a particular token
  /// denomination.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// Since: cosmos-sdk 0.46
  @Sendable func denomOwners(
    request: Cosmos_Bank_V1beta1_QueryDenomOwnersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QueryDenomOwnersResponse

  /// SendEnabled queries for SendEnabled entries.
  ///
  /// This query only returns denominations that have specific SendEnabled settings.
  /// Any denomination that does not have a specific setting will use the default
  /// params.default_send_enabled, and will not be returned by this query.
  ///
  /// Since: cosmos-sdk 0.47
  @Sendable func sendEnabled(
    request: Cosmos_Bank_V1beta1_QuerySendEnabledRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Bank_V1beta1_QuerySendEnabledResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Bank_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Bank_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Bank_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Bank_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Balance":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        wrapping: self.balance(request:context:)
      )

    case "AllBalances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryAllBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryAllBalancesResponse>(),
        interceptors: self.interceptors?.makeAllBalancesInterceptors() ?? [],
        wrapping: self.allBalances(request:context:)
      )

    case "SpendableBalances":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>(),
        interceptors: self.interceptors?.makeSpendableBalancesInterceptors() ?? [],
        wrapping: self.spendableBalances(request:context:)
      )

    case "SpendableBalanceByDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse>(),
        interceptors: self.interceptors?.makeSpendableBalanceByDenomInterceptors() ?? [],
        wrapping: self.spendableBalanceByDenom(request:context:)
      )

    case "TotalSupply":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>(),
        interceptors: self.interceptors?.makeTotalSupplyInterceptors() ?? [],
        wrapping: self.totalSupply(request:context:)
      )

    case "SupplyOf":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySupplyOfRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySupplyOfResponse>(),
        interceptors: self.interceptors?.makeSupplyOfInterceptors() ?? [],
        wrapping: self.supplyOf(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "DenomMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? [],
        wrapping: self.denomMetadata(request:context:)
      )

    case "DenomsMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>(),
        interceptors: self.interceptors?.makeDenomsMetadataInterceptors() ?? [],
        wrapping: self.denomsMetadata(request:context:)
      )

    case "DenomOwners":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>(),
        interceptors: self.interceptors?.makeDenomOwnersInterceptors() ?? [],
        wrapping: self.denomOwners(request:context:)
      )

    case "SendEnabled":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Bank_V1beta1_QuerySendEnabledRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Bank_V1beta1_QuerySendEnabledResponse>(),
        interceptors: self.interceptors?.makeSendEnabledInterceptors() ?? [],
        wrapping: self.sendEnabled(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Bank_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'balance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QueryBalanceRequest, Cosmos_Bank_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'allBalances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllBalancesInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QueryAllBalancesRequest, Cosmos_Bank_V1beta1_QueryAllBalancesResponse>]

  /// - Returns: Interceptors to use when handling 'spendableBalances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpendableBalancesInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QuerySpendableBalancesRequest, Cosmos_Bank_V1beta1_QuerySpendableBalancesResponse>]

  /// - Returns: Interceptors to use when handling 'spendableBalanceByDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpendableBalanceByDenomInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomRequest, Cosmos_Bank_V1beta1_QuerySpendableBalanceByDenomResponse>]

  /// - Returns: Interceptors to use when handling 'totalSupply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalSupplyInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QueryTotalSupplyRequest, Cosmos_Bank_V1beta1_QueryTotalSupplyResponse>]

  /// - Returns: Interceptors to use when handling 'supplyOf'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyOfInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QuerySupplyOfRequest, Cosmos_Bank_V1beta1_QuerySupplyOfResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QueryParamsRequest, Cosmos_Bank_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'denomMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomMetadataInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QueryDenomMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'denomsMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomsMetadataInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QueryDenomsMetadataRequest, Cosmos_Bank_V1beta1_QueryDenomsMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'denomOwners'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomOwnersInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QueryDenomOwnersRequest, Cosmos_Bank_V1beta1_QueryDenomOwnersResponse>]

  /// - Returns: Interceptors to use when handling 'sendEnabled'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendEnabledInterceptors() -> [ServerInterceptor<Cosmos_Bank_V1beta1_QuerySendEnabledRequest, Cosmos_Bank_V1beta1_QuerySendEnabledResponse>]
}

internal enum Cosmos_Bank_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.bank.v1beta1.Query",
    methods: [
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.balance,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.allBalances,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.spendableBalances,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.spendableBalanceByDenom,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.totalSupply,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.supplyOf,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.params,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.denomMetadata,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.denomsMetadata,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.denomOwners,
      Cosmos_Bank_V1beta1_QueryServerMetadata.Methods.sendEnabled,
    ]
  )

  internal enum Methods {
    internal static let balance = GRPCMethodDescriptor(
      name: "Balance",
      path: "/cosmos.bank.v1beta1.Query/Balance",
      type: GRPCCallType.unary
    )

    internal static let allBalances = GRPCMethodDescriptor(
      name: "AllBalances",
      path: "/cosmos.bank.v1beta1.Query/AllBalances",
      type: GRPCCallType.unary
    )

    internal static let spendableBalances = GRPCMethodDescriptor(
      name: "SpendableBalances",
      path: "/cosmos.bank.v1beta1.Query/SpendableBalances",
      type: GRPCCallType.unary
    )

    internal static let spendableBalanceByDenom = GRPCMethodDescriptor(
      name: "SpendableBalanceByDenom",
      path: "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
      type: GRPCCallType.unary
    )

    internal static let totalSupply = GRPCMethodDescriptor(
      name: "TotalSupply",
      path: "/cosmos.bank.v1beta1.Query/TotalSupply",
      type: GRPCCallType.unary
    )

    internal static let supplyOf = GRPCMethodDescriptor(
      name: "SupplyOf",
      path: "/cosmos.bank.v1beta1.Query/SupplyOf",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.bank.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let denomMetadata = GRPCMethodDescriptor(
      name: "DenomMetadata",
      path: "/cosmos.bank.v1beta1.Query/DenomMetadata",
      type: GRPCCallType.unary
    )

    internal static let denomsMetadata = GRPCMethodDescriptor(
      name: "DenomsMetadata",
      path: "/cosmos.bank.v1beta1.Query/DenomsMetadata",
      type: GRPCCallType.unary
    )

    internal static let denomOwners = GRPCMethodDescriptor(
      name: "DenomOwners",
      path: "/cosmos.bank.v1beta1.Query/DenomOwners",
      type: GRPCCallType.unary
    )

    internal static let sendEnabled = GRPCMethodDescriptor(
      name: "SendEnabled",
      path: "/cosmos.bank.v1beta1.Query/SendEnabled",
      type: GRPCCallType.unary
    )
  }
}
