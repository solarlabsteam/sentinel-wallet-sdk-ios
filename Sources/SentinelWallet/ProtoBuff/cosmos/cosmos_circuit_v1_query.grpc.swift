//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/circuit/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the crisis Msg service.
///
/// Usage: instantiate `Cosmos_Circuit_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Circuit_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol? { get }

  func account(
    _ request: Cosmos_Circuit_V1_QueryAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Circuit_V1_QueryAccountRequest, Cosmos_Circuit_V1_AccountResponse>

  func accounts(
    _ request: Cosmos_Circuit_V1_QueryAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Circuit_V1_QueryAccountsRequest, Cosmos_Circuit_V1_AccountsResponse>

  func disabledList(
    _ request: Cosmos_Circuit_V1_QueryDisabledListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Circuit_V1_QueryDisabledListRequest, Cosmos_Circuit_V1_DisabledListResponse>
}

extension Cosmos_Circuit_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.circuit.v1.Query"
  }

  /// Account returns account permissions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Account.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func account(
    _ request: Cosmos_Circuit_V1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Circuit_V1_QueryAccountRequest, Cosmos_Circuit_V1_AccountResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  /// Account returns account permissions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Accounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accounts(
    _ request: Cosmos_Circuit_V1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Circuit_V1_QueryAccountsRequest, Cosmos_Circuit_V1_AccountsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  /// DisabledList returns a list of disabled message urls
  ///
  /// - Parameters:
  ///   - request: Request to send to DisabledList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disabledList(
    _ request: Cosmos_Circuit_V1_QueryDisabledListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Circuit_V1_QueryDisabledListRequest, Cosmos_Circuit_V1_DisabledListResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.disabledList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisabledListInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Circuit_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Circuit_V1_QueryNIOClient")
internal final class Cosmos_Circuit_V1_QueryClient: Cosmos_Circuit_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.circuit.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Circuit_V1_QueryNIOClient: Cosmos_Circuit_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.circuit.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the crisis Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Circuit_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeAccountCall(
    _ request: Cosmos_Circuit_V1_QueryAccountRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_QueryAccountRequest, Cosmos_Circuit_V1_AccountResponse>

  func makeAccountsCall(
    _ request: Cosmos_Circuit_V1_QueryAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_QueryAccountsRequest, Cosmos_Circuit_V1_AccountsResponse>

  func makeDisabledListCall(
    _ request: Cosmos_Circuit_V1_QueryDisabledListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_QueryDisabledListRequest, Cosmos_Circuit_V1_DisabledListResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Circuit_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Circuit_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAccountCall(
    _ request: Cosmos_Circuit_V1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_QueryAccountRequest, Cosmos_Circuit_V1_AccountResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  internal func makeAccountsCall(
    _ request: Cosmos_Circuit_V1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_QueryAccountsRequest, Cosmos_Circuit_V1_AccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  internal func makeDisabledListCall(
    _ request: Cosmos_Circuit_V1_QueryDisabledListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Circuit_V1_QueryDisabledListRequest, Cosmos_Circuit_V1_DisabledListResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.disabledList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisabledListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Circuit_V1_QueryAsyncClientProtocol {
  internal func account(
    _ request: Cosmos_Circuit_V1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Circuit_V1_AccountResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.account.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  internal func accounts(
    _ request: Cosmos_Circuit_V1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Circuit_V1_AccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  internal func disabledList(
    _ request: Cosmos_Circuit_V1_QueryDisabledListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Circuit_V1_DisabledListResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Circuit_V1_QueryClientMetadata.Methods.disabledList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisabledListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Circuit_V1_QueryAsyncClient: Cosmos_Circuit_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Circuit_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'account'.
  func makeAccountInterceptors() -> [ClientInterceptor<Cosmos_Circuit_V1_QueryAccountRequest, Cosmos_Circuit_V1_AccountResponse>]

  /// - Returns: Interceptors to use when invoking 'accounts'.
  func makeAccountsInterceptors() -> [ClientInterceptor<Cosmos_Circuit_V1_QueryAccountsRequest, Cosmos_Circuit_V1_AccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'disabledList'.
  func makeDisabledListInterceptors() -> [ClientInterceptor<Cosmos_Circuit_V1_QueryDisabledListRequest, Cosmos_Circuit_V1_DisabledListResponse>]
}

internal enum Cosmos_Circuit_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.circuit.v1.Query",
    methods: [
      Cosmos_Circuit_V1_QueryClientMetadata.Methods.account,
      Cosmos_Circuit_V1_QueryClientMetadata.Methods.accounts,
      Cosmos_Circuit_V1_QueryClientMetadata.Methods.disabledList,
    ]
  )

  internal enum Methods {
    internal static let account = GRPCMethodDescriptor(
      name: "Account",
      path: "/cosmos.circuit.v1.Query/Account",
      type: GRPCCallType.unary
    )

    internal static let accounts = GRPCMethodDescriptor(
      name: "Accounts",
      path: "/cosmos.circuit.v1.Query/Accounts",
      type: GRPCCallType.unary
    )

    internal static let disabledList = GRPCMethodDescriptor(
      name: "DisabledList",
      path: "/cosmos.circuit.v1.Query/DisabledList",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the crisis Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Circuit_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Circuit_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Account returns account permissions.
  func account(request: Cosmos_Circuit_V1_QueryAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Circuit_V1_AccountResponse>

  /// Account returns account permissions.
  func accounts(request: Cosmos_Circuit_V1_QueryAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Circuit_V1_AccountsResponse>

  /// DisabledList returns a list of disabled message urls
  func disabledList(request: Cosmos_Circuit_V1_QueryDisabledListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Circuit_V1_DisabledListResponse>
}

extension Cosmos_Circuit_V1_QueryProvider {
  internal var serviceName: Substring {
    return Cosmos_Circuit_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Account":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Circuit_V1_QueryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Circuit_V1_AccountResponse>(),
        interceptors: self.interceptors?.makeAccountInterceptors() ?? [],
        userFunction: self.account(request:context:)
      )

    case "Accounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Circuit_V1_QueryAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Circuit_V1_AccountsResponse>(),
        interceptors: self.interceptors?.makeAccountsInterceptors() ?? [],
        userFunction: self.accounts(request:context:)
      )

    case "DisabledList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Circuit_V1_QueryDisabledListRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Circuit_V1_DisabledListResponse>(),
        interceptors: self.interceptors?.makeDisabledListInterceptors() ?? [],
        userFunction: self.disabledList(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the crisis Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Circuit_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Circuit_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Account returns account permissions.
  @Sendable func account(
    request: Cosmos_Circuit_V1_QueryAccountRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Circuit_V1_AccountResponse

  /// Account returns account permissions.
  @Sendable func accounts(
    request: Cosmos_Circuit_V1_QueryAccountsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Circuit_V1_AccountsResponse

  /// DisabledList returns a list of disabled message urls
  @Sendable func disabledList(
    request: Cosmos_Circuit_V1_QueryDisabledListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Circuit_V1_DisabledListResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Circuit_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Circuit_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Circuit_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Circuit_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Account":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Circuit_V1_QueryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Circuit_V1_AccountResponse>(),
        interceptors: self.interceptors?.makeAccountInterceptors() ?? [],
        wrapping: self.account(request:context:)
      )

    case "Accounts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Circuit_V1_QueryAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Circuit_V1_AccountsResponse>(),
        interceptors: self.interceptors?.makeAccountsInterceptors() ?? [],
        wrapping: self.accounts(request:context:)
      )

    case "DisabledList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Circuit_V1_QueryDisabledListRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Circuit_V1_DisabledListResponse>(),
        interceptors: self.interceptors?.makeDisabledListInterceptors() ?? [],
        wrapping: self.disabledList(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Circuit_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'account'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountInterceptors() -> [ServerInterceptor<Cosmos_Circuit_V1_QueryAccountRequest, Cosmos_Circuit_V1_AccountResponse>]

  /// - Returns: Interceptors to use when handling 'accounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountsInterceptors() -> [ServerInterceptor<Cosmos_Circuit_V1_QueryAccountsRequest, Cosmos_Circuit_V1_AccountsResponse>]

  /// - Returns: Interceptors to use when handling 'disabledList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisabledListInterceptors() -> [ServerInterceptor<Cosmos_Circuit_V1_QueryDisabledListRequest, Cosmos_Circuit_V1_DisabledListResponse>]
}

internal enum Cosmos_Circuit_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.circuit.v1.Query",
    methods: [
      Cosmos_Circuit_V1_QueryServerMetadata.Methods.account,
      Cosmos_Circuit_V1_QueryServerMetadata.Methods.accounts,
      Cosmos_Circuit_V1_QueryServerMetadata.Methods.disabledList,
    ]
  )

  internal enum Methods {
    internal static let account = GRPCMethodDescriptor(
      name: "Account",
      path: "/cosmos.circuit.v1.Query/Account",
      type: GRPCCallType.unary
    )

    internal static let accounts = GRPCMethodDescriptor(
      name: "Accounts",
      path: "/cosmos.circuit.v1.Query/Accounts",
      type: GRPCCallType.unary
    )

    internal static let disabledList = GRPCMethodDescriptor(
      name: "DisabledList",
      path: "/cosmos.circuit.v1.Query/DisabledList",
      type: GRPCCallType.unary
    )
  }
}
