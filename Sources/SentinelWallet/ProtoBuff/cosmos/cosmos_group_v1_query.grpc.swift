//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query is the cosmos.group.v1 Query service.
///
/// Usage: instantiate `Cosmos_Group_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Group_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? { get }

  func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>

  func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>

  func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>

  func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>

  func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>

  func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>

  func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>

  func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>

  func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>

  func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>

  func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>

  func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>

  func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>

  func groups(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse>
}

extension Cosmos_Group_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.group.v1.Query"
  }

  /// GroupInfo queries group info based on group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  /// GroupPolicyInfo queries group policy info based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPolicyInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  /// GroupMembers queries members of a group by group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  /// GroupsByAdmin queries groups by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  /// GroupPoliciesByGroup queries group policies by group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  /// GroupPoliciesByAdmin queries group policies by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  /// Proposal queries a proposal based on proposal id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposalsByGroupPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  /// VoteByProposalVoter queries a vote by proposal id and voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteByProposalVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  /// VotesByProposal queries a vote by proposal id.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  /// VotesByVoter queries a vote by voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  /// GroupsByMember queries groups by member address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByMember.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  /// TallyResult returns the tally result of a proposal. If the proposal is
  /// still in voting period, then this query computes the current tally state,
  /// which might not be final. On the other hand, if the proposal is final,
  /// then it simply returns the `final_tally_result` state stored in the
  /// proposal itself.
  ///
  /// - Parameters:
  ///   - request: Request to send to TallyResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }

  /// Groups queries all groups in state.
  /// 
  /// Since: cosmos-sdk 0.47.1
  ///
  /// - Parameters:
  ///   - request: Request to send to Groups.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groups(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Group_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Group_V1_QueryNIOClient")
internal final class Cosmos_Group_V1_QueryClient: Cosmos_Group_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.group.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Group_V1_QueryNIOClient: Cosmos_Group_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query is the cosmos.group.v1 Query service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Group_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeGroupInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>

  func makeGroupPolicyInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>

  func makeGroupMembersCall(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>

  func makeGroupsByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>

  func makeGroupPoliciesByGroupCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>

  func makeGroupPoliciesByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>

  func makeProposalCall(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>

  func makeProposalsByGroupPolicyCall(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>

  func makeVoteByProposalVoterCall(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>

  func makeVotesByProposalCall(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>

  func makeVotesByVoterCall(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>

  func makeGroupsByMemberCall(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>

  func makeTallyResultCall(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>

  func makeGroupsCall(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Group_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGroupInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  internal func makeGroupPolicyInfoCall(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  internal func makeGroupMembersCall(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  internal func makeGroupsByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  internal func makeGroupPoliciesByGroupCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  internal func makeGroupPoliciesByAdminCall(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  internal func makeProposalCall(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  internal func makeProposalsByGroupPolicyCall(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  internal func makeVoteByProposalVoterCall(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  internal func makeVotesByProposalCall(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  internal func makeVotesByVoterCall(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  internal func makeGroupsByMemberCall(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  internal func makeTallyResultCall(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }

  internal func makeGroupsCall(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_QueryAsyncClientProtocol {
  internal func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  internal func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupPolicyInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  internal func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupMembersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  internal func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupsByAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  internal func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  internal func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  internal func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  internal func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  internal func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryVoteByProposalVoterResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  internal func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryVotesByProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  internal func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryVotesByVoterResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  internal func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupsByMemberResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  internal func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryTallyResultResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }

  internal func groups(
    _ request: Cosmos_Group_V1_QueryGroupsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_QueryGroupsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_QueryClientMetadata.Methods.groups.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Group_V1_QueryAsyncClient: Cosmos_Group_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'groupInfo'.
  func makeGroupInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPolicyInfo'.
  func makeGroupPolicyInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupMembers'.
  func makeGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByAdmin'.
  func makeGroupsByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByGroup'.
  func makeGroupPoliciesByGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByAdmin'.
  func makeGroupPoliciesByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'proposal'.
  func makeProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'proposalsByGroupPolicy'.
  func makeProposalsByGroupPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'voteByProposalVoter'.
  func makeVoteByProposalVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByProposal'.
  func makeVotesByProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByVoter'.
  func makeVotesByVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByMember'.
  func makeGroupsByMemberInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>]

  /// - Returns: Interceptors to use when invoking 'tallyResult'.
  func makeTallyResultInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>]

  /// - Returns: Interceptors to use when invoking 'groups'.
  func makeGroupsInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse>]
}

internal enum Cosmos_Group_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.group.v1.Query",
    methods: [
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupInfo,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupPolicyInfo,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupMembers,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByAdmin,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByGroup,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupPoliciesByAdmin,
      Cosmos_Group_V1_QueryClientMetadata.Methods.proposal,
      Cosmos_Group_V1_QueryClientMetadata.Methods.proposalsByGroupPolicy,
      Cosmos_Group_V1_QueryClientMetadata.Methods.voteByProposalVoter,
      Cosmos_Group_V1_QueryClientMetadata.Methods.votesByProposal,
      Cosmos_Group_V1_QueryClientMetadata.Methods.votesByVoter,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groupsByMember,
      Cosmos_Group_V1_QueryClientMetadata.Methods.tallyResult,
      Cosmos_Group_V1_QueryClientMetadata.Methods.groups,
    ]
  )

  internal enum Methods {
    internal static let groupInfo = GRPCMethodDescriptor(
      name: "GroupInfo",
      path: "/cosmos.group.v1.Query/GroupInfo",
      type: GRPCCallType.unary
    )

    internal static let groupPolicyInfo = GRPCMethodDescriptor(
      name: "GroupPolicyInfo",
      path: "/cosmos.group.v1.Query/GroupPolicyInfo",
      type: GRPCCallType.unary
    )

    internal static let groupMembers = GRPCMethodDescriptor(
      name: "GroupMembers",
      path: "/cosmos.group.v1.Query/GroupMembers",
      type: GRPCCallType.unary
    )

    internal static let groupsByAdmin = GRPCMethodDescriptor(
      name: "GroupsByAdmin",
      path: "/cosmos.group.v1.Query/GroupsByAdmin",
      type: GRPCCallType.unary
    )

    internal static let groupPoliciesByGroup = GRPCMethodDescriptor(
      name: "GroupPoliciesByGroup",
      path: "/cosmos.group.v1.Query/GroupPoliciesByGroup",
      type: GRPCCallType.unary
    )

    internal static let groupPoliciesByAdmin = GRPCMethodDescriptor(
      name: "GroupPoliciesByAdmin",
      path: "/cosmos.group.v1.Query/GroupPoliciesByAdmin",
      type: GRPCCallType.unary
    )

    internal static let proposal = GRPCMethodDescriptor(
      name: "Proposal",
      path: "/cosmos.group.v1.Query/Proposal",
      type: GRPCCallType.unary
    )

    internal static let proposalsByGroupPolicy = GRPCMethodDescriptor(
      name: "ProposalsByGroupPolicy",
      path: "/cosmos.group.v1.Query/ProposalsByGroupPolicy",
      type: GRPCCallType.unary
    )

    internal static let voteByProposalVoter = GRPCMethodDescriptor(
      name: "VoteByProposalVoter",
      path: "/cosmos.group.v1.Query/VoteByProposalVoter",
      type: GRPCCallType.unary
    )

    internal static let votesByProposal = GRPCMethodDescriptor(
      name: "VotesByProposal",
      path: "/cosmos.group.v1.Query/VotesByProposal",
      type: GRPCCallType.unary
    )

    internal static let votesByVoter = GRPCMethodDescriptor(
      name: "VotesByVoter",
      path: "/cosmos.group.v1.Query/VotesByVoter",
      type: GRPCCallType.unary
    )

    internal static let groupsByMember = GRPCMethodDescriptor(
      name: "GroupsByMember",
      path: "/cosmos.group.v1.Query/GroupsByMember",
      type: GRPCCallType.unary
    )

    internal static let tallyResult = GRPCMethodDescriptor(
      name: "TallyResult",
      path: "/cosmos.group.v1.Query/TallyResult",
      type: GRPCCallType.unary
    )

    internal static let groups = GRPCMethodDescriptor(
      name: "Groups",
      path: "/cosmos.group.v1.Query/Groups",
      type: GRPCCallType.unary
    )
  }
}

/// Query is the cosmos.group.v1 Query service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Group_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Group_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// GroupInfo queries group info based on group id.
  func groupInfo(request: Cosmos_Group_V1_QueryGroupInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupInfoResponse>

  /// GroupPolicyInfo queries group policy info based on account address of group policy.
  func groupPolicyInfo(request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupPolicyInfoResponse>

  /// GroupMembers queries members of a group by group id.
  func groupMembers(request: Cosmos_Group_V1_QueryGroupMembersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupMembersResponse>

  /// GroupsByAdmin queries groups by admin address.
  func groupsByAdmin(request: Cosmos_Group_V1_QueryGroupsByAdminRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupsByAdminResponse>

  /// GroupPoliciesByGroup queries group policies by group id.
  func groupPoliciesByGroup(request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>

  /// GroupPoliciesByAdmin queries group policies by admin address.
  func groupPoliciesByAdmin(request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>

  /// Proposal queries a proposal based on proposal id.
  func proposal(request: Cosmos_Group_V1_QueryProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryProposalResponse>

  /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
  func proposalsByGroupPolicy(request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>

  /// VoteByProposalVoter queries a vote by proposal id and voter.
  func voteByProposalVoter(request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryVoteByProposalVoterResponse>

  /// VotesByProposal queries a vote by proposal id.
  func votesByProposal(request: Cosmos_Group_V1_QueryVotesByProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryVotesByProposalResponse>

  /// VotesByVoter queries a vote by voter.
  func votesByVoter(request: Cosmos_Group_V1_QueryVotesByVoterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryVotesByVoterResponse>

  /// GroupsByMember queries groups by member address.
  func groupsByMember(request: Cosmos_Group_V1_QueryGroupsByMemberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupsByMemberResponse>

  /// TallyResult returns the tally result of a proposal. If the proposal is
  /// still in voting period, then this query computes the current tally state,
  /// which might not be final. On the other hand, if the proposal is final,
  /// then it simply returns the `final_tally_result` state stored in the
  /// proposal itself.
  func tallyResult(request: Cosmos_Group_V1_QueryTallyResultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryTallyResultResponse>

  /// Groups queries all groups in state.
  /// 
  /// Since: cosmos-sdk 0.47.1
  func groups(request: Cosmos_Group_V1_QueryGroupsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_QueryGroupsResponse>
}

extension Cosmos_Group_V1_QueryProvider {
  internal var serviceName: Substring {
    return Cosmos_Group_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GroupInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupInfoResponse>(),
        interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? [],
        userFunction: self.groupInfo(request:context:)
      )

    case "GroupPolicyInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupPolicyInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupPolicyInfoResponse>(),
        interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? [],
        userFunction: self.groupPolicyInfo(request:context:)
      )

    case "GroupMembers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupMembersRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupMembersResponse>(),
        interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? [],
        userFunction: self.groupMembers(request:context:)
      )

    case "GroupsByAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupsByAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupsByAdminResponse>(),
        interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? [],
        userFunction: self.groupsByAdmin(request:context:)
      )

    case "GroupPoliciesByGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>(),
        interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? [],
        userFunction: self.groupPoliciesByGroup(request:context:)
      )

    case "GroupPoliciesByAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>(),
        interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? [],
        userFunction: self.groupPoliciesByAdmin(request:context:)
      )

    case "Proposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryProposalResponse>(),
        interceptors: self.interceptors?.makeProposalInterceptors() ?? [],
        userFunction: self.proposal(request:context:)
      )

    case "ProposalsByGroupPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>(),
        interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? [],
        userFunction: self.proposalsByGroupPolicy(request:context:)
      )

    case "VoteByProposalVoter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryVoteByProposalVoterRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryVoteByProposalVoterResponse>(),
        interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? [],
        userFunction: self.voteByProposalVoter(request:context:)
      )

    case "VotesByProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryVotesByProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryVotesByProposalResponse>(),
        interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? [],
        userFunction: self.votesByProposal(request:context:)
      )

    case "VotesByVoter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryVotesByVoterRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryVotesByVoterResponse>(),
        interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? [],
        userFunction: self.votesByVoter(request:context:)
      )

    case "GroupsByMember":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupsByMemberRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupsByMemberResponse>(),
        interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? [],
        userFunction: self.groupsByMember(request:context:)
      )

    case "TallyResult":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryTallyResultRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryTallyResultResponse>(),
        interceptors: self.interceptors?.makeTallyResultInterceptors() ?? [],
        userFunction: self.tallyResult(request:context:)
      )

    case "Groups":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupsResponse>(),
        interceptors: self.interceptors?.makeGroupsInterceptors() ?? [],
        userFunction: self.groups(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query is the cosmos.group.v1 Query service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Group_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Group_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// GroupInfo queries group info based on group id.
  @Sendable func groupInfo(
    request: Cosmos_Group_V1_QueryGroupInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupInfoResponse

  /// GroupPolicyInfo queries group policy info based on account address of group policy.
  @Sendable func groupPolicyInfo(
    request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupPolicyInfoResponse

  /// GroupMembers queries members of a group by group id.
  @Sendable func groupMembers(
    request: Cosmos_Group_V1_QueryGroupMembersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupMembersResponse

  /// GroupsByAdmin queries groups by admin address.
  @Sendable func groupsByAdmin(
    request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupsByAdminResponse

  /// GroupPoliciesByGroup queries group policies by group id.
  @Sendable func groupPoliciesByGroup(
    request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse

  /// GroupPoliciesByAdmin queries group policies by admin address.
  @Sendable func groupPoliciesByAdmin(
    request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse

  /// Proposal queries a proposal based on proposal id.
  @Sendable func proposal(
    request: Cosmos_Group_V1_QueryProposalRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryProposalResponse

  /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
  @Sendable func proposalsByGroupPolicy(
    request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse

  /// VoteByProposalVoter queries a vote by proposal id and voter.
  @Sendable func voteByProposalVoter(
    request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryVoteByProposalVoterResponse

  /// VotesByProposal queries a vote by proposal id.
  @Sendable func votesByProposal(
    request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryVotesByProposalResponse

  /// VotesByVoter queries a vote by voter.
  @Sendable func votesByVoter(
    request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryVotesByVoterResponse

  /// GroupsByMember queries groups by member address.
  @Sendable func groupsByMember(
    request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupsByMemberResponse

  /// TallyResult returns the tally result of a proposal. If the proposal is
  /// still in voting period, then this query computes the current tally state,
  /// which might not be final. On the other hand, if the proposal is final,
  /// then it simply returns the `final_tally_result` state stored in the
  /// proposal itself.
  @Sendable func tallyResult(
    request: Cosmos_Group_V1_QueryTallyResultRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryTallyResultResponse

  /// Groups queries all groups in state.
  /// 
  /// Since: cosmos-sdk 0.47.1
  @Sendable func groups(
    request: Cosmos_Group_V1_QueryGroupsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_QueryGroupsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Group_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Group_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Group_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GroupInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupInfoResponse>(),
        interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? [],
        wrapping: self.groupInfo(request:context:)
      )

    case "GroupPolicyInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupPolicyInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupPolicyInfoResponse>(),
        interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? [],
        wrapping: self.groupPolicyInfo(request:context:)
      )

    case "GroupMembers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupMembersRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupMembersResponse>(),
        interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? [],
        wrapping: self.groupMembers(request:context:)
      )

    case "GroupsByAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupsByAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupsByAdminResponse>(),
        interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? [],
        wrapping: self.groupsByAdmin(request:context:)
      )

    case "GroupPoliciesByGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>(),
        interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? [],
        wrapping: self.groupPoliciesByGroup(request:context:)
      )

    case "GroupPoliciesByAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>(),
        interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? [],
        wrapping: self.groupPoliciesByAdmin(request:context:)
      )

    case "Proposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryProposalResponse>(),
        interceptors: self.interceptors?.makeProposalInterceptors() ?? [],
        wrapping: self.proposal(request:context:)
      )

    case "ProposalsByGroupPolicy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>(),
        interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? [],
        wrapping: self.proposalsByGroupPolicy(request:context:)
      )

    case "VoteByProposalVoter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryVoteByProposalVoterRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryVoteByProposalVoterResponse>(),
        interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? [],
        wrapping: self.voteByProposalVoter(request:context:)
      )

    case "VotesByProposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryVotesByProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryVotesByProposalResponse>(),
        interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? [],
        wrapping: self.votesByProposal(request:context:)
      )

    case "VotesByVoter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryVotesByVoterRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryVotesByVoterResponse>(),
        interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? [],
        wrapping: self.votesByVoter(request:context:)
      )

    case "GroupsByMember":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupsByMemberRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupsByMemberResponse>(),
        interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? [],
        wrapping: self.groupsByMember(request:context:)
      )

    case "TallyResult":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryTallyResultRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryTallyResultResponse>(),
        interceptors: self.interceptors?.makeTallyResultInterceptors() ?? [],
        wrapping: self.tallyResult(request:context:)
      )

    case "Groups":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_QueryGroupsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_QueryGroupsResponse>(),
        interceptors: self.interceptors?.makeGroupsInterceptors() ?? [],
        wrapping: self.groups(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Group_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'groupInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupInfoInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>]

  /// - Returns: Interceptors to use when handling 'groupPolicyInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupPolicyInfoInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>]

  /// - Returns: Interceptors to use when handling 'groupMembers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupMembersInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>]

  /// - Returns: Interceptors to use when handling 'groupsByAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupsByAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>]

  /// - Returns: Interceptors to use when handling 'groupPoliciesByGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupPoliciesByGroupInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>]

  /// - Returns: Interceptors to use when handling 'groupPoliciesByAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupPoliciesByAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>]

  /// - Returns: Interceptors to use when handling 'proposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when handling 'proposalsByGroupPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalsByGroupPolicyInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'voteByProposalVoter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteByProposalVoterInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>]

  /// - Returns: Interceptors to use when handling 'votesByProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotesByProposalInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>]

  /// - Returns: Interceptors to use when handling 'votesByVoter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotesByVoterInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>]

  /// - Returns: Interceptors to use when handling 'groupsByMember'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupsByMemberInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>]

  /// - Returns: Interceptors to use when handling 'tallyResult'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTallyResultInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>]

  /// - Returns: Interceptors to use when handling 'groups'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGroupsInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_QueryGroupsRequest, Cosmos_Group_V1_QueryGroupsResponse>]
}

internal enum Cosmos_Group_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.group.v1.Query",
    methods: [
      Cosmos_Group_V1_QueryServerMetadata.Methods.groupInfo,
      Cosmos_Group_V1_QueryServerMetadata.Methods.groupPolicyInfo,
      Cosmos_Group_V1_QueryServerMetadata.Methods.groupMembers,
      Cosmos_Group_V1_QueryServerMetadata.Methods.groupsByAdmin,
      Cosmos_Group_V1_QueryServerMetadata.Methods.groupPoliciesByGroup,
      Cosmos_Group_V1_QueryServerMetadata.Methods.groupPoliciesByAdmin,
      Cosmos_Group_V1_QueryServerMetadata.Methods.proposal,
      Cosmos_Group_V1_QueryServerMetadata.Methods.proposalsByGroupPolicy,
      Cosmos_Group_V1_QueryServerMetadata.Methods.voteByProposalVoter,
      Cosmos_Group_V1_QueryServerMetadata.Methods.votesByProposal,
      Cosmos_Group_V1_QueryServerMetadata.Methods.votesByVoter,
      Cosmos_Group_V1_QueryServerMetadata.Methods.groupsByMember,
      Cosmos_Group_V1_QueryServerMetadata.Methods.tallyResult,
      Cosmos_Group_V1_QueryServerMetadata.Methods.groups,
    ]
  )

  internal enum Methods {
    internal static let groupInfo = GRPCMethodDescriptor(
      name: "GroupInfo",
      path: "/cosmos.group.v1.Query/GroupInfo",
      type: GRPCCallType.unary
    )

    internal static let groupPolicyInfo = GRPCMethodDescriptor(
      name: "GroupPolicyInfo",
      path: "/cosmos.group.v1.Query/GroupPolicyInfo",
      type: GRPCCallType.unary
    )

    internal static let groupMembers = GRPCMethodDescriptor(
      name: "GroupMembers",
      path: "/cosmos.group.v1.Query/GroupMembers",
      type: GRPCCallType.unary
    )

    internal static let groupsByAdmin = GRPCMethodDescriptor(
      name: "GroupsByAdmin",
      path: "/cosmos.group.v1.Query/GroupsByAdmin",
      type: GRPCCallType.unary
    )

    internal static let groupPoliciesByGroup = GRPCMethodDescriptor(
      name: "GroupPoliciesByGroup",
      path: "/cosmos.group.v1.Query/GroupPoliciesByGroup",
      type: GRPCCallType.unary
    )

    internal static let groupPoliciesByAdmin = GRPCMethodDescriptor(
      name: "GroupPoliciesByAdmin",
      path: "/cosmos.group.v1.Query/GroupPoliciesByAdmin",
      type: GRPCCallType.unary
    )

    internal static let proposal = GRPCMethodDescriptor(
      name: "Proposal",
      path: "/cosmos.group.v1.Query/Proposal",
      type: GRPCCallType.unary
    )

    internal static let proposalsByGroupPolicy = GRPCMethodDescriptor(
      name: "ProposalsByGroupPolicy",
      path: "/cosmos.group.v1.Query/ProposalsByGroupPolicy",
      type: GRPCCallType.unary
    )

    internal static let voteByProposalVoter = GRPCMethodDescriptor(
      name: "VoteByProposalVoter",
      path: "/cosmos.group.v1.Query/VoteByProposalVoter",
      type: GRPCCallType.unary
    )

    internal static let votesByProposal = GRPCMethodDescriptor(
      name: "VotesByProposal",
      path: "/cosmos.group.v1.Query/VotesByProposal",
      type: GRPCCallType.unary
    )

    internal static let votesByVoter = GRPCMethodDescriptor(
      name: "VotesByVoter",
      path: "/cosmos.group.v1.Query/VotesByVoter",
      type: GRPCCallType.unary
    )

    internal static let groupsByMember = GRPCMethodDescriptor(
      name: "GroupsByMember",
      path: "/cosmos.group.v1.Query/GroupsByMember",
      type: GRPCCallType.unary
    )

    internal static let tallyResult = GRPCMethodDescriptor(
      name: "TallyResult",
      path: "/cosmos.group.v1.Query/TallyResult",
      type: GRPCCallType.unary
    )

    internal static let groups = GRPCMethodDescriptor(
      name: "Groups",
      path: "/cosmos.group.v1.Query/Groups",
      type: GRPCCallType.unary
    )
  }
}
