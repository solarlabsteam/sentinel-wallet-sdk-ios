//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/authz/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Authz_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Authz_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func grants(
    _ request: Cosmos_Authz_V1beta1_QueryGrantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Authz_V1beta1_QueryGrantsRequest, Cosmos_Authz_V1beta1_QueryGrantsResponse>

  func granterGrants(
    _ request: Cosmos_Authz_V1beta1_QueryGranterGrantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest, Cosmos_Authz_V1beta1_QueryGranterGrantsResponse>

  func granteeGrants(
    _ request: Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest, Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse>
}

extension Cosmos_Authz_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.authz.v1beta1.Query"
  }

  /// Returns list of `Authorization`, granted to the grantee by the granter.
  ///
  /// - Parameters:
  ///   - request: Request to send to Grants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func grants(
    _ request: Cosmos_Authz_V1beta1_QueryGrantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Authz_V1beta1_QueryGrantsRequest, Cosmos_Authz_V1beta1_QueryGrantsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.grants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantsInterceptors() ?? []
    )
  }

  /// GranterGrants returns list of `GrantAuthorization`, granted by granter.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to GranterGrants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func granterGrants(
    _ request: Cosmos_Authz_V1beta1_QueryGranterGrantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest, Cosmos_Authz_V1beta1_QueryGranterGrantsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granterGrants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGranterGrantsInterceptors() ?? []
    )
  }

  /// GranteeGrants returns a list of `GrantAuthorization` by grantee.
  ///
  /// Since: cosmos-sdk 0.46
  ///
  /// - Parameters:
  ///   - request: Request to send to GranteeGrants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func granteeGrants(
    _ request: Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest, Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granteeGrants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGranteeGrantsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Authz_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Authz_V1beta1_QueryNIOClient")
internal final class Cosmos_Authz_V1beta1_QueryClient: Cosmos_Authz_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.authz.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Authz_V1beta1_QueryNIOClient: Cosmos_Authz_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.authz.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Authz_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeGrantsCall(
    _ request: Cosmos_Authz_V1beta1_QueryGrantsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Authz_V1beta1_QueryGrantsRequest, Cosmos_Authz_V1beta1_QueryGrantsResponse>

  func makeGranterGrantsCall(
    _ request: Cosmos_Authz_V1beta1_QueryGranterGrantsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest, Cosmos_Authz_V1beta1_QueryGranterGrantsResponse>

  func makeGranteeGrantsCall(
    _ request: Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest, Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Authz_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Authz_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGrantsCall(
    _ request: Cosmos_Authz_V1beta1_QueryGrantsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Authz_V1beta1_QueryGrantsRequest, Cosmos_Authz_V1beta1_QueryGrantsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.grants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantsInterceptors() ?? []
    )
  }

  internal func makeGranterGrantsCall(
    _ request: Cosmos_Authz_V1beta1_QueryGranterGrantsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest, Cosmos_Authz_V1beta1_QueryGranterGrantsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granterGrants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGranterGrantsInterceptors() ?? []
    )
  }

  internal func makeGranteeGrantsCall(
    _ request: Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest, Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granteeGrants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGranteeGrantsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Authz_V1beta1_QueryAsyncClientProtocol {
  internal func grants(
    _ request: Cosmos_Authz_V1beta1_QueryGrantsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Authz_V1beta1_QueryGrantsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.grants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantsInterceptors() ?? []
    )
  }

  internal func granterGrants(
    _ request: Cosmos_Authz_V1beta1_QueryGranterGrantsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Authz_V1beta1_QueryGranterGrantsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granterGrants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGranterGrantsInterceptors() ?? []
    )
  }

  internal func granteeGrants(
    _ request: Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granteeGrants.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGranteeGrantsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Authz_V1beta1_QueryAsyncClient: Cosmos_Authz_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Authz_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'grants'.
  func makeGrantsInterceptors() -> [ClientInterceptor<Cosmos_Authz_V1beta1_QueryGrantsRequest, Cosmos_Authz_V1beta1_QueryGrantsResponse>]

  /// - Returns: Interceptors to use when invoking 'granterGrants'.
  func makeGranterGrantsInterceptors() -> [ClientInterceptor<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest, Cosmos_Authz_V1beta1_QueryGranterGrantsResponse>]

  /// - Returns: Interceptors to use when invoking 'granteeGrants'.
  func makeGranteeGrantsInterceptors() -> [ClientInterceptor<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest, Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse>]
}

internal enum Cosmos_Authz_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.authz.v1beta1.Query",
    methods: [
      Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.grants,
      Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granterGrants,
      Cosmos_Authz_V1beta1_QueryClientMetadata.Methods.granteeGrants,
    ]
  )

  internal enum Methods {
    internal static let grants = GRPCMethodDescriptor(
      name: "Grants",
      path: "/cosmos.authz.v1beta1.Query/Grants",
      type: GRPCCallType.unary
    )

    internal static let granterGrants = GRPCMethodDescriptor(
      name: "GranterGrants",
      path: "/cosmos.authz.v1beta1.Query/GranterGrants",
      type: GRPCCallType.unary
    )

    internal static let granteeGrants = GRPCMethodDescriptor(
      name: "GranteeGrants",
      path: "/cosmos.authz.v1beta1.Query/GranteeGrants",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Authz_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Authz_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Returns list of `Authorization`, granted to the grantee by the granter.
  func grants(request: Cosmos_Authz_V1beta1_QueryGrantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Authz_V1beta1_QueryGrantsResponse>

  /// GranterGrants returns list of `GrantAuthorization`, granted by granter.
  ///
  /// Since: cosmos-sdk 0.46
  func granterGrants(request: Cosmos_Authz_V1beta1_QueryGranterGrantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Authz_V1beta1_QueryGranterGrantsResponse>

  /// GranteeGrants returns a list of `GrantAuthorization` by grantee.
  ///
  /// Since: cosmos-sdk 0.46
  func granteeGrants(request: Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse>
}

extension Cosmos_Authz_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Cosmos_Authz_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Grants":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_QueryGrantsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_QueryGrantsResponse>(),
        interceptors: self.interceptors?.makeGrantsInterceptors() ?? [],
        userFunction: self.grants(request:context:)
      )

    case "GranterGrants":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_QueryGranterGrantsResponse>(),
        interceptors: self.interceptors?.makeGranterGrantsInterceptors() ?? [],
        userFunction: self.granterGrants(request:context:)
      )

    case "GranteeGrants":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse>(),
        interceptors: self.interceptors?.makeGranteeGrantsInterceptors() ?? [],
        userFunction: self.granteeGrants(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Authz_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Authz_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Returns list of `Authorization`, granted to the grantee by the granter.
  @Sendable func grants(
    request: Cosmos_Authz_V1beta1_QueryGrantsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Authz_V1beta1_QueryGrantsResponse

  /// GranterGrants returns list of `GrantAuthorization`, granted by granter.
  ///
  /// Since: cosmos-sdk 0.46
  @Sendable func granterGrants(
    request: Cosmos_Authz_V1beta1_QueryGranterGrantsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Authz_V1beta1_QueryGranterGrantsResponse

  /// GranteeGrants returns a list of `GrantAuthorization` by grantee.
  ///
  /// Since: cosmos-sdk 0.46
  @Sendable func granteeGrants(
    request: Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Authz_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Authz_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Authz_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Authz_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Grants":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_QueryGrantsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_QueryGrantsResponse>(),
        interceptors: self.interceptors?.makeGrantsInterceptors() ?? [],
        wrapping: self.grants(request:context:)
      )

    case "GranterGrants":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_QueryGranterGrantsResponse>(),
        interceptors: self.interceptors?.makeGranterGrantsInterceptors() ?? [],
        wrapping: self.granterGrants(request:context:)
      )

    case "GranteeGrants":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse>(),
        interceptors: self.interceptors?.makeGranteeGrantsInterceptors() ?? [],
        wrapping: self.granteeGrants(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Authz_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'grants'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGrantsInterceptors() -> [ServerInterceptor<Cosmos_Authz_V1beta1_QueryGrantsRequest, Cosmos_Authz_V1beta1_QueryGrantsResponse>]

  /// - Returns: Interceptors to use when handling 'granterGrants'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGranterGrantsInterceptors() -> [ServerInterceptor<Cosmos_Authz_V1beta1_QueryGranterGrantsRequest, Cosmos_Authz_V1beta1_QueryGranterGrantsResponse>]

  /// - Returns: Interceptors to use when handling 'granteeGrants'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGranteeGrantsInterceptors() -> [ServerInterceptor<Cosmos_Authz_V1beta1_QueryGranteeGrantsRequest, Cosmos_Authz_V1beta1_QueryGranteeGrantsResponse>]
}

internal enum Cosmos_Authz_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.authz.v1beta1.Query",
    methods: [
      Cosmos_Authz_V1beta1_QueryServerMetadata.Methods.grants,
      Cosmos_Authz_V1beta1_QueryServerMetadata.Methods.granterGrants,
      Cosmos_Authz_V1beta1_QueryServerMetadata.Methods.granteeGrants,
    ]
  )

  internal enum Methods {
    internal static let grants = GRPCMethodDescriptor(
      name: "Grants",
      path: "/cosmos.authz.v1beta1.Query/Grants",
      type: GRPCCallType.unary
    )

    internal static let granterGrants = GRPCMethodDescriptor(
      name: "GranterGrants",
      path: "/cosmos.authz.v1beta1.Query/GranterGrants",
      type: GRPCCallType.unary
    )

    internal static let granteeGrants = GRPCMethodDescriptor(
      name: "GranteeGrants",
      path: "/cosmos.authz.v1beta1.Query/GranteeGrants",
      type: GRPCCallType.unary
    )
  }
}
