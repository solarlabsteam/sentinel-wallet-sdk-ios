//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg is the cosmos.group.v1 Msg service.
///
/// Usage: instantiate `Cosmos_Group_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Group_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>

  func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>

  func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>

  func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>

  func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>

  func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>

  func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>

  func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>

  func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>

  func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>

  func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>

  func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>

  func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>

  func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>
}

extension Cosmos_Group_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "cosmos.group.v1.Msg"
  }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? []
    )
  }

  /// CreateGroupWithPolicy creates a new group with policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupWithPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyAdmin updates a group policy admin.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyDecisionPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyMetadata updates a group policy metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? []
    )
  }

  /// SubmitProposal submits a new proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  /// WithdrawProposal withdraws a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? []
    )
  }

  /// Vote allows a voter to vote on a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// Exec executes a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Exec.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  /// LeaveGroup allows a group member to leave the group.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaveGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Group_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Group_V1_MsgNIOClient")
internal final class Cosmos_Group_V1_MsgClient: Cosmos_Group_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.group.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Group_V1_MsgNIOClient: Cosmos_Group_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg is the cosmos.group.v1 Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Group_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateGroupCall(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>

  func makeUpdateGroupMembersCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>

  func makeUpdateGroupAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>

  func makeUpdateGroupMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>

  func makeCreateGroupPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>

  func makeCreateGroupWithPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>

  func makeUpdateGroupPolicyAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>

  func makeUpdateGroupPolicyDecisionPolicyCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>

  func makeUpdateGroupPolicyMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>

  func makeSubmitProposalCall(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>

  func makeWithdrawProposalCall(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>

  func makeVoteCall(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>

  func makeExecCall(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>

  func makeLeaveGroupCall(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Group_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateGroupCall(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupMembersCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  internal func makeCreateGroupPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? []
    )
  }

  internal func makeCreateGroupWithPolicyCall(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupPolicyAdminCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupPolicyDecisionPolicyCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? []
    )
  }

  internal func makeUpdateGroupPolicyMetadataCall(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? []
    )
  }

  internal func makeSubmitProposalCall(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  internal func makeWithdrawProposalCall(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? []
    )
  }

  internal func makeVoteCall(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  internal func makeExecCall(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  internal func makeLeaveGroupCall(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_MsgAsyncClientProtocol {
  internal func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  internal func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupMembersResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  internal func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  internal func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  internal func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? []
    )
  }

  internal func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? []
    )
  }

  internal func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? []
    )
  }

  internal func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? []
    )
  }

  internal func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? []
    )
  }

  internal func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgSubmitProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  internal func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgWithdrawProposalResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? []
    )
  }

  internal func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgVoteResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.vote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  internal func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgExecResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.exec.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  internal func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Group_V1_MsgLeaveGroupResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Group_V1_MsgAsyncClient: Cosmos_Group_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMembers'.
  func makeUpdateGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAdmin'.
  func makeUpdateGroupAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMetadata'.
  func makeUpdateGroupMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupPolicy'.
  func makeCreateGroupPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupWithPolicy'.
  func makeCreateGroupWithPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyAdmin'.
  func makeUpdateGroupPolicyAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyDecisionPolicy'.
  func makeUpdateGroupPolicyDecisionPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyMetadata'.
  func makeUpdateGroupPolicyMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'submitProposal'.
  func makeSubmitProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawProposal'.
  func makeWithdrawProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'exec'.
  func makeExecInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>]

  /// - Returns: Interceptors to use when invoking 'leaveGroup'.
  func makeLeaveGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>]
}

internal enum Cosmos_Group_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.group.v1.Msg",
    methods: [
      Cosmos_Group_V1_MsgClientMetadata.Methods.createGroup,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMembers,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupAdmin,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupMetadata,
      Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupPolicy,
      Cosmos_Group_V1_MsgClientMetadata.Methods.createGroupWithPolicy,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyAdmin,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyDecisionPolicy,
      Cosmos_Group_V1_MsgClientMetadata.Methods.updateGroupPolicyMetadata,
      Cosmos_Group_V1_MsgClientMetadata.Methods.submitProposal,
      Cosmos_Group_V1_MsgClientMetadata.Methods.withdrawProposal,
      Cosmos_Group_V1_MsgClientMetadata.Methods.vote,
      Cosmos_Group_V1_MsgClientMetadata.Methods.exec,
      Cosmos_Group_V1_MsgClientMetadata.Methods.leaveGroup,
    ]
  )

  internal enum Methods {
    internal static let createGroup = GRPCMethodDescriptor(
      name: "CreateGroup",
      path: "/cosmos.group.v1.Msg/CreateGroup",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMembers = GRPCMethodDescriptor(
      name: "UpdateGroupMembers",
      path: "/cosmos.group.v1.Msg/UpdateGroupMembers",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupAdmin",
      path: "/cosmos.group.v1.Msg/UpdateGroupAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupMetadata",
      path: "/cosmos.group.v1.Msg/UpdateGroupMetadata",
      type: GRPCCallType.unary
    )

    internal static let createGroupPolicy = GRPCMethodDescriptor(
      name: "CreateGroupPolicy",
      path: "/cosmos.group.v1.Msg/CreateGroupPolicy",
      type: GRPCCallType.unary
    )

    internal static let createGroupWithPolicy = GRPCMethodDescriptor(
      name: "CreateGroupWithPolicy",
      path: "/cosmos.group.v1.Msg/CreateGroupWithPolicy",
      type: GRPCCallType.unary
    )

    internal static let updateGroupPolicyAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyAdmin",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupPolicyDecisionPolicy = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyDecisionPolicy",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyDecisionPolicy",
      type: GRPCCallType.unary
    )

    internal static let updateGroupPolicyMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyMetadata",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyMetadata",
      type: GRPCCallType.unary
    )

    internal static let submitProposal = GRPCMethodDescriptor(
      name: "SubmitProposal",
      path: "/cosmos.group.v1.Msg/SubmitProposal",
      type: GRPCCallType.unary
    )

    internal static let withdrawProposal = GRPCMethodDescriptor(
      name: "WithdrawProposal",
      path: "/cosmos.group.v1.Msg/WithdrawProposal",
      type: GRPCCallType.unary
    )

    internal static let vote = GRPCMethodDescriptor(
      name: "Vote",
      path: "/cosmos.group.v1.Msg/Vote",
      type: GRPCCallType.unary
    )

    internal static let exec = GRPCMethodDescriptor(
      name: "Exec",
      path: "/cosmos.group.v1.Msg/Exec",
      type: GRPCCallType.unary
    )

    internal static let leaveGroup = GRPCMethodDescriptor(
      name: "LeaveGroup",
      path: "/cosmos.group.v1.Msg/LeaveGroup",
      type: GRPCCallType.unary
    )
  }
}

/// Msg is the cosmos.group.v1 Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Group_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Cosmos_Group_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  func createGroup(request: Cosmos_Group_V1_MsgCreateGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgCreateGroupResponse>

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  func updateGroupMembers(request: Cosmos_Group_V1_MsgUpdateGroupMembers, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgUpdateGroupMembersResponse>

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  func updateGroupAdmin(request: Cosmos_Group_V1_MsgUpdateGroupAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgUpdateGroupAdminResponse>

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  func updateGroupMetadata(request: Cosmos_Group_V1_MsgUpdateGroupMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>

  /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
  func createGroupPolicy(request: Cosmos_Group_V1_MsgCreateGroupPolicy, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgCreateGroupPolicyResponse>

  /// CreateGroupWithPolicy creates a new group with policy.
  func createGroupWithPolicy(request: Cosmos_Group_V1_MsgCreateGroupWithPolicy, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>

  /// UpdateGroupPolicyAdmin updates a group policy admin.
  func updateGroupPolicyAdmin(request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>

  /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
  func updateGroupPolicyDecisionPolicy(request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>

  /// UpdateGroupPolicyMetadata updates a group policy metadata.
  func updateGroupPolicyMetadata(request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>

  /// SubmitProposal submits a new proposal.
  func submitProposal(request: Cosmos_Group_V1_MsgSubmitProposal, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgSubmitProposalResponse>

  /// WithdrawProposal withdraws a proposal.
  func withdrawProposal(request: Cosmos_Group_V1_MsgWithdrawProposal, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgWithdrawProposalResponse>

  /// Vote allows a voter to vote on a proposal.
  func vote(request: Cosmos_Group_V1_MsgVote, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgVoteResponse>

  /// Exec executes a proposal.
  func exec(request: Cosmos_Group_V1_MsgExec, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgExecResponse>

  /// LeaveGroup allows a group member to leave the group.
  func leaveGroup(request: Cosmos_Group_V1_MsgLeaveGroup, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1_MsgLeaveGroupResponse>
}

extension Cosmos_Group_V1_MsgProvider {
  internal var serviceName: Substring {
    return Cosmos_Group_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgCreateGroup>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgCreateGroupResponse>(),
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? [],
        userFunction: self.createGroup(request:context:)
      )

    case "UpdateGroupMembers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupMembers>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupMembersResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? [],
        userFunction: self.updateGroupMembers(request:context:)
      )

    case "UpdateGroupAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupAdmin>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? [],
        userFunction: self.updateGroupAdmin(request:context:)
      )

    case "UpdateGroupMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupMetadata>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? [],
        userFunction: self.updateGroupMetadata(request:context:)
      )

    case "CreateGroupPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgCreateGroupPolicy>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgCreateGroupPolicyResponse>(),
        interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? [],
        userFunction: self.createGroupPolicy(request:context:)
      )

    case "CreateGroupWithPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgCreateGroupWithPolicy>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>(),
        interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? [],
        userFunction: self.createGroupWithPolicy(request:context:)
      )

    case "UpdateGroupPolicyAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? [],
        userFunction: self.updateGroupPolicyAdmin(request:context:)
      )

    case "UpdateGroupPolicyDecisionPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? [],
        userFunction: self.updateGroupPolicyDecisionPolicy(request:context:)
      )

    case "UpdateGroupPolicyMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? [],
        userFunction: self.updateGroupPolicyMetadata(request:context:)
      )

    case "SubmitProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgSubmitProposal>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgSubmitProposalResponse>(),
        interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? [],
        userFunction: self.submitProposal(request:context:)
      )

    case "WithdrawProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgWithdrawProposal>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgWithdrawProposalResponse>(),
        interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? [],
        userFunction: self.withdrawProposal(request:context:)
      )

    case "Vote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgVote>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgVoteResponse>(),
        interceptors: self.interceptors?.makeVoteInterceptors() ?? [],
        userFunction: self.vote(request:context:)
      )

    case "Exec":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgExec>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgExecResponse>(),
        interceptors: self.interceptors?.makeExecInterceptors() ?? [],
        userFunction: self.exec(request:context:)
      )

    case "LeaveGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgLeaveGroup>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgLeaveGroupResponse>(),
        interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? [],
        userFunction: self.leaveGroup(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg is the cosmos.group.v1 Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Group_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Group_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  @Sendable func createGroup(
    request: Cosmos_Group_V1_MsgCreateGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupResponse

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  @Sendable func updateGroupMembers(
    request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupMembersResponse

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  @Sendable func updateGroupAdmin(
    request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupAdminResponse

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  @Sendable func updateGroupMetadata(
    request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupMetadataResponse

  /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
  @Sendable func createGroupPolicy(
    request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupPolicyResponse

  /// CreateGroupWithPolicy creates a new group with policy.
  @Sendable func createGroupWithPolicy(
    request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse

  /// UpdateGroupPolicyAdmin updates a group policy admin.
  @Sendable func updateGroupPolicyAdmin(
    request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse

  /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
  @Sendable func updateGroupPolicyDecisionPolicy(
    request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse

  /// UpdateGroupPolicyMetadata updates a group policy metadata.
  @Sendable func updateGroupPolicyMetadata(
    request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse

  /// SubmitProposal submits a new proposal.
  @Sendable func submitProposal(
    request: Cosmos_Group_V1_MsgSubmitProposal,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgSubmitProposalResponse

  /// WithdrawProposal withdraws a proposal.
  @Sendable func withdrawProposal(
    request: Cosmos_Group_V1_MsgWithdrawProposal,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgWithdrawProposalResponse

  /// Vote allows a voter to vote on a proposal.
  @Sendable func vote(
    request: Cosmos_Group_V1_MsgVote,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgVoteResponse

  /// Exec executes a proposal.
  @Sendable func exec(
    request: Cosmos_Group_V1_MsgExec,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgExecResponse

  /// LeaveGroup allows a group member to leave the group.
  @Sendable func leaveGroup(
    request: Cosmos_Group_V1_MsgLeaveGroup,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Group_V1_MsgLeaveGroupResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Group_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Group_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Group_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Group_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgCreateGroup>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgCreateGroupResponse>(),
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? [],
        wrapping: self.createGroup(request:context:)
      )

    case "UpdateGroupMembers":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupMembers>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupMembersResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? [],
        wrapping: self.updateGroupMembers(request:context:)
      )

    case "UpdateGroupAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupAdmin>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? [],
        wrapping: self.updateGroupAdmin(request:context:)
      )

    case "UpdateGroupMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupMetadata>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? [],
        wrapping: self.updateGroupMetadata(request:context:)
      )

    case "CreateGroupPolicy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgCreateGroupPolicy>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgCreateGroupPolicyResponse>(),
        interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? [],
        wrapping: self.createGroupPolicy(request:context:)
      )

    case "CreateGroupWithPolicy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgCreateGroupWithPolicy>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>(),
        interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? [],
        wrapping: self.createGroupWithPolicy(request:context:)
      )

    case "UpdateGroupPolicyAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? [],
        wrapping: self.updateGroupPolicyAdmin(request:context:)
      )

    case "UpdateGroupPolicyDecisionPolicy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? [],
        wrapping: self.updateGroupPolicyDecisionPolicy(request:context:)
      )

    case "UpdateGroupPolicyMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? [],
        wrapping: self.updateGroupPolicyMetadata(request:context:)
      )

    case "SubmitProposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgSubmitProposal>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgSubmitProposalResponse>(),
        interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? [],
        wrapping: self.submitProposal(request:context:)
      )

    case "WithdrawProposal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgWithdrawProposal>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgWithdrawProposalResponse>(),
        interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? [],
        wrapping: self.withdrawProposal(request:context:)
      )

    case "Vote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgVote>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgVoteResponse>(),
        interceptors: self.interceptors?.makeVoteInterceptors() ?? [],
        wrapping: self.vote(request:context:)
      )

    case "Exec":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgExec>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgExecResponse>(),
        interceptors: self.interceptors?.makeExecInterceptors() ?? [],
        wrapping: self.exec(request:context:)
      )

    case "LeaveGroup":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1_MsgLeaveGroup>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1_MsgLeaveGroupResponse>(),
        interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? [],
        wrapping: self.leaveGroup(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Group_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupMembers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupMembersInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupMetadataInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'createGroupPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupPolicyInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'createGroupWithPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupWithPolicyInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupPolicyAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupPolicyAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupPolicyDecisionPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupPolicyDecisionPolicyInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupPolicyMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupPolicyMetadataInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'submitProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitProposalInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawProposalInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>]

  /// - Returns: Interceptors to use when handling 'vote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when handling 'exec'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>]

  /// - Returns: Interceptors to use when handling 'leaveGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLeaveGroupInterceptors() -> [ServerInterceptor<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>]
}

internal enum Cosmos_Group_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "cosmos.group.v1.Msg",
    methods: [
      Cosmos_Group_V1_MsgServerMetadata.Methods.createGroup,
      Cosmos_Group_V1_MsgServerMetadata.Methods.updateGroupMembers,
      Cosmos_Group_V1_MsgServerMetadata.Methods.updateGroupAdmin,
      Cosmos_Group_V1_MsgServerMetadata.Methods.updateGroupMetadata,
      Cosmos_Group_V1_MsgServerMetadata.Methods.createGroupPolicy,
      Cosmos_Group_V1_MsgServerMetadata.Methods.createGroupWithPolicy,
      Cosmos_Group_V1_MsgServerMetadata.Methods.updateGroupPolicyAdmin,
      Cosmos_Group_V1_MsgServerMetadata.Methods.updateGroupPolicyDecisionPolicy,
      Cosmos_Group_V1_MsgServerMetadata.Methods.updateGroupPolicyMetadata,
      Cosmos_Group_V1_MsgServerMetadata.Methods.submitProposal,
      Cosmos_Group_V1_MsgServerMetadata.Methods.withdrawProposal,
      Cosmos_Group_V1_MsgServerMetadata.Methods.vote,
      Cosmos_Group_V1_MsgServerMetadata.Methods.exec,
      Cosmos_Group_V1_MsgServerMetadata.Methods.leaveGroup,
    ]
  )

  internal enum Methods {
    internal static let createGroup = GRPCMethodDescriptor(
      name: "CreateGroup",
      path: "/cosmos.group.v1.Msg/CreateGroup",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMembers = GRPCMethodDescriptor(
      name: "UpdateGroupMembers",
      path: "/cosmos.group.v1.Msg/UpdateGroupMembers",
      type: GRPCCallType.unary
    )

    internal static let updateGroupAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupAdmin",
      path: "/cosmos.group.v1.Msg/UpdateGroupAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupMetadata",
      path: "/cosmos.group.v1.Msg/UpdateGroupMetadata",
      type: GRPCCallType.unary
    )

    internal static let createGroupPolicy = GRPCMethodDescriptor(
      name: "CreateGroupPolicy",
      path: "/cosmos.group.v1.Msg/CreateGroupPolicy",
      type: GRPCCallType.unary
    )

    internal static let createGroupWithPolicy = GRPCMethodDescriptor(
      name: "CreateGroupWithPolicy",
      path: "/cosmos.group.v1.Msg/CreateGroupWithPolicy",
      type: GRPCCallType.unary
    )

    internal static let updateGroupPolicyAdmin = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyAdmin",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateGroupPolicyDecisionPolicy = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyDecisionPolicy",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyDecisionPolicy",
      type: GRPCCallType.unary
    )

    internal static let updateGroupPolicyMetadata = GRPCMethodDescriptor(
      name: "UpdateGroupPolicyMetadata",
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyMetadata",
      type: GRPCCallType.unary
    )

    internal static let submitProposal = GRPCMethodDescriptor(
      name: "SubmitProposal",
      path: "/cosmos.group.v1.Msg/SubmitProposal",
      type: GRPCCallType.unary
    )

    internal static let withdrawProposal = GRPCMethodDescriptor(
      name: "WithdrawProposal",
      path: "/cosmos.group.v1.Msg/WithdrawProposal",
      type: GRPCCallType.unary
    )

    internal static let vote = GRPCMethodDescriptor(
      name: "Vote",
      path: "/cosmos.group.v1.Msg/Vote",
      type: GRPCCallType.unary
    )

    internal static let exec = GRPCMethodDescriptor(
      name: "Exec",
      path: "/cosmos.group.v1.Msg/Exec",
      type: GRPCCallType.unary
    )

    internal static let leaveGroup = GRPCMethodDescriptor(
      name: "LeaveGroup",
      path: "/cosmos.group.v1.Msg/LeaveGroup",
      type: GRPCCallType.unary
    )
  }
}
