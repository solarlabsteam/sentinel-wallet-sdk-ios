//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/staking/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Staking_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Staking_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func validators(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse>

  func validator(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse>

  func validatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>

  func validatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>

  func delegation(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse>

  func unbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>

  func delegatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>

  func delegatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>

  func redelegations(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse>

  func delegatorValidators(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>

  func delegatorValidator(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>

  func historicalInfo(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>

  func pool(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse>

  func params(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse>
}

extension Cosmos_Staking_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.staking.v1beta1.Query"
  }

  /// Validators queries all validators that match the given status.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validators(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  /// Validator queries validator info for given validator address.
  ///
  /// - Parameters:
  ///   - request: Request to send to Validator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validator(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  /// ValidatorDelegations queries delegate info for given validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? []
    )
  }

  /// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorUnbondingDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  /// Delegation queries delegate info for given validator delegator pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to Delegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegation(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationInterceptors() ?? []
    )
  }

  /// UnbondingDelegation queries unbonding info for given validator delegator
  /// pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnbondingDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? []
    )
  }

  /// DelegatorDelegations queries all delegations of a given delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? []
    )
  }

  /// DelegatorUnbondingDelegations queries all unbonding delegations of a given
  /// delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorUnbondingDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  /// Redelegations queries redelegations of given address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to Redelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func redelegations(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? []
    )
  }

  /// DelegatorValidators queries all validators info for given delegator
  /// address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorValidators(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  /// DelegatorValidator queries validator info for given delegator validator
  /// pair.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorValidator(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? []
    )
  }

  /// HistoricalInfo queries the historical info for given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to HistoricalInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func historicalInfo(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? []
    )
  }

  /// Pool queries the pool info.
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pool(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// Parameters queries the staking parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Staking_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Staking_V1beta1_QueryNIOClient")
internal final class Cosmos_Staking_V1beta1_QueryClient: Cosmos_Staking_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.staking.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Staking_V1beta1_QueryNIOClient: Cosmos_Staking_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.staking.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Staking_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse>

  func makeValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse>

  func makeValidatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>

  func makeValidatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>

  func makeDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse>

  func makeUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>

  func makeDelegatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>

  func makeDelegatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>

  func makeRedelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse>

  func makeDelegatorValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>

  func makeDelegatorValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>

  func makeHistoricalInfoCall(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>

  func makePoolCall(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse>

  func makeParamsCall(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Staking_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  internal func makeValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  internal func makeValidatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? []
    )
  }

  internal func makeValidatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  internal func makeDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationInterceptors() ?? []
    )
  }

  internal func makeUnbondingDelegationCall(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? []
    )
  }

  internal func makeDelegatorDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? []
    )
  }

  internal func makeDelegatorUnbondingDelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  internal func makeRedelegationsCall(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? []
    )
  }

  internal func makeDelegatorValidatorsCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  internal func makeDelegatorValidatorCall(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? []
    )
  }

  internal func makeHistoricalInfoCall(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? []
    )
  }

  internal func makePoolCall(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func makeParamsCall(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_QueryAsyncClientProtocol {
  internal func validators(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorsInterceptors() ?? []
    )
  }

  internal func validator(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInterceptors() ?? []
    )
  }

  internal func validatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? []
    )
  }

  internal func validatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  internal func delegation(
    _ request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegationInterceptors() ?? []
    )
  }

  internal func unbondingDelegation(
    _ request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? []
    )
  }

  internal func delegatorDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? []
    )
  }

  internal func delegatorUnbondingDelegations(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? []
    )
  }

  internal func redelegations(
    _ request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryRedelegationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? []
    )
  }

  internal func delegatorValidators(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? []
    )
  }

  internal func delegatorValidator(
    _ request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? []
    )
  }

  internal func historicalInfo(
    _ request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? []
    )
  }

  internal func pool(
    _ request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryPoolResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  internal func params(
    _ request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Staking_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Staking_V1beta1_QueryAsyncClient: Cosmos_Staking_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Staking_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'validators'.
  func makeValidatorsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'validator'.
  func makeValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorDelegations'.
  func makeValidatorDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorUnbondingDelegations'.
  func makeValidatorUnbondingDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegation'.
  func makeDelegationInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'unbondingDelegation'.
  func makeUnbondingDelegationInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorDelegations'.
  func makeDelegatorDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorUnbondingDelegations'.
  func makeDelegatorUnbondingDelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'redelegations'.
  func makeRedelegationsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorValidators'.
  func makeDelegatorValidatorsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorValidator'.
  func makeDelegatorValidatorInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'historicalInfo'.
  func makeHistoricalInfoInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse>]
}

internal enum Cosmos_Staking_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.staking.v1beta1.Query",
    methods: [
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validators,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validator,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.validatorUnbondingDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegation,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.unbondingDelegation,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorUnbondingDelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.redelegations,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidators,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.delegatorValidator,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.historicalInfo,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.pool,
      Cosmos_Staking_V1beta1_QueryClientMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let validators = GRPCMethodDescriptor(
      name: "Validators",
      path: "/cosmos.staking.v1beta1.Query/Validators",
      type: GRPCCallType.unary
    )

    internal static let validator = GRPCMethodDescriptor(
      name: "Validator",
      path: "/cosmos.staking.v1beta1.Query/Validator",
      type: GRPCCallType.unary
    )

    internal static let validatorDelegations = GRPCMethodDescriptor(
      name: "ValidatorDelegations",
      path: "/cosmos.staking.v1beta1.Query/ValidatorDelegations",
      type: GRPCCallType.unary
    )

    internal static let validatorUnbondingDelegations = GRPCMethodDescriptor(
      name: "ValidatorUnbondingDelegations",
      path: "/cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations",
      type: GRPCCallType.unary
    )

    internal static let delegation = GRPCMethodDescriptor(
      name: "Delegation",
      path: "/cosmos.staking.v1beta1.Query/Delegation",
      type: GRPCCallType.unary
    )

    internal static let unbondingDelegation = GRPCMethodDescriptor(
      name: "UnbondingDelegation",
      path: "/cosmos.staking.v1beta1.Query/UnbondingDelegation",
      type: GRPCCallType.unary
    )

    internal static let delegatorDelegations = GRPCMethodDescriptor(
      name: "DelegatorDelegations",
      path: "/cosmos.staking.v1beta1.Query/DelegatorDelegations",
      type: GRPCCallType.unary
    )

    internal static let delegatorUnbondingDelegations = GRPCMethodDescriptor(
      name: "DelegatorUnbondingDelegations",
      path: "/cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations",
      type: GRPCCallType.unary
    )

    internal static let redelegations = GRPCMethodDescriptor(
      name: "Redelegations",
      path: "/cosmos.staking.v1beta1.Query/Redelegations",
      type: GRPCCallType.unary
    )

    internal static let delegatorValidators = GRPCMethodDescriptor(
      name: "DelegatorValidators",
      path: "/cosmos.staking.v1beta1.Query/DelegatorValidators",
      type: GRPCCallType.unary
    )

    internal static let delegatorValidator = GRPCMethodDescriptor(
      name: "DelegatorValidator",
      path: "/cosmos.staking.v1beta1.Query/DelegatorValidator",
      type: GRPCCallType.unary
    )

    internal static let historicalInfo = GRPCMethodDescriptor(
      name: "HistoricalInfo",
      path: "/cosmos.staking.v1beta1.Query/HistoricalInfo",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/cosmos.staking.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.staking.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Staking_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Staking_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Validators queries all validators that match the given status.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func validators(request: Cosmos_Staking_V1beta1_QueryValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryValidatorsResponse>

  /// Validator queries validator info for given validator address.
  func validator(request: Cosmos_Staking_V1beta1_QueryValidatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryValidatorResponse>

  /// ValidatorDelegations queries delegate info for given validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func validatorDelegations(request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>

  /// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func validatorUnbondingDelegations(request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>

  /// Delegation queries delegate info for given validator delegator pair.
  func delegation(request: Cosmos_Staking_V1beta1_QueryDelegationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryDelegationResponse>

  /// UnbondingDelegation queries unbonding info for given validator delegator
  /// pair.
  func unbondingDelegation(request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>

  /// DelegatorDelegations queries all delegations of a given delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func delegatorDelegations(request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>

  /// DelegatorUnbondingDelegations queries all unbonding delegations of a given
  /// delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func delegatorUnbondingDelegations(request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>

  /// Redelegations queries redelegations of given address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func redelegations(request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryRedelegationsResponse>

  /// DelegatorValidators queries all validators info for given delegator
  /// address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  func delegatorValidators(request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>

  /// DelegatorValidator queries validator info for given delegator validator
  /// pair.
  func delegatorValidator(request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>

  /// HistoricalInfo queries the historical info for given height.
  func historicalInfo(request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>

  /// Pool queries the pool info.
  func pool(request: Cosmos_Staking_V1beta1_QueryPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryPoolResponse>

  /// Parameters queries the staking parameters.
  func params(request: Cosmos_Staking_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Staking_V1beta1_QueryParamsResponse>
}

extension Cosmos_Staking_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Cosmos_Staking_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Validators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorsResponse>(),
        interceptors: self.interceptors?.makeValidatorsInterceptors() ?? [],
        userFunction: self.validators(request:context:)
      )

    case "Validator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorResponse>(),
        interceptors: self.interceptors?.makeValidatorInterceptors() ?? [],
        userFunction: self.validator(request:context:)
      )

    case "ValidatorDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>(),
        interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? [],
        userFunction: self.validatorDelegations(request:context:)
      )

    case "ValidatorUnbondingDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>(),
        interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? [],
        userFunction: self.validatorUnbondingDelegations(request:context:)
      )

    case "Delegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegationResponse>(),
        interceptors: self.interceptors?.makeDelegationInterceptors() ?? [],
        userFunction: self.delegation(request:context:)
      )

    case "UnbondingDelegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>(),
        interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? [],
        userFunction: self.unbondingDelegation(request:context:)
      )

    case "DelegatorDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>(),
        interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? [],
        userFunction: self.delegatorDelegations(request:context:)
      )

    case "DelegatorUnbondingDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>(),
        interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? [],
        userFunction: self.delegatorUnbondingDelegations(request:context:)
      )

    case "Redelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryRedelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryRedelegationsResponse>(),
        interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? [],
        userFunction: self.redelegations(request:context:)
      )

    case "DelegatorValidators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>(),
        interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? [],
        userFunction: self.delegatorValidators(request:context:)
      )

    case "DelegatorValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>(),
        interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? [],
        userFunction: self.delegatorValidator(request:context:)
      )

    case "HistoricalInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>(),
        interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? [],
        userFunction: self.historicalInfo(request:context:)
      )

    case "Pool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        userFunction: self.pool(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Staking_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Staking_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Validators queries all validators that match the given status.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func validators(
    request: Cosmos_Staking_V1beta1_QueryValidatorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorsResponse

  /// Validator queries validator info for given validator address.
  @Sendable func validator(
    request: Cosmos_Staking_V1beta1_QueryValidatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorResponse

  /// ValidatorDelegations queries delegate info for given validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func validatorDelegations(
    request: Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse

  /// ValidatorUnbondingDelegations queries unbonding delegations of a validator.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func validatorUnbondingDelegations(
    request: Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse

  /// Delegation queries delegate info for given validator delegator pair.
  @Sendable func delegation(
    request: Cosmos_Staking_V1beta1_QueryDelegationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegationResponse

  /// UnbondingDelegation queries unbonding info for given validator delegator
  /// pair.
  @Sendable func unbondingDelegation(
    request: Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse

  /// DelegatorDelegations queries all delegations of a given delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func delegatorDelegations(
    request: Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse

  /// DelegatorUnbondingDelegations queries all unbonding delegations of a given
  /// delegator address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func delegatorUnbondingDelegations(
    request: Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse

  /// Redelegations queries redelegations of given address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func redelegations(
    request: Cosmos_Staking_V1beta1_QueryRedelegationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryRedelegationsResponse

  /// DelegatorValidators queries all validators info for given delegator
  /// address.
  ///
  /// When called from another module, this query might consume a high amount of
  /// gas if the pagination field is incorrectly set.
  @Sendable func delegatorValidators(
    request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse

  /// DelegatorValidator queries validator info for given delegator validator
  /// pair.
  @Sendable func delegatorValidator(
    request: Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse

  /// HistoricalInfo queries the historical info for given height.
  @Sendable func historicalInfo(
    request: Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse

  /// Pool queries the pool info.
  @Sendable func pool(
    request: Cosmos_Staking_V1beta1_QueryPoolRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryPoolResponse

  /// Parameters queries the staking parameters.
  @Sendable func params(
    request: Cosmos_Staking_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Staking_V1beta1_QueryParamsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Staking_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Staking_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Staking_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Staking_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Validators":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorsResponse>(),
        interceptors: self.interceptors?.makeValidatorsInterceptors() ?? [],
        wrapping: self.validators(request:context:)
      )

    case "Validator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorResponse>(),
        interceptors: self.interceptors?.makeValidatorInterceptors() ?? [],
        wrapping: self.validator(request:context:)
      )

    case "ValidatorDelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>(),
        interceptors: self.interceptors?.makeValidatorDelegationsInterceptors() ?? [],
        wrapping: self.validatorDelegations(request:context:)
      )

    case "ValidatorUnbondingDelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>(),
        interceptors: self.interceptors?.makeValidatorUnbondingDelegationsInterceptors() ?? [],
        wrapping: self.validatorUnbondingDelegations(request:context:)
      )

    case "Delegation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegationResponse>(),
        interceptors: self.interceptors?.makeDelegationInterceptors() ?? [],
        wrapping: self.delegation(request:context:)
      )

    case "UnbondingDelegation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>(),
        interceptors: self.interceptors?.makeUnbondingDelegationInterceptors() ?? [],
        wrapping: self.unbondingDelegation(request:context:)
      )

    case "DelegatorDelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>(),
        interceptors: self.interceptors?.makeDelegatorDelegationsInterceptors() ?? [],
        wrapping: self.delegatorDelegations(request:context:)
      )

    case "DelegatorUnbondingDelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>(),
        interceptors: self.interceptors?.makeDelegatorUnbondingDelegationsInterceptors() ?? [],
        wrapping: self.delegatorUnbondingDelegations(request:context:)
      )

    case "Redelegations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryRedelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryRedelegationsResponse>(),
        interceptors: self.interceptors?.makeRedelegationsInterceptors() ?? [],
        wrapping: self.redelegations(request:context:)
      )

    case "DelegatorValidators":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>(),
        interceptors: self.interceptors?.makeDelegatorValidatorsInterceptors() ?? [],
        wrapping: self.delegatorValidators(request:context:)
      )

    case "DelegatorValidator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>(),
        interceptors: self.interceptors?.makeDelegatorValidatorInterceptors() ?? [],
        wrapping: self.delegatorValidator(request:context:)
      )

    case "HistoricalInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>(),
        interceptors: self.interceptors?.makeHistoricalInfoInterceptors() ?? [],
        wrapping: self.historicalInfo(request:context:)
      )

    case "Pool":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        wrapping: self.pool(request:context:)
      )

    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Staking_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Staking_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Staking_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'validators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryValidatorsRequest, Cosmos_Staking_V1beta1_QueryValidatorsResponse>]

  /// - Returns: Interceptors to use when handling 'validator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryValidatorRequest, Cosmos_Staking_V1beta1_QueryValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'validatorDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorDelegationsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryValidatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'validatorUnbondingDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorUnbondingDelegationsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryValidatorUnbondingDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'delegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegationInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryDelegationRequest, Cosmos_Staking_V1beta1_QueryDelegationResponse>]

  /// - Returns: Interceptors to use when handling 'unbondingDelegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnbondingDelegationInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryUnbondingDelegationRequest, Cosmos_Staking_V1beta1_QueryUnbondingDelegationResponse>]

  /// - Returns: Interceptors to use when handling 'delegatorDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatorDelegationsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'delegatorUnbondingDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatorUnbondingDelegationsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsRequest, Cosmos_Staking_V1beta1_QueryDelegatorUnbondingDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'redelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRedelegationsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryRedelegationsRequest, Cosmos_Staking_V1beta1_QueryRedelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'delegatorValidators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatorValidatorsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorsResponse>]

  /// - Returns: Interceptors to use when handling 'delegatorValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatorValidatorInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryDelegatorValidatorRequest, Cosmos_Staking_V1beta1_QueryDelegatorValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'historicalInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHistoricalInfoInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryHistoricalInfoRequest, Cosmos_Staking_V1beta1_QueryHistoricalInfoResponse>]

  /// - Returns: Interceptors to use when handling 'pool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryPoolRequest, Cosmos_Staking_V1beta1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Cosmos_Staking_V1beta1_QueryParamsRequest, Cosmos_Staking_V1beta1_QueryParamsResponse>]
}

internal enum Cosmos_Staking_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.staking.v1beta1.Query",
    methods: [
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.validators,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.validator,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.validatorDelegations,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.validatorUnbondingDelegations,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.delegation,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.unbondingDelegation,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.delegatorDelegations,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.delegatorUnbondingDelegations,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.redelegations,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.delegatorValidators,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.delegatorValidator,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.historicalInfo,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.pool,
      Cosmos_Staking_V1beta1_QueryServerMetadata.Methods.params,
    ]
  )

  internal enum Methods {
    internal static let validators = GRPCMethodDescriptor(
      name: "Validators",
      path: "/cosmos.staking.v1beta1.Query/Validators",
      type: GRPCCallType.unary
    )

    internal static let validator = GRPCMethodDescriptor(
      name: "Validator",
      path: "/cosmos.staking.v1beta1.Query/Validator",
      type: GRPCCallType.unary
    )

    internal static let validatorDelegations = GRPCMethodDescriptor(
      name: "ValidatorDelegations",
      path: "/cosmos.staking.v1beta1.Query/ValidatorDelegations",
      type: GRPCCallType.unary
    )

    internal static let validatorUnbondingDelegations = GRPCMethodDescriptor(
      name: "ValidatorUnbondingDelegations",
      path: "/cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations",
      type: GRPCCallType.unary
    )

    internal static let delegation = GRPCMethodDescriptor(
      name: "Delegation",
      path: "/cosmos.staking.v1beta1.Query/Delegation",
      type: GRPCCallType.unary
    )

    internal static let unbondingDelegation = GRPCMethodDescriptor(
      name: "UnbondingDelegation",
      path: "/cosmos.staking.v1beta1.Query/UnbondingDelegation",
      type: GRPCCallType.unary
    )

    internal static let delegatorDelegations = GRPCMethodDescriptor(
      name: "DelegatorDelegations",
      path: "/cosmos.staking.v1beta1.Query/DelegatorDelegations",
      type: GRPCCallType.unary
    )

    internal static let delegatorUnbondingDelegations = GRPCMethodDescriptor(
      name: "DelegatorUnbondingDelegations",
      path: "/cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations",
      type: GRPCCallType.unary
    )

    internal static let redelegations = GRPCMethodDescriptor(
      name: "Redelegations",
      path: "/cosmos.staking.v1beta1.Query/Redelegations",
      type: GRPCCallType.unary
    )

    internal static let delegatorValidators = GRPCMethodDescriptor(
      name: "DelegatorValidators",
      path: "/cosmos.staking.v1beta1.Query/DelegatorValidators",
      type: GRPCCallType.unary
    )

    internal static let delegatorValidator = GRPCMethodDescriptor(
      name: "DelegatorValidator",
      path: "/cosmos.staking.v1beta1.Query/DelegatorValidator",
      type: GRPCCallType.unary
    )

    internal static let historicalInfo = GRPCMethodDescriptor(
      name: "HistoricalInfo",
      path: "/cosmos.staking.v1beta1.Query/HistoricalInfo",
      type: GRPCCallType.unary
    )

    internal static let pool = GRPCMethodDescriptor(
      name: "Pool",
      path: "/cosmos.staking.v1beta1.Query/Pool",
      type: GRPCCallType.unary
    )

    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/cosmos.staking.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )
  }
}
