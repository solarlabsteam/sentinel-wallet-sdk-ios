//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/base/reflection/v2alpha1/reflection.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ReflectionService defines a service for application reflection.
///
/// Usage: instantiate `Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol? { get }

  func getAuthnDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse>

  func getChainDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse>

  func getCodecDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse>

  func getConfigurationDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse>

  func getQueryServicesDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse>

  func getTxDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse>
}

extension Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientProtocol {
  internal var serviceName: String {
    return "cosmos.base.reflection.v2alpha1.ReflectionService"
  }

  /// GetAuthnDescriptor returns information on how to authenticate transactions in the application
  /// NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
  /// future releases of the cosmos-sdk.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAuthnDescriptor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAuthnDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getAuthnDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuthnDescriptorInterceptors() ?? []
    )
  }

  /// GetChainDescriptor returns the description of the chain
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChainDescriptor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getChainDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getChainDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChainDescriptorInterceptors() ?? []
    )
  }

  /// GetCodecDescriptor returns the descriptor of the codec of the application
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCodecDescriptor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCodecDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getCodecDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCodecDescriptorInterceptors() ?? []
    )
  }

  /// GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
  ///
  /// - Parameters:
  ///   - request: Request to send to GetConfigurationDescriptor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getConfigurationDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getConfigurationDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConfigurationDescriptorInterceptors() ?? []
    )
  }

  /// GetQueryServicesDescriptor returns the available gRPC queryable services of the application
  ///
  /// - Parameters:
  ///   - request: Request to send to GetQueryServicesDescriptor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getQueryServicesDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getQueryServicesDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetQueryServicesDescriptorInterceptors() ?? []
    )
  }

  /// GetTxDescriptor returns information on the used transaction object and available msgs that can be used
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTxDescriptor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTxDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getTxDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxDescriptorInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Base_Reflection_V2alpha1_ReflectionServiceNIOClient")
internal final class Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClient: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.base.reflection.v2alpha1.ReflectionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Base_Reflection_V2alpha1_ReflectionServiceNIOClient: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.base.reflection.v2alpha1.ReflectionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ReflectionService defines a service for application reflection.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Base_Reflection_V2alpha1_ReflectionServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol? { get }

  func makeGetAuthnDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse>

  func makeGetChainDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse>

  func makeGetCodecDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse>

  func makeGetConfigurationDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse>

  func makeGetQueryServicesDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse>

  func makeGetTxDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Base_Reflection_V2alpha1_ReflectionServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetAuthnDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getAuthnDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuthnDescriptorInterceptors() ?? []
    )
  }

  internal func makeGetChainDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getChainDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChainDescriptorInterceptors() ?? []
    )
  }

  internal func makeGetCodecDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getCodecDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCodecDescriptorInterceptors() ?? []
    )
  }

  internal func makeGetConfigurationDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getConfigurationDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConfigurationDescriptorInterceptors() ?? []
    )
  }

  internal func makeGetQueryServicesDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getQueryServicesDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetQueryServicesDescriptorInterceptors() ?? []
    )
  }

  internal func makeGetTxDescriptorCall(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getTxDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxDescriptorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Base_Reflection_V2alpha1_ReflectionServiceAsyncClientProtocol {
  internal func getAuthnDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getAuthnDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAuthnDescriptorInterceptors() ?? []
    )
  }

  internal func getChainDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getChainDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChainDescriptorInterceptors() ?? []
    )
  }

  internal func getCodecDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getCodecDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCodecDescriptorInterceptors() ?? []
    )
  }

  internal func getConfigurationDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getConfigurationDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetConfigurationDescriptorInterceptors() ?? []
    )
  }

  internal func getQueryServicesDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getQueryServicesDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetQueryServicesDescriptorInterceptors() ?? []
    )
  }

  internal func getTxDescriptor(
    _ request: Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getTxDescriptor.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTxDescriptorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Base_Reflection_V2alpha1_ReflectionServiceAsyncClient: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getAuthnDescriptor'.
  func makeGetAuthnDescriptorInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse>]

  /// - Returns: Interceptors to use when invoking 'getChainDescriptor'.
  func makeGetChainDescriptorInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse>]

  /// - Returns: Interceptors to use when invoking 'getCodecDescriptor'.
  func makeGetCodecDescriptorInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse>]

  /// - Returns: Interceptors to use when invoking 'getConfigurationDescriptor'.
  func makeGetConfigurationDescriptorInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse>]

  /// - Returns: Interceptors to use when invoking 'getQueryServicesDescriptor'.
  func makeGetQueryServicesDescriptorInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse>]

  /// - Returns: Interceptors to use when invoking 'getTxDescriptor'.
  func makeGetTxDescriptorInterceptors() -> [ClientInterceptor<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse>]
}

internal enum Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ReflectionService",
    fullName: "cosmos.base.reflection.v2alpha1.ReflectionService",
    methods: [
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getAuthnDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getChainDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getCodecDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getConfigurationDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getQueryServicesDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceClientMetadata.Methods.getTxDescriptor,
    ]
  )

  internal enum Methods {
    internal static let getAuthnDescriptor = GRPCMethodDescriptor(
      name: "GetAuthnDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetAuthnDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getChainDescriptor = GRPCMethodDescriptor(
      name: "GetChainDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetChainDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getCodecDescriptor = GRPCMethodDescriptor(
      name: "GetCodecDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetCodecDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getConfigurationDescriptor = GRPCMethodDescriptor(
      name: "GetConfigurationDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetConfigurationDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getQueryServicesDescriptor = GRPCMethodDescriptor(
      name: "GetQueryServicesDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetQueryServicesDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getTxDescriptor = GRPCMethodDescriptor(
      name: "GetTxDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetTxDescriptor",
      type: GRPCCallType.unary
    )
  }
}

/// ReflectionService defines a service for application reflection.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Base_Reflection_V2alpha1_ReflectionServiceProvider: CallHandlerProvider {
  var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerInterceptorFactoryProtocol? { get }

  /// GetAuthnDescriptor returns information on how to authenticate transactions in the application
  /// NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
  /// future releases of the cosmos-sdk.
  func getAuthnDescriptor(request: Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse>

  /// GetChainDescriptor returns the description of the chain
  func getChainDescriptor(request: Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse>

  /// GetCodecDescriptor returns the descriptor of the codec of the application
  func getCodecDescriptor(request: Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse>

  /// GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
  func getConfigurationDescriptor(request: Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse>

  /// GetQueryServicesDescriptor returns the available gRPC queryable services of the application
  func getQueryServicesDescriptor(request: Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse>

  /// GetTxDescriptor returns information on the used transaction object and available msgs that can be used
  func getTxDescriptor(request: Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse>
}

extension Cosmos_Base_Reflection_V2alpha1_ReflectionServiceProvider {
  internal var serviceName: Substring {
    return Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetAuthnDescriptor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetAuthnDescriptorInterceptors() ?? [],
        userFunction: self.getAuthnDescriptor(request:context:)
      )

    case "GetChainDescriptor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetChainDescriptorInterceptors() ?? [],
        userFunction: self.getChainDescriptor(request:context:)
      )

    case "GetCodecDescriptor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetCodecDescriptorInterceptors() ?? [],
        userFunction: self.getCodecDescriptor(request:context:)
      )

    case "GetConfigurationDescriptor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetConfigurationDescriptorInterceptors() ?? [],
        userFunction: self.getConfigurationDescriptor(request:context:)
      )

    case "GetQueryServicesDescriptor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetQueryServicesDescriptorInterceptors() ?? [],
        userFunction: self.getQueryServicesDescriptor(request:context:)
      )

    case "GetTxDescriptor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetTxDescriptorInterceptors() ?? [],
        userFunction: self.getTxDescriptor(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ReflectionService defines a service for application reflection.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Base_Reflection_V2alpha1_ReflectionServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerInterceptorFactoryProtocol? { get }

  /// GetAuthnDescriptor returns information on how to authenticate transactions in the application
  /// NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
  /// future releases of the cosmos-sdk.
  @Sendable func getAuthnDescriptor(
    request: Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse

  /// GetChainDescriptor returns the description of the chain
  @Sendable func getChainDescriptor(
    request: Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse

  /// GetCodecDescriptor returns the descriptor of the codec of the application
  @Sendable func getCodecDescriptor(
    request: Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse

  /// GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
  @Sendable func getConfigurationDescriptor(
    request: Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse

  /// GetQueryServicesDescriptor returns the available gRPC queryable services of the application
  @Sendable func getQueryServicesDescriptor(
    request: Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse

  /// GetTxDescriptor returns information on the used transaction object and available msgs that can be used
  @Sendable func getTxDescriptor(
    request: Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Base_Reflection_V2alpha1_ReflectionServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetAuthnDescriptor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetAuthnDescriptorInterceptors() ?? [],
        wrapping: self.getAuthnDescriptor(request:context:)
      )

    case "GetChainDescriptor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetChainDescriptorInterceptors() ?? [],
        wrapping: self.getChainDescriptor(request:context:)
      )

    case "GetCodecDescriptor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetCodecDescriptorInterceptors() ?? [],
        wrapping: self.getCodecDescriptor(request:context:)
      )

    case "GetConfigurationDescriptor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetConfigurationDescriptorInterceptors() ?? [],
        wrapping: self.getConfigurationDescriptor(request:context:)
      )

    case "GetQueryServicesDescriptor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetQueryServicesDescriptorInterceptors() ?? [],
        wrapping: self.getQueryServicesDescriptor(request:context:)
      )

    case "GetTxDescriptor":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse>(),
        interceptors: self.interceptors?.makeGetTxDescriptorInterceptors() ?? [],
        wrapping: self.getTxDescriptor(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getAuthnDescriptor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAuthnDescriptorInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetAuthnDescriptorResponse>]

  /// - Returns: Interceptors to use when handling 'getChainDescriptor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChainDescriptorInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetChainDescriptorResponse>]

  /// - Returns: Interceptors to use when handling 'getCodecDescriptor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCodecDescriptorInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetCodecDescriptorResponse>]

  /// - Returns: Interceptors to use when handling 'getConfigurationDescriptor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetConfigurationDescriptorInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetConfigurationDescriptorResponse>]

  /// - Returns: Interceptors to use when handling 'getQueryServicesDescriptor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetQueryServicesDescriptorInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetQueryServicesDescriptorResponse>]

  /// - Returns: Interceptors to use when handling 'getTxDescriptor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetTxDescriptorInterceptors() -> [ServerInterceptor<Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorRequest, Cosmos_Base_Reflection_V2alpha1_GetTxDescriptorResponse>]
}

internal enum Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ReflectionService",
    fullName: "cosmos.base.reflection.v2alpha1.ReflectionService",
    methods: [
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.Methods.getAuthnDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.Methods.getChainDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.Methods.getCodecDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.Methods.getConfigurationDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.Methods.getQueryServicesDescriptor,
      Cosmos_Base_Reflection_V2alpha1_ReflectionServiceServerMetadata.Methods.getTxDescriptor,
    ]
  )

  internal enum Methods {
    internal static let getAuthnDescriptor = GRPCMethodDescriptor(
      name: "GetAuthnDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetAuthnDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getChainDescriptor = GRPCMethodDescriptor(
      name: "GetChainDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetChainDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getCodecDescriptor = GRPCMethodDescriptor(
      name: "GetCodecDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetCodecDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getConfigurationDescriptor = GRPCMethodDescriptor(
      name: "GetConfigurationDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetConfigurationDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getQueryServicesDescriptor = GRPCMethodDescriptor(
      name: "GetQueryServicesDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetQueryServicesDescriptor",
      type: GRPCCallType.unary
    )

    internal static let getTxDescriptor = GRPCMethodDescriptor(
      name: "GetTxDescriptor",
      path: "/cosmos.base.reflection.v2alpha1.ReflectionService/GetTxDescriptor",
      type: GRPCCallType.unary
    )
  }
}
