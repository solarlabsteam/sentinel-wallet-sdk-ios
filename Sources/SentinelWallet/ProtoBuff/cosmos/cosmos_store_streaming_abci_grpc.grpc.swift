//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/store/streaming/abci/grpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ABCIListenerService is the service for the BaseApp ABCIListener interface
///
/// Usage: instantiate `Cosmos_Store_Streaming_Abci_ABCIListenerServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol? { get }

  func listenFinalizeBlock(
    _ request: Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest, Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse>

  func listenCommit(
    _ request: Cosmos_Store_Streaming_Abci_ListenCommitRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Store_Streaming_Abci_ListenCommitRequest, Cosmos_Store_Streaming_Abci_ListenCommitResponse>
}

extension Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientProtocol {
  internal var serviceName: String {
    return "cosmos.store.streaming.abci.ABCIListenerService"
  }

  /// ListenFinalizeBlock is the corresponding endpoint for ABCIListener.ListenEndBlock
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenFinalizeBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listenFinalizeBlock(
    _ request: Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest, Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenFinalizeBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenFinalizeBlockInterceptors() ?? []
    )
  }

  /// ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenCommit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listenCommit(
    _ request: Cosmos_Store_Streaming_Abci_ListenCommitRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Store_Streaming_Abci_ListenCommitRequest, Cosmos_Store_Streaming_Abci_ListenCommitResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenCommit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenCommitInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Store_Streaming_Abci_ABCIListenerServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Store_Streaming_Abci_ABCIListenerServiceNIOClient")
internal final class Cosmos_Store_Streaming_Abci_ABCIListenerServiceClient: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.store.streaming.abci.ABCIListenerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Store_Streaming_Abci_ABCIListenerServiceNIOClient: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.store.streaming.abci.ABCIListenerService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ABCIListenerService is the service for the BaseApp ABCIListener interface
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Store_Streaming_Abci_ABCIListenerServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol? { get }

  func makeListenFinalizeBlockCall(
    _ request: Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest, Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse>

  func makeListenCommitCall(
    _ request: Cosmos_Store_Streaming_Abci_ListenCommitRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Store_Streaming_Abci_ListenCommitRequest, Cosmos_Store_Streaming_Abci_ListenCommitResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Store_Streaming_Abci_ABCIListenerServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeListenFinalizeBlockCall(
    _ request: Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest, Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenFinalizeBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenFinalizeBlockInterceptors() ?? []
    )
  }

  internal func makeListenCommitCall(
    _ request: Cosmos_Store_Streaming_Abci_ListenCommitRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Store_Streaming_Abci_ListenCommitRequest, Cosmos_Store_Streaming_Abci_ListenCommitResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenCommit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenCommitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Store_Streaming_Abci_ABCIListenerServiceAsyncClientProtocol {
  internal func listenFinalizeBlock(
    _ request: Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenFinalizeBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenFinalizeBlockInterceptors() ?? []
    )
  }

  internal func listenCommit(
    _ request: Cosmos_Store_Streaming_Abci_ListenCommitRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Store_Streaming_Abci_ListenCommitResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenCommit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenCommitInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Store_Streaming_Abci_ABCIListenerServiceAsyncClient: Cosmos_Store_Streaming_Abci_ABCIListenerServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'listenFinalizeBlock'.
  func makeListenFinalizeBlockInterceptors() -> [ClientInterceptor<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest, Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'listenCommit'.
  func makeListenCommitInterceptors() -> [ClientInterceptor<Cosmos_Store_Streaming_Abci_ListenCommitRequest, Cosmos_Store_Streaming_Abci_ListenCommitResponse>]
}

internal enum Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ABCIListenerService",
    fullName: "cosmos.store.streaming.abci.ABCIListenerService",
    methods: [
      Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenFinalizeBlock,
      Cosmos_Store_Streaming_Abci_ABCIListenerServiceClientMetadata.Methods.listenCommit,
    ]
  )

  internal enum Methods {
    internal static let listenFinalizeBlock = GRPCMethodDescriptor(
      name: "ListenFinalizeBlock",
      path: "/cosmos.store.streaming.abci.ABCIListenerService/ListenFinalizeBlock",
      type: GRPCCallType.unary
    )

    internal static let listenCommit = GRPCMethodDescriptor(
      name: "ListenCommit",
      path: "/cosmos.store.streaming.abci.ABCIListenerService/ListenCommit",
      type: GRPCCallType.unary
    )
  }
}

/// ABCIListenerService is the service for the BaseApp ABCIListener interface
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Store_Streaming_Abci_ABCIListenerServiceProvider: CallHandlerProvider {
  var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerInterceptorFactoryProtocol? { get }

  /// ListenFinalizeBlock is the corresponding endpoint for ABCIListener.ListenEndBlock
  func listenFinalizeBlock(request: Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse>

  /// ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit
  func listenCommit(request: Cosmos_Store_Streaming_Abci_ListenCommitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Store_Streaming_Abci_ListenCommitResponse>
}

extension Cosmos_Store_Streaming_Abci_ABCIListenerServiceProvider {
  internal var serviceName: Substring {
    return Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListenFinalizeBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse>(),
        interceptors: self.interceptors?.makeListenFinalizeBlockInterceptors() ?? [],
        userFunction: self.listenFinalizeBlock(request:context:)
      )

    case "ListenCommit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Store_Streaming_Abci_ListenCommitRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Store_Streaming_Abci_ListenCommitResponse>(),
        interceptors: self.interceptors?.makeListenCommitInterceptors() ?? [],
        userFunction: self.listenCommit(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ABCIListenerService is the service for the BaseApp ABCIListener interface
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Store_Streaming_Abci_ABCIListenerServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerInterceptorFactoryProtocol? { get }

  /// ListenFinalizeBlock is the corresponding endpoint for ABCIListener.ListenEndBlock
  @Sendable func listenFinalizeBlock(
    request: Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse

  /// ListenCommit is the corresponding endpoint for ABCIListener.ListenCommit
  @Sendable func listenCommit(
    request: Cosmos_Store_Streaming_Abci_ListenCommitRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Store_Streaming_Abci_ListenCommitResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Store_Streaming_Abci_ABCIListenerServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListenFinalizeBlock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse>(),
        interceptors: self.interceptors?.makeListenFinalizeBlockInterceptors() ?? [],
        wrapping: self.listenFinalizeBlock(request:context:)
      )

    case "ListenCommit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Store_Streaming_Abci_ListenCommitRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Store_Streaming_Abci_ListenCommitResponse>(),
        interceptors: self.interceptors?.makeListenCommitInterceptors() ?? [],
        wrapping: self.listenCommit(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'listenFinalizeBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenFinalizeBlockInterceptors() -> [ServerInterceptor<Cosmos_Store_Streaming_Abci_ListenFinalizeBlockRequest, Cosmos_Store_Streaming_Abci_ListenFinalizeBlockResponse>]

  /// - Returns: Interceptors to use when handling 'listenCommit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenCommitInterceptors() -> [ServerInterceptor<Cosmos_Store_Streaming_Abci_ListenCommitRequest, Cosmos_Store_Streaming_Abci_ListenCommitResponse>]
}

internal enum Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ABCIListenerService",
    fullName: "cosmos.store.streaming.abci.ABCIListenerService",
    methods: [
      Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerMetadata.Methods.listenFinalizeBlock,
      Cosmos_Store_Streaming_Abci_ABCIListenerServiceServerMetadata.Methods.listenCommit,
    ]
  )

  internal enum Methods {
    internal static let listenFinalizeBlock = GRPCMethodDescriptor(
      name: "ListenFinalizeBlock",
      path: "/cosmos.store.streaming.abci.ABCIListenerService/ListenFinalizeBlock",
      type: GRPCCallType.unary
    )

    internal static let listenCommit = GRPCMethodDescriptor(
      name: "ListenCommit",
      path: "/cosmos.store.streaming.abci.ABCIListenerService/ListenCommit",
      type: GRPCCallType.unary
    )
  }
}
