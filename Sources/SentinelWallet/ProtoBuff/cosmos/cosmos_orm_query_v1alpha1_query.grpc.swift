//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/orm/query/v1alpha1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query is a generic gRPC service for querying ORM data.
///
/// Usage: instantiate `Cosmos_Orm_Query_V1alpha1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Orm_Query_V1alpha1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func get(
    _ request: Cosmos_Orm_Query_V1alpha1_GetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Orm_Query_V1alpha1_GetRequest, Cosmos_Orm_Query_V1alpha1_GetResponse>

  func list(
    _ request: Cosmos_Orm_Query_V1alpha1_ListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Orm_Query_V1alpha1_ListRequest, Cosmos_Orm_Query_V1alpha1_ListResponse>
}

extension Cosmos_Orm_Query_V1alpha1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.orm.query.v1alpha1.Query"
  }

  /// Get queries an ORM table against an unique index.
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get(
    _ request: Cosmos_Orm_Query_V1alpha1_GetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Orm_Query_V1alpha1_GetRequest, Cosmos_Orm_Query_V1alpha1_GetResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// List queries an ORM table against an index.
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func list(
    _ request: Cosmos_Orm_Query_V1alpha1_ListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Orm_Query_V1alpha1_ListRequest, Cosmos_Orm_Query_V1alpha1_ListResponse> {
    return self.makeUnaryCall(
      path: Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cosmos_Orm_Query_V1alpha1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cosmos_Orm_Query_V1alpha1_QueryNIOClient")
internal final class Cosmos_Orm_Query_V1alpha1_QueryClient: Cosmos_Orm_Query_V1alpha1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cosmos.orm.query.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cosmos_Orm_Query_V1alpha1_QueryNIOClient: Cosmos_Orm_Query_V1alpha1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.orm.query.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query is a generic gRPC service for querying ORM data.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Orm_Query_V1alpha1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func makeGetCall(
    _ request: Cosmos_Orm_Query_V1alpha1_GetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Orm_Query_V1alpha1_GetRequest, Cosmos_Orm_Query_V1alpha1_GetResponse>

  func makeListCall(
    _ request: Cosmos_Orm_Query_V1alpha1_ListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cosmos_Orm_Query_V1alpha1_ListRequest, Cosmos_Orm_Query_V1alpha1_ListResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Orm_Query_V1alpha1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetCall(
    _ request: Cosmos_Orm_Query_V1alpha1_GetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Orm_Query_V1alpha1_GetRequest, Cosmos_Orm_Query_V1alpha1_GetResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  internal func makeListCall(
    _ request: Cosmos_Orm_Query_V1alpha1_ListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cosmos_Orm_Query_V1alpha1_ListRequest, Cosmos_Orm_Query_V1alpha1_ListResponse> {
    return self.makeAsyncUnaryCall(
      path: Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Orm_Query_V1alpha1_QueryAsyncClientProtocol {
  internal func get(
    _ request: Cosmos_Orm_Query_V1alpha1_GetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Orm_Query_V1alpha1_GetResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  internal func list(
    _ request: Cosmos_Orm_Query_V1alpha1_ListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cosmos_Orm_Query_V1alpha1_ListResponse {
    return try await self.performAsyncUnaryCall(
      path: Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cosmos_Orm_Query_V1alpha1_QueryAsyncClient: Cosmos_Orm_Query_V1alpha1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cosmos_Orm_Query_V1alpha1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<Cosmos_Orm_Query_V1alpha1_GetRequest, Cosmos_Orm_Query_V1alpha1_GetResponse>]

  /// - Returns: Interceptors to use when invoking 'list'.
  func makeListInterceptors() -> [ClientInterceptor<Cosmos_Orm_Query_V1alpha1_ListRequest, Cosmos_Orm_Query_V1alpha1_ListResponse>]
}

internal enum Cosmos_Orm_Query_V1alpha1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.orm.query.v1alpha1.Query",
    methods: [
      Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.get,
      Cosmos_Orm_Query_V1alpha1_QueryClientMetadata.Methods.list,
    ]
  )

  internal enum Methods {
    internal static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/cosmos.orm.query.v1alpha1.Query/Get",
      type: GRPCCallType.unary
    )

    internal static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/cosmos.orm.query.v1alpha1.Query/List",
      type: GRPCCallType.unary
    )
  }
}

/// Query is a generic gRPC service for querying ORM data.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Orm_Query_V1alpha1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Orm_Query_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  /// Get queries an ORM table against an unique index.
  func get(request: Cosmos_Orm_Query_V1alpha1_GetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Orm_Query_V1alpha1_GetResponse>

  /// List queries an ORM table against an index.
  func list(request: Cosmos_Orm_Query_V1alpha1_ListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Orm_Query_V1alpha1_ListResponse>
}

extension Cosmos_Orm_Query_V1alpha1_QueryProvider {
  internal var serviceName: Substring {
    return Cosmos_Orm_Query_V1alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Get":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Orm_Query_V1alpha1_GetRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Orm_Query_V1alpha1_GetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        userFunction: self.get(request:context:)
      )

    case "List":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Orm_Query_V1alpha1_ListRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Orm_Query_V1alpha1_ListResponse>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        userFunction: self.list(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query is a generic gRPC service for querying ORM data.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cosmos_Orm_Query_V1alpha1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cosmos_Orm_Query_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  /// Get queries an ORM table against an unique index.
  @Sendable func get(
    request: Cosmos_Orm_Query_V1alpha1_GetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Orm_Query_V1alpha1_GetResponse

  /// List queries an ORM table against an index.
  @Sendable func list(
    request: Cosmos_Orm_Query_V1alpha1_ListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cosmos_Orm_Query_V1alpha1_ListResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cosmos_Orm_Query_V1alpha1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cosmos_Orm_Query_V1alpha1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cosmos_Orm_Query_V1alpha1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cosmos_Orm_Query_V1alpha1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Get":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Orm_Query_V1alpha1_GetRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Orm_Query_V1alpha1_GetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        wrapping: self.get(request:context:)
      )

    case "List":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Orm_Query_V1alpha1_ListRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Orm_Query_V1alpha1_ListResponse>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        wrapping: self.list(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Orm_Query_V1alpha1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'get'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInterceptors() -> [ServerInterceptor<Cosmos_Orm_Query_V1alpha1_GetRequest, Cosmos_Orm_Query_V1alpha1_GetResponse>]

  /// - Returns: Interceptors to use when handling 'list'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInterceptors() -> [ServerInterceptor<Cosmos_Orm_Query_V1alpha1_ListRequest, Cosmos_Orm_Query_V1alpha1_ListResponse>]
}

internal enum Cosmos_Orm_Query_V1alpha1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "cosmos.orm.query.v1alpha1.Query",
    methods: [
      Cosmos_Orm_Query_V1alpha1_QueryServerMetadata.Methods.get,
      Cosmos_Orm_Query_V1alpha1_QueryServerMetadata.Methods.list,
    ]
  )

  internal enum Methods {
    internal static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/cosmos.orm.query.v1alpha1.Query/Get",
      type: GRPCCallType.unary
    )

    internal static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/cosmos.orm.query.v1alpha1.Query/List",
      type: GRPCCallType.unary
    )
  }
}
