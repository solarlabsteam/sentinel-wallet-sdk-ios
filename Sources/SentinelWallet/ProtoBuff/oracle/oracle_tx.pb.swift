// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: oracle/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateFeed defines an sdk.Msg type that supports creating a feed
struct Irismod_Oracle_MsgCreateFeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedName: String = String()

  var latestHistory: UInt64 = 0

  var description_p: String = String()

  var creator: String = String()

  var serviceName: String = String()

  var providers: [String] = []

  var input: String = String()

  var timeout: Int64 = 0

  var serviceFeeCap: [Cosmos_Base_V1beta1_Coin] = []

  var repeatedFrequency: UInt64 = 0

  var aggregateFunc: String = String()

  var valueJsonPath: String = String()

  var responseThreshold: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreateFeedResponse defines the Msg/CreateFeed response type
struct Irismod_Oracle_MsgCreateFeedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgPauseFeed defines an sdk.Msg type that supports stating a feed
struct Irismod_Oracle_MsgStartFeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedName: String = String()

  var creator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgStartFeedResponse defines the Msg/StartFeed response type
struct Irismod_Oracle_MsgStartFeedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgPauseFeed defines an sdk.Msg type that supports pausing a feed
struct Irismod_Oracle_MsgPauseFeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedName: String = String()

  var creator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgPauseFeedResponse defines the Msg/PauseFeed response type
struct Irismod_Oracle_MsgPauseFeedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditFeed defines an sdk.Msg type that supports editing a feed
struct Irismod_Oracle_MsgEditFeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedName: String = String()

  var description_p: String = String()

  var latestHistory: UInt64 = 0

  var providers: [String] = []

  var timeout: Int64 = 0

  var serviceFeeCap: [Cosmos_Base_V1beta1_Coin] = []

  var repeatedFrequency: UInt64 = 0

  var responseThreshold: UInt32 = 0

  var creator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditFeedResponse defines the Msg/EditFeed response type
struct Irismod_Oracle_MsgEditFeedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.oracle"

extension Irismod_Oracle_MsgCreateFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateFeed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_name"),
    2: .standard(proto: "latest_history"),
    3: .same(proto: "description"),
    4: .same(proto: "creator"),
    5: .standard(proto: "service_name"),
    6: .same(proto: "providers"),
    7: .same(proto: "input"),
    8: .same(proto: "timeout"),
    9: .standard(proto: "service_fee_cap"),
    10: .standard(proto: "repeated_frequency"),
    11: .standard(proto: "aggregate_func"),
    12: .standard(proto: "value_json_path"),
    13: .standard(proto: "response_threshold"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.feedName)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.latestHistory)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularStringField(value: &self.creator)
      case 5: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 6: try decoder.decodeRepeatedStringField(value: &self.providers)
      case 7: try decoder.decodeSingularStringField(value: &self.input)
      case 8: try decoder.decodeSingularInt64Field(value: &self.timeout)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.serviceFeeCap)
      case 10: try decoder.decodeSingularUInt64Field(value: &self.repeatedFrequency)
      case 11: try decoder.decodeSingularStringField(value: &self.aggregateFunc)
      case 12: try decoder.decodeSingularStringField(value: &self.valueJsonPath)
      case 13: try decoder.decodeSingularUInt32Field(value: &self.responseThreshold)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedName.isEmpty {
      try visitor.visitSingularStringField(value: self.feedName, fieldNumber: 1)
    }
    if self.latestHistory != 0 {
      try visitor.visitSingularUInt64Field(value: self.latestHistory, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 4)
    }
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 5)
    }
    if !self.providers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.providers, fieldNumber: 6)
    }
    if !self.input.isEmpty {
      try visitor.visitSingularStringField(value: self.input, fieldNumber: 7)
    }
    if self.timeout != 0 {
      try visitor.visitSingularInt64Field(value: self.timeout, fieldNumber: 8)
    }
    if !self.serviceFeeCap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceFeeCap, fieldNumber: 9)
    }
    if self.repeatedFrequency != 0 {
      try visitor.visitSingularUInt64Field(value: self.repeatedFrequency, fieldNumber: 10)
    }
    if !self.aggregateFunc.isEmpty {
      try visitor.visitSingularStringField(value: self.aggregateFunc, fieldNumber: 11)
    }
    if !self.valueJsonPath.isEmpty {
      try visitor.visitSingularStringField(value: self.valueJsonPath, fieldNumber: 12)
    }
    if self.responseThreshold != 0 {
      try visitor.visitSingularUInt32Field(value: self.responseThreshold, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgCreateFeed, rhs: Irismod_Oracle_MsgCreateFeed) -> Bool {
    if lhs.feedName != rhs.feedName {return false}
    if lhs.latestHistory != rhs.latestHistory {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.providers != rhs.providers {return false}
    if lhs.input != rhs.input {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.serviceFeeCap != rhs.serviceFeeCap {return false}
    if lhs.repeatedFrequency != rhs.repeatedFrequency {return false}
    if lhs.aggregateFunc != rhs.aggregateFunc {return false}
    if lhs.valueJsonPath != rhs.valueJsonPath {return false}
    if lhs.responseThreshold != rhs.responseThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_MsgCreateFeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateFeedResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgCreateFeedResponse, rhs: Irismod_Oracle_MsgCreateFeedResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_MsgStartFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgStartFeed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_name"),
    2: .same(proto: "creator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.feedName)
      case 2: try decoder.decodeSingularStringField(value: &self.creator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedName.isEmpty {
      try visitor.visitSingularStringField(value: self.feedName, fieldNumber: 1)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgStartFeed, rhs: Irismod_Oracle_MsgStartFeed) -> Bool {
    if lhs.feedName != rhs.feedName {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_MsgStartFeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgStartFeedResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgStartFeedResponse, rhs: Irismod_Oracle_MsgStartFeedResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_MsgPauseFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgPauseFeed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_name"),
    2: .same(proto: "creator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.feedName)
      case 2: try decoder.decodeSingularStringField(value: &self.creator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedName.isEmpty {
      try visitor.visitSingularStringField(value: self.feedName, fieldNumber: 1)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgPauseFeed, rhs: Irismod_Oracle_MsgPauseFeed) -> Bool {
    if lhs.feedName != rhs.feedName {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_MsgPauseFeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgPauseFeedResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgPauseFeedResponse, rhs: Irismod_Oracle_MsgPauseFeedResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_MsgEditFeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditFeed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_name"),
    2: .same(proto: "description"),
    3: .standard(proto: "latest_history"),
    4: .same(proto: "providers"),
    5: .same(proto: "timeout"),
    6: .standard(proto: "service_fee_cap"),
    7: .standard(proto: "repeated_frequency"),
    8: .standard(proto: "response_threshold"),
    9: .same(proto: "creator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.feedName)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.latestHistory)
      case 4: try decoder.decodeRepeatedStringField(value: &self.providers)
      case 5: try decoder.decodeSingularInt64Field(value: &self.timeout)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.serviceFeeCap)
      case 7: try decoder.decodeSingularUInt64Field(value: &self.repeatedFrequency)
      case 8: try decoder.decodeSingularUInt32Field(value: &self.responseThreshold)
      case 9: try decoder.decodeSingularStringField(value: &self.creator)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedName.isEmpty {
      try visitor.visitSingularStringField(value: self.feedName, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.latestHistory != 0 {
      try visitor.visitSingularUInt64Field(value: self.latestHistory, fieldNumber: 3)
    }
    if !self.providers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.providers, fieldNumber: 4)
    }
    if self.timeout != 0 {
      try visitor.visitSingularInt64Field(value: self.timeout, fieldNumber: 5)
    }
    if !self.serviceFeeCap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceFeeCap, fieldNumber: 6)
    }
    if self.repeatedFrequency != 0 {
      try visitor.visitSingularUInt64Field(value: self.repeatedFrequency, fieldNumber: 7)
    }
    if self.responseThreshold != 0 {
      try visitor.visitSingularUInt32Field(value: self.responseThreshold, fieldNumber: 8)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgEditFeed, rhs: Irismod_Oracle_MsgEditFeed) -> Bool {
    if lhs.feedName != rhs.feedName {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.latestHistory != rhs.latestHistory {return false}
    if lhs.providers != rhs.providers {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.serviceFeeCap != rhs.serviceFeeCap {return false}
    if lhs.repeatedFrequency != rhs.repeatedFrequency {return false}
    if lhs.responseThreshold != rhs.responseThreshold {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_MsgEditFeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditFeedResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_MsgEditFeedResponse, rhs: Irismod_Oracle_MsgEditFeedResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
