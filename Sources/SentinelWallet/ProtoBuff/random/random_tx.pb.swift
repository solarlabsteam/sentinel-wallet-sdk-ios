// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: random/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgRequestRandom defines an sdk.Msg type that supports requesting a random number
struct Irismod_Random_MsgRequestRandom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockInterval: UInt64 = 0

  var consumer: String = String()

  var oracle: Bool = false

  var serviceFeeCap: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRequestRandomResponse defines the Msg/RequestRandom response type
struct Irismod_Random_MsgRequestRandomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.random"

extension Irismod_Random_MsgRequestRandom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRequestRandom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_interval"),
    2: .same(proto: "consumer"),
    3: .same(proto: "oracle"),
    4: .standard(proto: "service_fee_cap"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.blockInterval)
      case 2: try decoder.decodeSingularStringField(value: &self.consumer)
      case 3: try decoder.decodeSingularBoolField(value: &self.oracle)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.serviceFeeCap)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockInterval, fieldNumber: 1)
    }
    if !self.consumer.isEmpty {
      try visitor.visitSingularStringField(value: self.consumer, fieldNumber: 2)
    }
    if self.oracle != false {
      try visitor.visitSingularBoolField(value: self.oracle, fieldNumber: 3)
    }
    if !self.serviceFeeCap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceFeeCap, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Random_MsgRequestRandom, rhs: Irismod_Random_MsgRequestRandom) -> Bool {
    if lhs.blockInterval != rhs.blockInterval {return false}
    if lhs.consumer != rhs.consumer {return false}
    if lhs.oracle != rhs.oracle {return false}
    if lhs.serviceFeeCap != rhs.serviceFeeCap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Random_MsgRequestRandomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRequestRandomResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Random_MsgRequestRandomResponse, rhs: Irismod_Random_MsgRequestRandomResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
